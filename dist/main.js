!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=174)}([function(t,e,n){"use strict";t.exports=n(58)},function(t,e,n){"use strict";n.r(e),n.d(e,"createStore",function(){return l}),n.d(e,"combineReducers",function(){return c}),n.d(e,"bindActionCreators",function(){return d}),n.d(e,"applyMiddleware",function(){return p}),n.d(e,"compose",function(){return h}),n.d(e,"__DO_NOT_USE__ActionTypes",function(){return i});var r=n(31),o=function(){return Math.random().toString(36).substring(7).split("").join(".")},i={INIT:"@@redux/INIT"+o(),REPLACE:"@@redux/REPLACE"+o(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+o()}};function a(t){if("object"!=typeof t||null===t)return!1;for(var e=t;null!==Object.getPrototypeOf(e);)e=Object.getPrototypeOf(e);return Object.getPrototypeOf(t)===e}function l(t,e,n){var o;if("function"==typeof e&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function");if("function"==typeof e&&void 0===n&&(n=e,e=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(l)(t,e)}if("function"!=typeof t)throw new Error("Expected the reducer to be a function.");var s=t,c=e,u=[],d=u,f=!1;function h(){d===u&&(d=u.slice())}function p(){if(f)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return c}function v(t){if("function"!=typeof t)throw new Error("Expected the listener to be a function.");if(f)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");var e=!0;return h(),d.push(t),function(){if(e){if(f)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");e=!1,h();var n=d.indexOf(t);d.splice(n,1)}}}function y(t){if(!a(t))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===t.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(f)throw new Error("Reducers may not dispatch actions.");try{f=!0,c=s(c,t)}finally{f=!1}for(var e=u=d,n=0;n<e.length;n++){(0,e[n])()}return t}return y({type:i.INIT}),(o={dispatch:y,subscribe:v,getState:p,replaceReducer:function(t){if("function"!=typeof t)throw new Error("Expected the nextReducer to be a function.");s=t,y({type:i.REPLACE})}})[r.a]=function(){var t,e=v;return(t={subscribe:function(t){if("object"!=typeof t||null===t)throw new TypeError("Expected the observer to be an object.");function n(){t.next&&t.next(p())}return n(),{unsubscribe:e(n)}}})[r.a]=function(){return this},t},o}function s(t,e){var n=e&&e.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+t+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function c(t){for(var e=Object.keys(t),n={},r=0;r<e.length;r++){var o=e[r];0,"function"==typeof t[o]&&(n[o]=t[o])}var a,l=Object.keys(n);try{!function(t){Object.keys(t).forEach(function(e){var n=t[e];if(void 0===n(void 0,{type:i.INIT}))throw new Error('Reducer "'+e+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:i.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+e+"\" returned undefined when probed with a random type. Don't try to handle "+i.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')})}(n)}catch(t){a=t}return function(t,e){if(void 0===t&&(t={}),a)throw a;for(var r=!1,o={},i=0;i<l.length;i++){var c=l[i],u=n[c],d=t[c],f=u(d,e);if(void 0===f){var h=s(c,e);throw new Error(h)}o[c]=f,r=r||f!==d}return r?o:t}}function u(t,e){return function(){return e(t.apply(this,arguments))}}function d(t,e){if("function"==typeof t)return u(t,e);if("object"!=typeof t||null===t)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===t?"null":typeof t)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');for(var n=Object.keys(t),r={},o=0;o<n.length;o++){var i=n[o],a=t[i];"function"==typeof a&&(r[i]=u(a,e))}return r}function f(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function h(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return 0===e.length?function(t){return t}:1===e.length?e[0]:e.reduce(function(t,e){return function(){return t(e.apply(void 0,arguments))}})}function p(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return function(t){return function(){var n=t.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},i=e.map(function(t){return t(o)});return function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),r.forEach(function(e){f(t,e,n[e])})}return t}({},n,{dispatch:r=h.apply(void 0,i)(n.dispatch)})}}}},function(t,e,n){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var o=(a=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),i=r.sources.map(function(t){return"/*# sourceURL="+r.sourceRoot+t+" */"});return[n].concat(i).concat([o]).join("\n")}var a;return[n].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+n+"}":n}).join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];null!=i&&(r[i]=!0)}for(o=0;o<t.length;o++){var a=t[o];null!=a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),e.push(a))}},e}},function(t,e,n){var r,o,i={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),l=function(t){var e={};return function(t,n){if("function"==typeof t)return t();if(void 0===e[t]){var r=function(t,e){return e?e.querySelector(t):document.querySelector(t)}.call(this,t,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}e[t]=r}return e[t]}}(),s=null,c=0,u=[],d=n(74);function f(t,e){for(var n=0;n<t.length;n++){var r=t[n],o=i[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(m(r.parts[a],e))}else{var l=[];for(a=0;a<r.parts.length;a++)l.push(m(r.parts[a],e));i[r.id]={id:r.id,refs:1,parts:l}}}}function h(t,e){for(var n=[],r={},o=0;o<t.length;o++){var i=t[o],a=e.base?i[0]+e.base:i[0],l={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(l):n.push(r[a]={id:a,parts:[l]})}return n}function p(t,e){var n=l(t.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=u[u.length-1];if("top"===t.insertAt)r?r.nextSibling?n.insertBefore(e,r.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),u.push(e);else if("bottom"===t.insertAt)n.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=l(t.insertAt.before,n);n.insertBefore(e,o)}}function v(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=u.indexOf(t);e>=0&&u.splice(e,1)}function y(t){var e=document.createElement("style");if(void 0===t.attrs.type&&(t.attrs.type="text/css"),void 0===t.attrs.nonce){var r=function(){0;return n.nc}();r&&(t.attrs.nonce=r)}return g(e,t.attrs),p(t,e),e}function g(t,e){Object.keys(e).forEach(function(n){t.setAttribute(n,e[n])})}function m(t,e){var n,r,o,i;if(e.transform&&t.css){if(!(i="function"==typeof e.transform?e.transform(t.css):e.transform.default(t.css)))return function(){};t.css=i}if(e.singleton){var a=c++;n=s||(s=y(e)),r=x.bind(null,n,a,!1),o=x.bind(null,n,a,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",g(e,t.attrs),p(t,e),e}(e),r=function(t,e,n){var r=n.css,o=n.sourceMap,i=void 0===e.convertToAbsoluteUrls&&o;(e.convertToAbsoluteUrls||i)&&(r=d(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),l=t.href;t.href=URL.createObjectURL(a),l&&URL.revokeObjectURL(l)}.bind(null,n,e),o=function(){v(n),n.href&&URL.revokeObjectURL(n.href)}):(n=y(e),r=function(t,e){var n=e.css,r=e.media;r&&t.setAttribute("media",r);if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){v(n)});return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else o()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=a()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var n=h(t,e);return f(n,e),function(t){for(var r=[],o=0;o<n.length;o++){var a=n[o];(l=i[a.id]).refs--,r.push(l)}t&&f(h(t,e),e);for(o=0;o<r.length;o++){var l;if(0===(l=r[o]).refs){for(var s=0;s<l.parts.length;s++)l.parts[s]();delete i[l.id]}}}};var b,_=(b=[],function(t,e){return b[t]=e,b.filter(Boolean).join("\n")});function x(t,e,n,r){var o=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=_(e,o);else{var i=document.createTextNode(o),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(i,a[e]):t.appendChild(i)}}},function(t,e,n){"use strict";var r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t};var o=n(0),i=n(35),a=n(66),l=n(68),s=n(69),c=n(36),u=c.applyNodeProps,d=c.toggleStrictMode,f="16.8.1"===o.version;f||console.warn("Version mismatch detected for react-konva and react. react-konva expects to have react version 16.8.1, but it has version "+o.version+". Make sure versions are matched, otherwise, react-konva work is not guaranteed. For releases information take a look here: https://github.com/konvajs/react-konva/releases");var h=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,t.apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e.prototype.componentDidMount=function(){i.isBrowser&&(this._stage=new i.Stage({width:this.props.width,height:this.props.height,container:this._tagRef}),this._setRef(this._stage),u(this._stage,this.props),this._mountNode=v.createContainer(this._stage),v.updateContainer(this.props.children,this._mountNode,this))},e.prototype._setRef=function(t){var e=this.props.forwardedRef;e&&("function"==typeof e?e(t):e.current=t)},e.prototype.componentDidUpdate=function(t){i.isBrowser&&(this._setRef(this._stage),u(this._stage,this.props,t),v.updateContainer(this.props.children,this._mountNode,this))},e.prototype.componentWillUnmount=function(){i.isBrowser&&(this._setRef(null),v.updateContainer(null,this._mountNode,this),this._stage.destroy())},e.prototype.getStage=function(){return this._stage},e.prototype.render=function(){var t=this,e=this.props;return o.createElement("div",{ref:function(e){return t._tagRef=e},accessKey:e.accessKey,className:e.className,role:e.role,style:e.style,tabIndex:e.tabIndex,title:e.title})},e}(o.Component),p={};["Layer","FastLayer","Group","Label","Rect","Circle","Ellipse","Wedge","Line","Sprite","Image","Text","TextPath","Star","Ring","Arc","Tag","Path","RegularPolygon","Arrow","Shape","Transformer"].forEach(function(t){p[t]=t});var v=a(s);v.injectIntoDevTools({findFiberByHostInstance:l.getClosestInstanceFromNode,bundleType:0,version:o.version,rendererPackageName:"react-konva",getInspectorDataForViewTag:function(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];console.log(e)}});var y=o.forwardRef(function(t,e){return o.createElement(h,r({},t,{forwardedRef:e}))});t.exports=r({},p,{__matchRectVersion:f,Stage:y,useStrictMode:d})},function(t){t.exports={users:[{id:"t0018",userId:"vitalij.kubarev",title:"Виталий Кубарев",about:"JS, CSS, HTML, TypeScript, React, Redux, Backbone, MCP, \n Webpack",capability:"Front-End",phone:"",level:8,category:"people",startdate:"2012-04-18"},{id:"t0019",userId:"pavel.trushkin",title:"Павел Трушкин",about:"JS, CSS, HTML",capability:"Front-End",phone:"",level:12,category:"people",startdate:"2017-04-18"},{id:"t0020",userId:"igor.lyulkin",title:"Игорь Люлькин",about:"Java",capability:"Back-End",phone:"",level:11,category:"people",startdate:"2016-04-18"},{id:"t0021",userId:"ilya.chehov",title:"Илья Чехов",about:"C++, Linux, Qt",capability:"Got powers his father couldn't have dreamt of",phone:"",level:1,category:"people",startdate:"2003-04-18"},{id:"t0022",userId:"ivan.lesnik",title:"Иван Лесник",about:"Warcraft 3",capability:"Casting Slow on everyone",phone:"",level:12,category:"people",startdate:"2003-04-18"},{id:"t0023",userId:"vitas.siplij",title:"Витас Сиплый ",about:"High-pitched c#",capability:"Taking away your music taste",phone:"",level:11,category:"people",startdate:"2010-04-18"}],levels:[{id:"ground_floor",sortId:0,title:"Цокольный этаж",levelMapWidth:800,levelMapHeight:800,levelCellSize:10,boundaries:"20,20 20,320 320,320 320,220 260,220 260,180 620,180 620,20",covering:[],objects:[{category:"cupboard",id:"jsadkqkk",coordinates:{x:70,y:140},width:30,height:50,color:"#DED9C3",movable:!0,correctLocation:!0}]},{id:"second_floor",sortId:1,title:"Второй этаж",levelMapWidth:3650,levelMapHeight:1670,levelCellSize:5,boundaries:"0,0 0,1550 540,1550 540,1670 830,1670 830,1550 1100,1550 1100,1200 830,1200 830,820 1900,820 1900,1140 2180,1140 2180,820 3650,820 3650,0",covering:["0 1550 540 1670","830 820 1100 1200","830 1550 1100 1670","1100 820 1900 1670","1900 1140 2180 1670","2180 820 3650 1670"],objects:[{category:"service_room",title:"Storage",id:"js39thqx",coordinates:{x:740,y:1550},width:90,height:120,color:"#EDEADD",movable:!1,correctLocation:!0},{category:"public_place",title:"Женский туалет",id:"js3a13ws",coordinates:{x:665,y:1300},width:165,height:250,color:"#EDEADD",movable:!1,correctLocation:!0},{category:"public_place",title:"Мужской туалет",id:"js4aonjx",coordinates:{x:830,y:1200},width:270,height:350,color:"#EDEADD",movable:!1,correctLocation:!0},{category:"public_place",title:"Зеленая кухня",id:"js4axzbd",coordinates:{x:665,y:930},width:165,height:270,color:"#A3FFA0",movable:!1,correctLocation:!0},{category:"service_room",title:"Комната для газовой супрессии",id:"js4ay3bu",coordinates:{x:665,y:820},width:165,height:110,color:"#EDEADD",movable:!1,correctLocation:!0},{category:"public_place",title:"Раздевалка",id:"js4d01za",coordinates:{x:385,y:1290},width:155,height:260,color:"#D5BD86",movable:!1,correctLocation:!0},{category:"service_room",title:"Серверная",id:"js4d0kqx",coordinates:{x:665,y:620},width:285,height:200,color:"#EDEADD",movable:!1,correctLocation:!0},{category:"meeting_room",title:"Тверь",id:"js4d1ijt",coordinates:{x:0,y:1170},width:385,height:380,color:"#83DDE9",movable:!1,correctLocation:!0},{category:"table",id:"5",coordinates:{x:0,y:70},width:70,height:40,color:"#F3F681",movable:!0,correctLocation:!0,userId:"t0020"},{category:"printer",id:"8",coordinates:{x:680,y:590},width:30,height:30,color:"#DDDDDD",movable:!0,correctLocation:!0},{category:"scaner",id:"9",coordinates:{x:825,y:580},width:40,height:40,color:"#DDDDDD",movable:!0,correctLocation:!0},{category:"shredder",id:"10",coordinates:{x:765,y:405},width:40,height:30,color:"#DDDDDD",movable:!0,correctLocation:!0},{category:"meeting_room",title:"Осташков",id:"js4flxd9",coordinates:{x:385,y:855},width:180,height:210,color:"#83DDE9",movable:!1,correctLocation:!0},{category:"meeting_room",title:"Старица",id:"js4frm5l",coordinates:{x:385,y:555},width:180,height:300,color:"#83DDE9",movable:!1,correctLocation:!0},{category:"service_room",title:"Storage",id:"js4fu3eo",coordinates:{x:385,y:405},width:180,height:150,color:"#EDEADD",movable:!1,correctLocation:!0},{category:"public_place",title:"Желтая кухня",id:"js4fvr5m",coordinates:{x:1900,y:820},width:280,height:320,color:"#FFFC95",movable:!1,correctLocation:!0},{category:"public_place",title:"Спортзал",id:"js4gcekn",coordinates:{x:2310,y:520},width:320,height:300,color:"#FEE471",movable:!1,correctLocation:!0},{category:"meeting_room",title:"Кашин",id:"js4gelnr",coordinates:{x:2630,y:520},width:310,height:300,color:"#83DDE9",movable:!1,correctLocation:!0},{category:"meeting_room",title:"Торжок",id:"js4gh356",coordinates:{x:2940,y:520},width:310,height:300,color:"#83DDE9",movable:!1,correctLocation:!0},{category:"public_place",title:"Раздевалка",id:"js4gjmsv",coordinates:{x:3250,y:520},width:190,height:300,color:"#E0B14D",movable:!1,correctLocation:!0},{category:"service_room",title:"Storage",id:"js4o2kcq",coordinates:{x:1985,y:520},width:220,height:90,color:"#EDEADD",movable:!1,correctLocation:!0},{category:"public_place",title:"Мужской туалет",id:"js4o46s8",coordinates:{x:2095,y:610},width:110,height:190,color:"#FEE471",movable:!1,correctLocation:!0},{category:"public_place",title:"Женский туалет",id:"js4o4to0",coordinates:{x:1985,y:610},width:110,height:190,color:"#FEE471",movable:!1,correctLocation:!0},{category:"construction",id:"js4o9t4v",coordinates:{x:810,y:405},width:45,height:45,color:"#CCCAC2",movable:!1,correctLocation:!0},{category:"construction",id:"js4q0j36",coordinates:{x:1130,y:405},width:45,height:45,color:"#CCCAC2",movable:!1,correctLocation:!0},{category:"construction",id:"js4q0xao",coordinates:{x:1445,y:405},width:45,height:45,color:"#CCCAC2",movable:!1,correctLocation:!0},{category:"construction",id:"js4q2g3t",coordinates:{x:1750,y:405},width:45,height:45,color:"#CCCAC2",movable:!1,correctLocation:!0},{category:"construction",id:"js4q6d28",coordinates:{x:2215,y:260},width:25,height:25,color:"#CCCAC2",movable:!1,correctLocation:!0},{category:"construction",id:"js4qa6pc",coordinates:{x:2450,y:260},width:25,height:25,color:"#CCCAC2",movable:!1,correctLocation:!0},{category:"construction",id:"js4qai3j",coordinates:{x:2920,y:260},width:25,height:25,color:"#CCCAC2",movable:!1,correctLocation:!0},{category:"construction",id:"js4qaljz",coordinates:{x:2685,y:260},width:25,height:25,color:"#CCCAC2",movable:!1,correctLocation:!0},{category:"construction",id:"js4qapo7",coordinates:{x:3155,y:260},width:25,height:25,color:"#CCCAC2",movable:!1,correctLocation:!0},{category:"construction",id:"js4qat6f",coordinates:{x:3625,y:260},width:25,height:25,color:"#CCCAC2",movable:!1,correctLocation:!0},{category:"construction",id:"js4qazaf",coordinates:{x:3390,y:260},width:25,height:25,color:"#CCCAC2",movable:!1,correctLocation:!0},{category:"construction",id:"js5td07j",coordinates:{x:945,y:560},width:5,height:60,color:"#CCCAC2",movable:!1,correctLocation:!0},{category:"construction",id:"js5te2bh",coordinates:{x:665,y:560},width:5,height:60,color:"#CCCAC2",movable:!1,correctLocation:!0},{category:"construction",id:"js5tlk11",coordinates:{x:385,y:1170},width:45,height:45,color:"#CCCAC2",movable:!1,correctLocation:!0},{category:"construction",id:"js5tmbrw",coordinates:{x:535,y:1170},width:5,height:120,color:"#CCCAC2",movable:!1,correctLocation:!0},{category:"construction",id:"js5tr05w",coordinates:{x:1865,y:530},width:35,height:290,color:"#CCCAC2",movable:!1,correctLocation:!0},{category:"table",id:"js5ttaq5",coordinates:{x:1825,y:285},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"construction",id:"js5tv0bv",coordinates:{x:1985,y:800},width:220,height:20,color:"#CCCAC2",movable:!1,correctLocation:!0},{category:"construction",id:"js5twp62",coordinates:{x:1900,y:800},width:20,height:20,color:"#CCCAC2",movable:!1,correctLocation:!0},{category:"construction",id:"js5ugi7z",coordinates:{x:1865,y:0},width:35,height:460,color:"#CCCAC2",movable:!1,correctLocation:!0},{category:"table",id:"js5utzep",coordinates:{x:780,y:285},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"js5uuzdj",coordinates:{x:780,y:215},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"js5uv632",coordinates:{x:780,y:145},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"js5uva9i",coordinates:{x:780,y:75},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"js5uvh1b",coordinates:{x:780,y:5},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"js5uwvx3",coordinates:{x:740,y:5},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"js5ux127",coordinates:{x:740,y:75},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"js5ux5sv",coordinates:{x:740,y:145},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"js5uxahj",coordinates:{x:740,y:215},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"js5uxesv",coordinates:{x:740,y:285},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"printer",id:"js5v0qt4",coordinates:{x:775,y:580},width:40,height:40,color:"#DDDDDD",movable:!0,correctLocation:!0},{category:"printer",id:"js5v1mvx",coordinates:{x:680,y:560},width:30,height:30,color:"#DDDDDD",movable:!0,correctLocation:!0},{category:"cupboard",id:"js5v2f2n",coordinates:{x:875,y:590},width:60,height:30,color:"#DED9C3",movable:!0,correctLocation:!0},{category:"scaner",id:"js5v3c8v",coordinates:{x:385,y:1065},width:40,height:40,color:"#DDDDDD",movable:!0,correctLocation:!0},{category:"table",id:"js5xck9i",coordinates:{x:960,y:5},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"js5xcoxh",coordinates:{x:1140,y:5},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"js5xcq25",coordinates:{x:1280,y:5},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"js5xcr6s",coordinates:{x:1100,y:5},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"js5xcsbw",coordinates:{x:920,y:5},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"js5xctg5",coordinates:{x:1320,y:5},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"js5xj69r",coordinates:{x:1825,y:75},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"js5xj7pb",coordinates:{x:1640,y:5},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"js5xj8ww",coordinates:{x:1500,y:5},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"js5xja6n",coordinates:{x:1460,y:5},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"js5xjq27",coordinates:{x:1825,y:5},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"js5xkq5y",coordinates:{x:920,y:75},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"js5xkvc7",coordinates:{x:1100,y:285},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"js5xkwef",coordinates:{x:1140,y:215},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"js5xkxkg",coordinates:{x:1100,y:215},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"js5xkyjz",coordinates:{x:1140,y:145},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"js5xkzif",coordinates:{x:1100,y:145},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"js5xl0gv",coordinates:{x:1140,y:75},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"js5xl1e7",coordinates:{x:1100,y:75},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"js5xl2d2",coordinates:{x:960,y:285},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"js5xl4hq",coordinates:{x:920,y:285},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"js5xl5i7",coordinates:{x:960,y:215},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"js5xl6hj",coordinates:{x:920,y:215},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"js5xl7fb",coordinates:{x:960,y:145},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"js5xl8gv",coordinates:{x:920,y:145},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"js5xl9ev",coordinates:{x:960,y:75},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"js5xmcrb",coordinates:{x:1140,y:285},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"js63r3n2",coordinates:{x:70,y:70},width:70,height:40,color:"#F3F681",movable:!0,correctLocation:!0,userId:"t0018"},{category:"table",id:"js63rfni",coordinates:{x:0,y:110},width:70,height:40,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"js63rhwv",coordinates:{x:70,y:110},width:70,height:40,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsacwn13",coordinates:{x:610,y:215},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsacwn14",coordinates:{x:610,y:145},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsacwn15",coordinates:{x:610,y:75},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsacwn16",coordinates:{x:610,y:5},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsacwn17",coordinates:{x:570,y:5},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsacwn18",coordinates:{x:570,y:75},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsacwn19",coordinates:{x:570,y:145},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsacwn1a",coordinates:{x:570,y:215},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsacxccm",coordinates:{x:440,y:215},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsacxccn",coordinates:{x:440,y:145},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsacxcco",coordinates:{x:440,y:75},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsacxccp",coordinates:{x:440,y:5},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsacxccq",coordinates:{x:400,y:5},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsacxccr",coordinates:{x:400,y:75},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsacxccs",coordinates:{x:400,y:145},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsacxcct",coordinates:{x:400,y:215},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsacy2tq",coordinates:{x:270,y:215},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsacy2tr",coordinates:{x:270,y:145},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsacy2ts",coordinates:{x:270,y:75},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsacy2tt",coordinates:{x:270,y:5},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsacy2tu",coordinates:{x:230,y:5},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsacy2tv",coordinates:{x:230,y:75},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:"t0023"},{category:"table",id:"jsacy2tw",coordinates:{x:230,y:145},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsacy2tx",coordinates:{x:230,y:215},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsacza50",coordinates:{x:1825,y:215},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsacza51",coordinates:{x:1825,y:145},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsacznb0",coordinates:{x:1680,y:5},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad008l",coordinates:{x:1280,y:285},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad008m",coordinates:{x:1320,y:215},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad008n",coordinates:{x:1280,y:215},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad008o",coordinates:{x:1320,y:145},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad008p",coordinates:{x:1280,y:145},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad008q",coordinates:{x:1320,y:75},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad008r",coordinates:{x:1280,y:75},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad008s",coordinates:{x:1320,y:285},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad0qsk",coordinates:{x:1460,y:285},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad0qsl",coordinates:{x:1500,y:215},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad0qsm",coordinates:{x:1460,y:215},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad0qsn",coordinates:{x:1500,y:145},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad0qso",coordinates:{x:1460,y:145},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad0qsp",coordinates:{x:1500,y:75},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad0qsq",coordinates:{x:1460,y:75},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad0qsr",coordinates:{x:1500,y:285},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad1245",coordinates:{x:1640,y:285},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad1246",coordinates:{x:1680,y:215},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad1247",coordinates:{x:1640,y:215},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad1248",coordinates:{x:1680,y:145},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad1249",coordinates:{x:1640,y:145},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad124a",coordinates:{x:1680,y:75},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad124b",coordinates:{x:1640,y:75},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad124c",coordinates:{x:1680,y:285},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad2syb",coordinates:{x:0,y:980},width:70,height:40,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad2syc",coordinates:{x:70,y:980},width:70,height:40,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad2syd",coordinates:{x:0,y:1020},width:70,height:40,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad2sye",coordinates:{x:70,y:1020},width:70,height:40,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad3m0d",coordinates:{x:0,y:250},width:70,height:40,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad3m0e",coordinates:{x:70,y:250},width:70,height:40,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad3m0f",coordinates:{x:0,y:290},width:70,height:40,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad3m0g",coordinates:{x:70,y:290},width:70,height:40,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad3vzx",coordinates:{x:0,y:430},width:70,height:40,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad3vzy",coordinates:{x:70,y:430},width:70,height:40,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad3vzz",coordinates:{x:0,y:470},width:70,height:40,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad3w00",coordinates:{x:70,y:470},width:70,height:40,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad40hg",coordinates:{x:0,y:610},width:70,height:40,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad40hh",coordinates:{x:70,y:610},width:70,height:40,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad40hi",coordinates:{x:0,y:650},width:70,height:40,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad40hj",coordinates:{x:70,y:650},width:70,height:40,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad47x9",coordinates:{x:0,y:790},width:70,height:40,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad47xa",coordinates:{x:70,y:790},width:70,height:40,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad47xb",coordinates:{x:0,y:830},width:70,height:40,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad47xc",coordinates:{x:70,y:830},width:70,height:40,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad7qdd",coordinates:{x:245,y:965},width:70,height:40,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad7qde",coordinates:{x:315,y:965},width:70,height:40,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad7qdf",coordinates:{x:245,y:1005},width:70,height:40,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad7qdg",coordinates:{x:315,y:1005},width:70,height:40,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad88ck",coordinates:{x:245,y:420},width:70,height:40,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad88cl",coordinates:{x:315,y:420},width:70,height:40,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad88cm",coordinates:{x:245,y:460},width:70,height:40,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad88cn",coordinates:{x:315,y:460},width:70,height:40,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad8skt",coordinates:{x:245,y:600},width:70,height:40,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad8sku",coordinates:{x:315,y:600},width:70,height:40,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad8skv",coordinates:{x:245,y:640},width:70,height:40,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad8skw",coordinates:{x:315,y:640},width:70,height:40,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad948b",coordinates:{x:245,y:780},width:70,height:40,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad948c",coordinates:{x:315,y:780},width:70,height:40,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad948d",coordinates:{x:245,y:820},width:70,height:40,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsad948e",coordinates:{x:315,y:820},width:70,height:40,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsada5v9",coordinates:{x:1090,y:395},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsade3ml",coordinates:{x:1005,y:750},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsade3mm",coordinates:{x:1045,y:680},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsade3mn",coordinates:{x:1005,y:680},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsade3mo",coordinates:{x:1045,y:610},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsade3mp",coordinates:{x:1005,y:610},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsade3mq",coordinates:{x:1045,y:540},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsade3mr",coordinates:{x:1005,y:540},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsade3ms",coordinates:{x:1045,y:750},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadeww3",coordinates:{x:1185,y:750},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadf0lv",coordinates:{x:1225,y:750},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadfgj7",coordinates:{x:1365,y:750},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadfgj8",coordinates:{x:1405,y:750},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadfu97",coordinates:{x:1545,y:750},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadfu98",coordinates:{x:1585,y:750},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadg8uj",coordinates:{x:1725,y:750},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadg8uk",coordinates:{x:1765,y:750},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadgvoz",coordinates:{x:1765,y:680},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadgvp0",coordinates:{x:1725,y:680},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadgvp1",coordinates:{x:1765,y:610},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadgvp2",coordinates:{x:1725,y:610},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadgvp3",coordinates:{x:1765,y:540},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadgvp4",coordinates:{x:1725,y:540},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadgywz",coordinates:{x:1585,y:680},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadgyx0",coordinates:{x:1545,y:680},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadgyx1",coordinates:{x:1585,y:610},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadgyx2",coordinates:{x:1545,y:610},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadgyx3",coordinates:{x:1585,y:540},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadgyx4",coordinates:{x:1545,y:540},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadh0ij",coordinates:{x:1405,y:680},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadh0ik",coordinates:{x:1365,y:680},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadh0il",coordinates:{x:1405,y:610},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadh0im",coordinates:{x:1365,y:610},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadh0in",coordinates:{x:1405,y:540},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadh0io",coordinates:{x:1365,y:540},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadh1ab",coordinates:{x:1225,y:680},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadh1ac",coordinates:{x:1185,y:680},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadh1ad",coordinates:{x:1225,y:610},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadh1ae",coordinates:{x:1185,y:610},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadh1af",coordinates:{x:1225,y:540},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadh1ag",coordinates:{x:1185,y:540},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadn8cy",coordinates:{x:1900,y:285},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadn8cz",coordinates:{x:1900,y:75},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadn8d0",coordinates:{x:1900,y:5},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadn8d1",coordinates:{x:1900,y:215},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadn8d2",coordinates:{x:1900,y:145},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadng2j",coordinates:{x:1900,y:355},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsado0li",coordinates:{x:2065,y:5},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsado0lj",coordinates:{x:2105,y:5},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsado0lk",coordinates:{x:2065,y:285},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsado0ll",coordinates:{x:2105,y:215},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsado0lm",coordinates:{x:2065,y:215},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsado0ln",coordinates:{x:2105,y:145},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsado0lo",coordinates:{x:2065,y:145},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsado0lp",coordinates:{x:2105,y:75},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsado0lq",coordinates:{x:2065,y:75},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsado0lr",coordinates:{x:2105,y:285},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadrvfy",coordinates:{x:2280,y:5},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadrvfz",coordinates:{x:2320,y:5},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadrvg0",coordinates:{x:2280,y:285},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadrvg1",coordinates:{x:2320,y:215},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadrvg2",coordinates:{x:2280,y:215},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadrvg3",coordinates:{x:2320,y:145},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadrvg4",coordinates:{x:2280,y:145},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadrvg5",coordinates:{x:2320,y:75},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadrvg6",coordinates:{x:2280,y:75},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadrvg7",coordinates:{x:2320,y:285},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadsxzl",coordinates:{x:2435,y:5},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadsxzm",coordinates:{x:2435,y:145},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadsxzn",coordinates:{x:2435,y:75},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadta49",coordinates:{x:2435,y:285},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadta4a",coordinates:{x:2435,y:355},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadw8yu",coordinates:{x:2320,y:355},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsadwacr",coordinates:{x:2280,y:355},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae1ow8",coordinates:{x:2540,y:5},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae1ow9",coordinates:{x:2580,y:5},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae1owa",coordinates:{x:2540,y:285},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae1owb",coordinates:{x:2580,y:215},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae1owc",coordinates:{x:2540,y:215},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae1owd",coordinates:{x:2580,y:145},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae1owe",coordinates:{x:2540,y:145},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae1owf",coordinates:{x:2580,y:75},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae1owg",coordinates:{x:2540,y:75},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae1owh",coordinates:{x:2580,y:285},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae1owi",coordinates:{x:2580,y:355},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae1owj",coordinates:{x:2540,y:355},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae2809",coordinates:{x:2925,y:5},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae280a",coordinates:{x:2965,y:5},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae280b",coordinates:{x:2925,y:285},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae280c",coordinates:{x:2965,y:215},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae280e",coordinates:{x:2965,y:145},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae280f",coordinates:{x:2925,y:145},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae280g",coordinates:{x:2965,y:75},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae280h",coordinates:{x:2925,y:75},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae280i",coordinates:{x:2965,y:285},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae280j",coordinates:{x:2965,y:355},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae280k",coordinates:{x:2925,y:355},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae3yu0",coordinates:{x:2750,y:5},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae3yu1",coordinates:{x:2790,y:5},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae3yu2",coordinates:{x:2750,y:285},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae3yu3",coordinates:{x:2790,y:215},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae3yu4",coordinates:{x:2750,y:215},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae3yu5",coordinates:{x:2790,y:145},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae3yu6",coordinates:{x:2750,y:145},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae3yu7",coordinates:{x:2790,y:75},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae3yu8",coordinates:{x:2750,y:75},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae3yu9",coordinates:{x:2790,y:285},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae5brz",coordinates:{x:3105,y:5},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae5bs0",coordinates:{x:3145,y:5},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae5bs1",coordinates:{x:3105,y:285},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae5bs2",coordinates:{x:3105,y:215},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae5bs3",coordinates:{x:3145,y:145},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae5bs4",coordinates:{x:3105,y:145},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae5bs5",coordinates:{x:3145,y:75},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae5bs6",coordinates:{x:3105,y:75},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae5bs7",coordinates:{x:3145,y:285},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae5bs8",coordinates:{x:3145,y:355},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae5bs9",coordinates:{x:3105,y:355},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae66gg",coordinates:{x:3450,y:5},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae66gh",coordinates:{x:3450,y:215},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae66gi",coordinates:{x:3450,y:145},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae66gj",coordinates:{x:3450,y:75},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae66gk",coordinates:{x:3450,y:285},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae66gl",coordinates:{x:3450,y:355},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae7adb",coordinates:{x:3610,y:5},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae7adc",coordinates:{x:3610,y:285},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae7add",coordinates:{x:3610,y:145},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae7ade",coordinates:{x:3610,y:75},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae7adf",coordinates:{x:3610,y:355},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae7adg",coordinates:{x:3610,y:425},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae81f2",coordinates:{x:3275,y:5},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae81f3",coordinates:{x:3315,y:5},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae81f4",coordinates:{x:3275,y:285},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae81f6",coordinates:{x:3315,y:145},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae81f7",coordinates:{x:3275,y:145},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae81f8",coordinates:{x:3315,y:75},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae81f9",coordinates:{x:3275,y:75},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae81fa",coordinates:{x:3315,y:285},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae81fb",coordinates:{x:3315,y:355},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsae81fc",coordinates:{x:3275,y:355},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"cupboard",title:"Гардероб",id:"jsaegd25",coordinates:{x:540,y:1420},width:35,height:65,color:"#DED9C3",movable:!0,correctLocation:!0},{category:"cupboard",title:"Гардероб",id:"jsaehpc7",coordinates:{x:540,y:1485},width:35,height:65,color:"#DED9C3",movable:!0,correctLocation:!0},{category:"cupboard",id:"jsaei9tz",coordinates:{x:225,y:1140},width:60,height:30,color:"#DED9C3",movable:!0,correctLocation:!0},{category:"cupboard",title:"Сейф",id:"jsaeiu0n",coordinates:{x:185,y:1140},width:40,height:30,color:"#DED9C3",movable:!0,correctLocation:!0},{category:"cupboard",title:"Сейф",id:"jsaek2b9",coordinates:{x:145,y:1140},width:40,height:30,color:"#DED9C3",movable:!0,correctLocation:!0},{category:"table",id:"jsaekb6d",coordinates:{x:0,y:1130},width:70,height:40,color:"#F3F681",movable:!0,correctLocation:!0,userId:""},{category:"table",id:"jsaekb6e",coordinates:{x:70,y:1130},width:70,height:40,color:"#F3F681",movable:!0,correctLocation:!0,userId:""}]},{id:"third_floor",sortId:2,title:"Третий этаж",levelMapWidth:800,levelMapHeight:800,levelCellSize:5,boundaries:"20,20 20,320 320,320 320,220 260,220 260,180 620,180 620,20",covering:["0 0 20 800","20 0 260 20","20 320 260 800","260 0 320 20","260 180 320 220","260 320 320 800","320 0 620 20","320 180 620 800","620 0 800 800"],objects:[{category:"table",id:"11",coordinates:{x:20,y:20},width:40,height:70,color:"#F3F681",movable:!0,correctLocation:!0,userId:""}]}]}},function(t,e,n){t.exports=n(103)()},function(t){t.exports=[{id:"people",title:"Сотрудники",color:"#b7a6bd"},{id:"table",title:"Стол",color:"black"},{id:"cupboard",title:"Шкаф",color:"black"},{id:"printer",title:"Принтер",color:"black"},{id:"scaner",title:"Сканер",color:"black"},{id:"shredder",title:"Шреддер",color:"black"},{id:"meeting_room",title:"Переговорная комната",color:"black"},{id:"public_place",title:"Общественное место",color:"black"},{id:"service_room",title:"Закрытое помещение",color:"black"},{id:"construction",title:"Конструкция (колонна, стена)",color:"black"}]},function(t,e,n){(function(t,r){var o;
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */(function(){var i,a=200,l="Unsupported core-js use. Try https://npms.io/search?q=ponyfill.",s="Expected a function",c="__lodash_hash_undefined__",u=500,d="__lodash_placeholder__",f=1,h=2,p=4,v=1,y=2,g=1,m=2,b=4,_=8,x=16,w=32,S=64,C=128,T=256,F=512,O=30,P="...",E=800,j=16,I=1,k=2,L=1/0,M=9007199254740991,N=1.7976931348623157e308,D=NaN,K=4294967295,U=K-1,A=K>>>1,z=[["ary",C],["bind",g],["bindKey",m],["curry",_],["curryRight",x],["flip",F],["partial",w],["partialRight",S],["rearg",T]],R="[object Arguments]",W="[object Array]",B="[object AsyncFunction]",G="[object Boolean]",V="[object Date]",Y="[object DOMException]",$="[object Error]",Q="[object Function]",X="[object GeneratorFunction]",Z="[object Map]",J="[object Number]",H="[object Null]",q="[object Object]",tt="[object Proxy]",et="[object RegExp]",nt="[object Set]",rt="[object String]",ot="[object Symbol]",it="[object Undefined]",at="[object WeakMap]",lt="[object WeakSet]",st="[object ArrayBuffer]",ct="[object DataView]",ut="[object Float32Array]",dt="[object Float64Array]",ft="[object Int8Array]",ht="[object Int16Array]",pt="[object Int32Array]",vt="[object Uint8Array]",yt="[object Uint8ClampedArray]",gt="[object Uint16Array]",mt="[object Uint32Array]",bt=/\b__p \+= '';/g,_t=/\b(__p \+=) '' \+/g,xt=/(__e\(.*?\)|\b__t\)) \+\n'';/g,wt=/&(?:amp|lt|gt|quot|#39);/g,St=/[&<>"']/g,Ct=RegExp(wt.source),Tt=RegExp(St.source),Ft=/<%-([\s\S]+?)%>/g,Ot=/<%([\s\S]+?)%>/g,Pt=/<%=([\s\S]+?)%>/g,Et=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,jt=/^\w*$/,It=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,kt=/[\\^$.*+?()[\]{}|]/g,Lt=RegExp(kt.source),Mt=/^\s+|\s+$/g,Nt=/^\s+/,Dt=/\s+$/,Kt=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,Ut=/\{\n\/\* \[wrapped with (.+)\] \*/,At=/,? & /,zt=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,Rt=/\\(\\)?/g,Wt=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,Bt=/\w*$/,Gt=/^[-+]0x[0-9a-f]+$/i,Vt=/^0b[01]+$/i,Yt=/^\[object .+?Constructor\]$/,$t=/^0o[0-7]+$/i,Qt=/^(?:0|[1-9]\d*)$/,Xt=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,Zt=/($^)/,Jt=/['\n\r\u2028\u2029\\]/g,Ht="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",qt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",te="[\\ud800-\\udfff]",ee="["+qt+"]",ne="["+Ht+"]",re="\\d+",oe="[\\u2700-\\u27bf]",ie="[a-z\\xdf-\\xf6\\xf8-\\xff]",ae="[^\\ud800-\\udfff"+qt+re+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",le="\\ud83c[\\udffb-\\udfff]",se="[^\\ud800-\\udfff]",ce="(?:\\ud83c[\\udde6-\\uddff]){2}",ue="[\\ud800-\\udbff][\\udc00-\\udfff]",de="[A-Z\\xc0-\\xd6\\xd8-\\xde]",fe="(?:"+ie+"|"+ae+")",he="(?:"+de+"|"+ae+")",pe="(?:"+ne+"|"+le+")"+"?",ve="[\\ufe0e\\ufe0f]?"+pe+("(?:\\u200d(?:"+[se,ce,ue].join("|")+")[\\ufe0e\\ufe0f]?"+pe+")*"),ye="(?:"+[oe,ce,ue].join("|")+")"+ve,ge="(?:"+[se+ne+"?",ne,ce,ue,te].join("|")+")",me=RegExp("['’]","g"),be=RegExp(ne,"g"),_e=RegExp(le+"(?="+le+")|"+ge+ve,"g"),xe=RegExp([de+"?"+ie+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[ee,de,"$"].join("|")+")",he+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[ee,de+fe,"$"].join("|")+")",de+"?"+fe+"+(?:['’](?:d|ll|m|re|s|t|ve))?",de+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",re,ye].join("|"),"g"),we=RegExp("[\\u200d\\ud800-\\udfff"+Ht+"\\ufe0e\\ufe0f]"),Se=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Ce=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Te=-1,Fe={};Fe[ut]=Fe[dt]=Fe[ft]=Fe[ht]=Fe[pt]=Fe[vt]=Fe[yt]=Fe[gt]=Fe[mt]=!0,Fe[R]=Fe[W]=Fe[st]=Fe[G]=Fe[ct]=Fe[V]=Fe[$]=Fe[Q]=Fe[Z]=Fe[J]=Fe[q]=Fe[et]=Fe[nt]=Fe[rt]=Fe[at]=!1;var Oe={};Oe[R]=Oe[W]=Oe[st]=Oe[ct]=Oe[G]=Oe[V]=Oe[ut]=Oe[dt]=Oe[ft]=Oe[ht]=Oe[pt]=Oe[Z]=Oe[J]=Oe[q]=Oe[et]=Oe[nt]=Oe[rt]=Oe[ot]=Oe[vt]=Oe[yt]=Oe[gt]=Oe[mt]=!0,Oe[$]=Oe[Q]=Oe[at]=!1;var Pe={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Ee=parseFloat,je=parseInt,Ie="object"==typeof t&&t&&t.Object===Object&&t,ke="object"==typeof self&&self&&self.Object===Object&&self,Le=Ie||ke||Function("return this")(),Me=e&&!e.nodeType&&e,Ne=Me&&"object"==typeof r&&r&&!r.nodeType&&r,De=Ne&&Ne.exports===Me,Ke=De&&Ie.process,Ue=function(){try{var t=Ne&&Ne.require&&Ne.require("util").types;return t||Ke&&Ke.binding&&Ke.binding("util")}catch(t){}}(),Ae=Ue&&Ue.isArrayBuffer,ze=Ue&&Ue.isDate,Re=Ue&&Ue.isMap,We=Ue&&Ue.isRegExp,Be=Ue&&Ue.isSet,Ge=Ue&&Ue.isTypedArray;function Ve(t,e,n){switch(n.length){case 0:return t.call(e);case 1:return t.call(e,n[0]);case 2:return t.call(e,n[0],n[1]);case 3:return t.call(e,n[0],n[1],n[2])}return t.apply(e,n)}function Ye(t,e,n,r){for(var o=-1,i=null==t?0:t.length;++o<i;){var a=t[o];e(r,a,n(a),t)}return r}function $e(t,e){for(var n=-1,r=null==t?0:t.length;++n<r&&!1!==e(t[n],n,t););return t}function Qe(t,e){for(var n=null==t?0:t.length;n--&&!1!==e(t[n],n,t););return t}function Xe(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(!e(t[n],n,t))return!1;return!0}function Ze(t,e){for(var n=-1,r=null==t?0:t.length,o=0,i=[];++n<r;){var a=t[n];e(a,n,t)&&(i[o++]=a)}return i}function Je(t,e){return!!(null==t?0:t.length)&&sn(t,e,0)>-1}function He(t,e,n){for(var r=-1,o=null==t?0:t.length;++r<o;)if(n(e,t[r]))return!0;return!1}function qe(t,e){for(var n=-1,r=null==t?0:t.length,o=Array(r);++n<r;)o[n]=e(t[n],n,t);return o}function tn(t,e){for(var n=-1,r=e.length,o=t.length;++n<r;)t[o+n]=e[n];return t}function en(t,e,n,r){var o=-1,i=null==t?0:t.length;for(r&&i&&(n=t[++o]);++o<i;)n=e(n,t[o],o,t);return n}function nn(t,e,n,r){var o=null==t?0:t.length;for(r&&o&&(n=t[--o]);o--;)n=e(n,t[o],o,t);return n}function rn(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(e(t[n],n,t))return!0;return!1}var on=fn("length");function an(t,e,n){var r;return n(t,function(t,n,o){if(e(t,n,o))return r=n,!1}),r}function ln(t,e,n,r){for(var o=t.length,i=n+(r?1:-1);r?i--:++i<o;)if(e(t[i],i,t))return i;return-1}function sn(t,e,n){return e==e?function(t,e,n){var r=n-1,o=t.length;for(;++r<o;)if(t[r]===e)return r;return-1}(t,e,n):ln(t,un,n)}function cn(t,e,n,r){for(var o=n-1,i=t.length;++o<i;)if(r(t[o],e))return o;return-1}function un(t){return t!=t}function dn(t,e){var n=null==t?0:t.length;return n?vn(t,e)/n:D}function fn(t){return function(e){return null==e?i:e[t]}}function hn(t){return function(e){return null==t?i:t[e]}}function pn(t,e,n,r,o){return o(t,function(t,o,i){n=r?(r=!1,t):e(n,t,o,i)}),n}function vn(t,e){for(var n,r=-1,o=t.length;++r<o;){var a=e(t[r]);a!==i&&(n=n===i?a:n+a)}return n}function yn(t,e){for(var n=-1,r=Array(t);++n<t;)r[n]=e(n);return r}function gn(t){return function(e){return t(e)}}function mn(t,e){return qe(e,function(e){return t[e]})}function bn(t,e){return t.has(e)}function _n(t,e){for(var n=-1,r=t.length;++n<r&&sn(e,t[n],0)>-1;);return n}function xn(t,e){for(var n=t.length;n--&&sn(e,t[n],0)>-1;);return n}var wn=hn({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),Sn=hn({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Cn(t){return"\\"+Pe[t]}function Tn(t){return we.test(t)}function Fn(t){var e=-1,n=Array(t.size);return t.forEach(function(t,r){n[++e]=[r,t]}),n}function On(t,e){return function(n){return t(e(n))}}function Pn(t,e){for(var n=-1,r=t.length,o=0,i=[];++n<r;){var a=t[n];a!==e&&a!==d||(t[n]=d,i[o++]=n)}return i}function En(t){var e=-1,n=Array(t.size);return t.forEach(function(t){n[++e]=t}),n}function jn(t){var e=-1,n=Array(t.size);return t.forEach(function(t){n[++e]=[t,t]}),n}function In(t){return Tn(t)?function(t){var e=_e.lastIndex=0;for(;_e.test(t);)++e;return e}(t):on(t)}function kn(t){return Tn(t)?function(t){return t.match(_e)||[]}(t):function(t){return t.split("")}(t)}var Ln=hn({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var Mn=function t(e){var n,r=(e=null==e?Le:Mn.defaults(Le.Object(),e,Mn.pick(Le,Ce))).Array,o=e.Date,Ht=e.Error,qt=e.Function,te=e.Math,ee=e.Object,ne=e.RegExp,re=e.String,oe=e.TypeError,ie=r.prototype,ae=qt.prototype,le=ee.prototype,se=e["__core-js_shared__"],ce=ae.toString,ue=le.hasOwnProperty,de=0,fe=(n=/[^.]+$/.exec(se&&se.keys&&se.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"",he=le.toString,pe=ce.call(ee),ve=Le._,ye=ne("^"+ce.call(ue).replace(kt,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),ge=De?e.Buffer:i,_e=e.Symbol,we=e.Uint8Array,Pe=ge?ge.allocUnsafe:i,Ie=On(ee.getPrototypeOf,ee),ke=ee.create,Me=le.propertyIsEnumerable,Ne=ie.splice,Ke=_e?_e.isConcatSpreadable:i,Ue=_e?_e.iterator:i,on=_e?_e.toStringTag:i,hn=function(){try{var t=Ai(ee,"defineProperty");return t({},"",{}),t}catch(t){}}(),Nn=e.clearTimeout!==Le.clearTimeout&&e.clearTimeout,Dn=o&&o.now!==Le.Date.now&&o.now,Kn=e.setTimeout!==Le.setTimeout&&e.setTimeout,Un=te.ceil,An=te.floor,zn=ee.getOwnPropertySymbols,Rn=ge?ge.isBuffer:i,Wn=e.isFinite,Bn=ie.join,Gn=On(ee.keys,ee),Vn=te.max,Yn=te.min,$n=o.now,Qn=e.parseInt,Xn=te.random,Zn=ie.reverse,Jn=Ai(e,"DataView"),Hn=Ai(e,"Map"),qn=Ai(e,"Promise"),tr=Ai(e,"Set"),er=Ai(e,"WeakMap"),nr=Ai(ee,"create"),rr=er&&new er,or={},ir=da(Jn),ar=da(Hn),lr=da(qn),sr=da(tr),cr=da(er),ur=_e?_e.prototype:i,dr=ur?ur.valueOf:i,fr=ur?ur.toString:i;function hr(t){if(Pl(t)&&!gl(t)&&!(t instanceof gr)){if(t instanceof yr)return t;if(ue.call(t,"__wrapped__"))return fa(t)}return new yr(t)}var pr=function(){function t(){}return function(e){if(!Ol(e))return{};if(ke)return ke(e);t.prototype=e;var n=new t;return t.prototype=i,n}}();function vr(){}function yr(t,e){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!e,this.__index__=0,this.__values__=i}function gr(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=K,this.__views__=[]}function mr(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function br(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function _r(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function xr(t){var e=-1,n=null==t?0:t.length;for(this.__data__=new _r;++e<n;)this.add(t[e])}function wr(t){var e=this.__data__=new br(t);this.size=e.size}function Sr(t,e){var n=gl(t),r=!n&&yl(t),o=!n&&!r&&xl(t),i=!n&&!r&&!o&&Dl(t),a=n||r||o||i,l=a?yn(t.length,re):[],s=l.length;for(var c in t)!e&&!ue.call(t,c)||a&&("length"==c||o&&("offset"==c||"parent"==c)||i&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||Yi(c,s))||l.push(c);return l}function Cr(t){var e=t.length;return e?t[wo(0,e-1)]:i}function Tr(t,e){return sa(ri(t),Mr(e,0,t.length))}function Fr(t){return sa(ri(t))}function Or(t,e,n){(n===i||hl(t[e],n))&&(n!==i||e in t)||kr(t,e,n)}function Pr(t,e,n){var r=t[e];ue.call(t,e)&&hl(r,n)&&(n!==i||e in t)||kr(t,e,n)}function Er(t,e){for(var n=t.length;n--;)if(hl(t[n][0],e))return n;return-1}function jr(t,e,n,r){return Ar(t,function(t,o,i){e(r,t,n(t),i)}),r}function Ir(t,e){return t&&oi(e,os(e),t)}function kr(t,e,n){"__proto__"==e&&hn?hn(t,e,{configurable:!0,enumerable:!0,value:n,writable:!0}):t[e]=n}function Lr(t,e){for(var n=-1,o=e.length,a=r(o),l=null==t;++n<o;)a[n]=l?i:ql(t,e[n]);return a}function Mr(t,e,n){return t==t&&(n!==i&&(t=t<=n?t:n),e!==i&&(t=t>=e?t:e)),t}function Nr(t,e,n,r,o,a){var l,s=e&f,c=e&h,u=e&p;if(n&&(l=o?n(t,r,o,a):n(t)),l!==i)return l;if(!Ol(t))return t;var d=gl(t);if(d){if(l=function(t){var e=t.length,n=new t.constructor(e);return e&&"string"==typeof t[0]&&ue.call(t,"index")&&(n.index=t.index,n.input=t.input),n}(t),!s)return ri(t,l)}else{var v=Wi(t),y=v==Q||v==X;if(xl(t))return Jo(t,s);if(v==q||v==R||y&&!o){if(l=c||y?{}:Gi(t),!s)return c?function(t,e){return oi(t,Ri(t),e)}(t,function(t,e){return t&&oi(e,is(e),t)}(l,t)):function(t,e){return oi(t,zi(t),e)}(t,Ir(l,t))}else{if(!Oe[v])return o?t:{};l=function(t,e,n){var r,o,i,a=t.constructor;switch(e){case st:return Ho(t);case G:case V:return new a(+t);case ct:return function(t,e){var n=e?Ho(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.byteLength)}(t,n);case ut:case dt:case ft:case ht:case pt:case vt:case yt:case gt:case mt:return qo(t,n);case Z:return new a;case J:case rt:return new a(t);case et:return(i=new(o=t).constructor(o.source,Bt.exec(o))).lastIndex=o.lastIndex,i;case nt:return new a;case ot:return r=t,dr?ee(dr.call(r)):{}}}(t,v,s)}}a||(a=new wr);var g=a.get(t);if(g)return g;if(a.set(t,l),Ll(t))return t.forEach(function(r){l.add(Nr(r,e,n,r,t,a))}),l;if(El(t))return t.forEach(function(r,o){l.set(o,Nr(r,e,n,o,t,a))}),l;var m=d?i:(u?c?ki:Ii:c?is:os)(t);return $e(m||t,function(r,o){m&&(r=t[o=r]),Pr(l,o,Nr(r,e,n,o,t,a))}),l}function Dr(t,e,n){var r=n.length;if(null==t)return!r;for(t=ee(t);r--;){var o=n[r],a=e[o],l=t[o];if(l===i&&!(o in t)||!a(l))return!1}return!0}function Kr(t,e,n){if("function"!=typeof t)throw new oe(s);return oa(function(){t.apply(i,n)},e)}function Ur(t,e,n,r){var o=-1,i=Je,l=!0,s=t.length,c=[],u=e.length;if(!s)return c;n&&(e=qe(e,gn(n))),r?(i=He,l=!1):e.length>=a&&(i=bn,l=!1,e=new xr(e));t:for(;++o<s;){var d=t[o],f=null==n?d:n(d);if(d=r||0!==d?d:0,l&&f==f){for(var h=u;h--;)if(e[h]===f)continue t;c.push(d)}else i(e,f,r)||c.push(d)}return c}hr.templateSettings={escape:Ft,evaluate:Ot,interpolate:Pt,variable:"",imports:{_:hr}},hr.prototype=vr.prototype,hr.prototype.constructor=hr,yr.prototype=pr(vr.prototype),yr.prototype.constructor=yr,gr.prototype=pr(vr.prototype),gr.prototype.constructor=gr,mr.prototype.clear=function(){this.__data__=nr?nr(null):{},this.size=0},mr.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},mr.prototype.get=function(t){var e=this.__data__;if(nr){var n=e[t];return n===c?i:n}return ue.call(e,t)?e[t]:i},mr.prototype.has=function(t){var e=this.__data__;return nr?e[t]!==i:ue.call(e,t)},mr.prototype.set=function(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=nr&&e===i?c:e,this},br.prototype.clear=function(){this.__data__=[],this.size=0},br.prototype.delete=function(t){var e=this.__data__,n=Er(e,t);return!(n<0||(n==e.length-1?e.pop():Ne.call(e,n,1),--this.size,0))},br.prototype.get=function(t){var e=this.__data__,n=Er(e,t);return n<0?i:e[n][1]},br.prototype.has=function(t){return Er(this.__data__,t)>-1},br.prototype.set=function(t,e){var n=this.__data__,r=Er(n,t);return r<0?(++this.size,n.push([t,e])):n[r][1]=e,this},_r.prototype.clear=function(){this.size=0,this.__data__={hash:new mr,map:new(Hn||br),string:new mr}},_r.prototype.delete=function(t){var e=Ki(this,t).delete(t);return this.size-=e?1:0,e},_r.prototype.get=function(t){return Ki(this,t).get(t)},_r.prototype.has=function(t){return Ki(this,t).has(t)},_r.prototype.set=function(t,e){var n=Ki(this,t),r=n.size;return n.set(t,e),this.size+=n.size==r?0:1,this},xr.prototype.add=xr.prototype.push=function(t){return this.__data__.set(t,c),this},xr.prototype.has=function(t){return this.__data__.has(t)},wr.prototype.clear=function(){this.__data__=new br,this.size=0},wr.prototype.delete=function(t){var e=this.__data__,n=e.delete(t);return this.size=e.size,n},wr.prototype.get=function(t){return this.__data__.get(t)},wr.prototype.has=function(t){return this.__data__.has(t)},wr.prototype.set=function(t,e){var n=this.__data__;if(n instanceof br){var r=n.__data__;if(!Hn||r.length<a-1)return r.push([t,e]),this.size=++n.size,this;n=this.__data__=new _r(r)}return n.set(t,e),this.size=n.size,this};var Ar=li($r),zr=li(Qr,!0);function Rr(t,e){var n=!0;return Ar(t,function(t,r,o){return n=!!e(t,r,o)}),n}function Wr(t,e,n){for(var r=-1,o=t.length;++r<o;){var a=t[r],l=e(a);if(null!=l&&(s===i?l==l&&!Nl(l):n(l,s)))var s=l,c=a}return c}function Br(t,e){var n=[];return Ar(t,function(t,r,o){e(t,r,o)&&n.push(t)}),n}function Gr(t,e,n,r,o){var i=-1,a=t.length;for(n||(n=Vi),o||(o=[]);++i<a;){var l=t[i];e>0&&n(l)?e>1?Gr(l,e-1,n,r,o):tn(o,l):r||(o[o.length]=l)}return o}var Vr=si(),Yr=si(!0);function $r(t,e){return t&&Vr(t,e,os)}function Qr(t,e){return t&&Yr(t,e,os)}function Xr(t,e){return Ze(e,function(e){return Cl(t[e])})}function Zr(t,e){for(var n=0,r=(e=$o(e,t)).length;null!=t&&n<r;)t=t[ua(e[n++])];return n&&n==r?t:i}function Jr(t,e,n){var r=e(t);return gl(t)?r:tn(r,n(t))}function Hr(t){return null==t?t===i?it:H:on&&on in ee(t)?function(t){var e=ue.call(t,on),n=t[on];try{t[on]=i;var r=!0}catch(t){}var o=he.call(t);return r&&(e?t[on]=n:delete t[on]),o}(t):function(t){return he.call(t)}(t)}function qr(t,e){return t>e}function to(t,e){return null!=t&&ue.call(t,e)}function eo(t,e){return null!=t&&e in ee(t)}function no(t,e,n){for(var o=n?He:Je,a=t[0].length,l=t.length,s=l,c=r(l),u=1/0,d=[];s--;){var f=t[s];s&&e&&(f=qe(f,gn(e))),u=Yn(f.length,u),c[s]=!n&&(e||a>=120&&f.length>=120)?new xr(s&&f):i}f=t[0];var h=-1,p=c[0];t:for(;++h<a&&d.length<u;){var v=f[h],y=e?e(v):v;if(v=n||0!==v?v:0,!(p?bn(p,y):o(d,y,n))){for(s=l;--s;){var g=c[s];if(!(g?bn(g,y):o(t[s],y,n)))continue t}p&&p.push(y),d.push(v)}}return d}function ro(t,e,n){var r=null==(t=ea(t,e=$o(e,t)))?t:t[ua(Sa(e))];return null==r?i:Ve(r,t,n)}function oo(t){return Pl(t)&&Hr(t)==R}function io(t,e,n,r,o){return t===e||(null==t||null==e||!Pl(t)&&!Pl(e)?t!=t&&e!=e:function(t,e,n,r,o,a){var l=gl(t),s=gl(e),c=l?W:Wi(t),u=s?W:Wi(e),d=(c=c==R?q:c)==q,f=(u=u==R?q:u)==q,h=c==u;if(h&&xl(t)){if(!xl(e))return!1;l=!0,d=!1}if(h&&!d)return a||(a=new wr),l||Dl(t)?Ei(t,e,n,r,o,a):function(t,e,n,r,o,i,a){switch(n){case ct:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case st:return!(t.byteLength!=e.byteLength||!i(new we(t),new we(e)));case G:case V:case J:return hl(+t,+e);case $:return t.name==e.name&&t.message==e.message;case et:case rt:return t==e+"";case Z:var l=Fn;case nt:var s=r&v;if(l||(l=En),t.size!=e.size&&!s)return!1;var c=a.get(t);if(c)return c==e;r|=y,a.set(t,e);var u=Ei(l(t),l(e),r,o,i,a);return a.delete(t),u;case ot:if(dr)return dr.call(t)==dr.call(e)}return!1}(t,e,c,n,r,o,a);if(!(n&v)){var p=d&&ue.call(t,"__wrapped__"),g=f&&ue.call(e,"__wrapped__");if(p||g){var m=p?t.value():t,b=g?e.value():e;return a||(a=new wr),o(m,b,n,r,a)}}return!!h&&(a||(a=new wr),function(t,e,n,r,o,a){var l=n&v,s=Ii(t),c=s.length,u=Ii(e).length;if(c!=u&&!l)return!1;for(var d=c;d--;){var f=s[d];if(!(l?f in e:ue.call(e,f)))return!1}var h=a.get(t);if(h&&a.get(e))return h==e;var p=!0;a.set(t,e),a.set(e,t);for(var y=l;++d<c;){f=s[d];var g=t[f],m=e[f];if(r)var b=l?r(m,g,f,e,t,a):r(g,m,f,t,e,a);if(!(b===i?g===m||o(g,m,n,r,a):b)){p=!1;break}y||(y="constructor"==f)}if(p&&!y){var _=t.constructor,x=e.constructor;_!=x&&"constructor"in t&&"constructor"in e&&!("function"==typeof _&&_ instanceof _&&"function"==typeof x&&x instanceof x)&&(p=!1)}return a.delete(t),a.delete(e),p}(t,e,n,r,o,a))}(t,e,n,r,io,o))}function ao(t,e,n,r){var o=n.length,a=o,l=!r;if(null==t)return!a;for(t=ee(t);o--;){var s=n[o];if(l&&s[2]?s[1]!==t[s[0]]:!(s[0]in t))return!1}for(;++o<a;){var c=(s=n[o])[0],u=t[c],d=s[1];if(l&&s[2]){if(u===i&&!(c in t))return!1}else{var f=new wr;if(r)var h=r(u,d,c,t,e,f);if(!(h===i?io(d,u,v|y,r,f):h))return!1}}return!0}function lo(t){return!(!Ol(t)||(e=t,fe&&fe in e))&&(Cl(t)?ye:Yt).test(da(t));var e}function so(t){return"function"==typeof t?t:null==t?js:"object"==typeof t?gl(t)?vo(t[0],t[1]):po(t):As(t)}function co(t){if(!Ji(t))return Gn(t);var e=[];for(var n in ee(t))ue.call(t,n)&&"constructor"!=n&&e.push(n);return e}function uo(t){if(!Ol(t))return function(t){var e=[];if(null!=t)for(var n in ee(t))e.push(n);return e}(t);var e=Ji(t),n=[];for(var r in t)("constructor"!=r||!e&&ue.call(t,r))&&n.push(r);return n}function fo(t,e){return t<e}function ho(t,e){var n=-1,o=bl(t)?r(t.length):[];return Ar(t,function(t,r,i){o[++n]=e(t,r,i)}),o}function po(t){var e=Ui(t);return 1==e.length&&e[0][2]?qi(e[0][0],e[0][1]):function(n){return n===t||ao(n,t,e)}}function vo(t,e){return Qi(t)&&Hi(e)?qi(ua(t),e):function(n){var r=ql(n,t);return r===i&&r===e?ts(n,t):io(e,r,v|y)}}function yo(t,e,n,r,o){t!==e&&Vr(e,function(a,l){if(Ol(a))o||(o=new wr),function(t,e,n,r,o,a,l){var s=na(t,n),c=na(e,n),u=l.get(c);if(u)Or(t,n,u);else{var d=a?a(s,c,n+"",t,e,l):i,f=d===i;if(f){var h=gl(c),p=!h&&xl(c),v=!h&&!p&&Dl(c);d=c,h||p||v?gl(s)?d=s:_l(s)?d=ri(s):p?(f=!1,d=Jo(c,!0)):v?(f=!1,d=qo(c,!0)):d=[]:Il(c)||yl(c)?(d=s,yl(s)?d=Gl(s):Ol(s)&&!Cl(s)||(d=Gi(c))):f=!1}f&&(l.set(c,d),o(d,c,r,a,l),l.delete(c)),Or(t,n,d)}}(t,e,l,n,yo,r,o);else{var s=r?r(na(t,l),a,l+"",t,e,o):i;s===i&&(s=a),Or(t,l,s)}},is)}function go(t,e){var n=t.length;if(n)return Yi(e+=e<0?n:0,n)?t[e]:i}function mo(t,e,n){var r=-1;return e=qe(e.length?e:[js],gn(Di())),function(t,e){var n=t.length;for(t.sort(e);n--;)t[n]=t[n].value;return t}(ho(t,function(t,n,o){return{criteria:qe(e,function(e){return e(t)}),index:++r,value:t}}),function(t,e){return function(t,e,n){for(var r=-1,o=t.criteria,i=e.criteria,a=o.length,l=n.length;++r<a;){var s=ti(o[r],i[r]);if(s){if(r>=l)return s;var c=n[r];return s*("desc"==c?-1:1)}}return t.index-e.index}(t,e,n)})}function bo(t,e,n){for(var r=-1,o=e.length,i={};++r<o;){var a=e[r],l=Zr(t,a);n(l,a)&&Oo(i,$o(a,t),l)}return i}function _o(t,e,n,r){var o=r?cn:sn,i=-1,a=e.length,l=t;for(t===e&&(e=ri(e)),n&&(l=qe(t,gn(n)));++i<a;)for(var s=0,c=e[i],u=n?n(c):c;(s=o(l,u,s,r))>-1;)l!==t&&Ne.call(l,s,1),Ne.call(t,s,1);return t}function xo(t,e){for(var n=t?e.length:0,r=n-1;n--;){var o=e[n];if(n==r||o!==i){var i=o;Yi(o)?Ne.call(t,o,1):Ao(t,o)}}return t}function wo(t,e){return t+An(Xn()*(e-t+1))}function So(t,e){var n="";if(!t||e<1||e>M)return n;do{e%2&&(n+=t),(e=An(e/2))&&(t+=t)}while(e);return n}function Co(t,e){return ia(ta(t,e,js),t+"")}function To(t){return Cr(hs(t))}function Fo(t,e){var n=hs(t);return sa(n,Mr(e,0,n.length))}function Oo(t,e,n,r){if(!Ol(t))return t;for(var o=-1,a=(e=$o(e,t)).length,l=a-1,s=t;null!=s&&++o<a;){var c=ua(e[o]),u=n;if(o!=l){var d=s[c];(u=r?r(d,c,s):i)===i&&(u=Ol(d)?d:Yi(e[o+1])?[]:{})}Pr(s,c,u),s=s[c]}return t}var Po=rr?function(t,e){return rr.set(t,e),t}:js,Eo=hn?function(t,e){return hn(t,"toString",{configurable:!0,enumerable:!1,value:Os(e),writable:!0})}:js;function jo(t){return sa(hs(t))}function Io(t,e,n){var o=-1,i=t.length;e<0&&(e=-e>i?0:i+e),(n=n>i?i:n)<0&&(n+=i),i=e>n?0:n-e>>>0,e>>>=0;for(var a=r(i);++o<i;)a[o]=t[o+e];return a}function ko(t,e){var n;return Ar(t,function(t,r,o){return!(n=e(t,r,o))}),!!n}function Lo(t,e,n){var r=0,o=null==t?r:t.length;if("number"==typeof e&&e==e&&o<=A){for(;r<o;){var i=r+o>>>1,a=t[i];null!==a&&!Nl(a)&&(n?a<=e:a<e)?r=i+1:o=i}return o}return Mo(t,e,js,n)}function Mo(t,e,n,r){e=n(e);for(var o=0,a=null==t?0:t.length,l=e!=e,s=null===e,c=Nl(e),u=e===i;o<a;){var d=An((o+a)/2),f=n(t[d]),h=f!==i,p=null===f,v=f==f,y=Nl(f);if(l)var g=r||v;else g=u?v&&(r||h):s?v&&h&&(r||!p):c?v&&h&&!p&&(r||!y):!p&&!y&&(r?f<=e:f<e);g?o=d+1:a=d}return Yn(a,U)}function No(t,e){for(var n=-1,r=t.length,o=0,i=[];++n<r;){var a=t[n],l=e?e(a):a;if(!n||!hl(l,s)){var s=l;i[o++]=0===a?0:a}}return i}function Do(t){return"number"==typeof t?t:Nl(t)?D:+t}function Ko(t){if("string"==typeof t)return t;if(gl(t))return qe(t,Ko)+"";if(Nl(t))return fr?fr.call(t):"";var e=t+"";return"0"==e&&1/t==-L?"-0":e}function Uo(t,e,n){var r=-1,o=Je,i=t.length,l=!0,s=[],c=s;if(n)l=!1,o=He;else if(i>=a){var u=e?null:Si(t);if(u)return En(u);l=!1,o=bn,c=new xr}else c=e?[]:s;t:for(;++r<i;){var d=t[r],f=e?e(d):d;if(d=n||0!==d?d:0,l&&f==f){for(var h=c.length;h--;)if(c[h]===f)continue t;e&&c.push(f),s.push(d)}else o(c,f,n)||(c!==s&&c.push(f),s.push(d))}return s}function Ao(t,e){return null==(t=ea(t,e=$o(e,t)))||delete t[ua(Sa(e))]}function zo(t,e,n,r){return Oo(t,e,n(Zr(t,e)),r)}function Ro(t,e,n,r){for(var o=t.length,i=r?o:-1;(r?i--:++i<o)&&e(t[i],i,t););return n?Io(t,r?0:i,r?i+1:o):Io(t,r?i+1:0,r?o:i)}function Wo(t,e){var n=t;return n instanceof gr&&(n=n.value()),en(e,function(t,e){return e.func.apply(e.thisArg,tn([t],e.args))},n)}function Bo(t,e,n){var o=t.length;if(o<2)return o?Uo(t[0]):[];for(var i=-1,a=r(o);++i<o;)for(var l=t[i],s=-1;++s<o;)s!=i&&(a[i]=Ur(a[i]||l,t[s],e,n));return Uo(Gr(a,1),e,n)}function Go(t,e,n){for(var r=-1,o=t.length,a=e.length,l={};++r<o;){var s=r<a?e[r]:i;n(l,t[r],s)}return l}function Vo(t){return _l(t)?t:[]}function Yo(t){return"function"==typeof t?t:js}function $o(t,e){return gl(t)?t:Qi(t,e)?[t]:ca(Vl(t))}var Qo=Co;function Xo(t,e,n){var r=t.length;return n=n===i?r:n,!e&&n>=r?t:Io(t,e,n)}var Zo=Nn||function(t){return Le.clearTimeout(t)};function Jo(t,e){if(e)return t.slice();var n=t.length,r=Pe?Pe(n):new t.constructor(n);return t.copy(r),r}function Ho(t){var e=new t.constructor(t.byteLength);return new we(e).set(new we(t)),e}function qo(t,e){var n=e?Ho(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.length)}function ti(t,e){if(t!==e){var n=t!==i,r=null===t,o=t==t,a=Nl(t),l=e!==i,s=null===e,c=e==e,u=Nl(e);if(!s&&!u&&!a&&t>e||a&&l&&c&&!s&&!u||r&&l&&c||!n&&c||!o)return 1;if(!r&&!a&&!u&&t<e||u&&n&&o&&!r&&!a||s&&n&&o||!l&&o||!c)return-1}return 0}function ei(t,e,n,o){for(var i=-1,a=t.length,l=n.length,s=-1,c=e.length,u=Vn(a-l,0),d=r(c+u),f=!o;++s<c;)d[s]=e[s];for(;++i<l;)(f||i<a)&&(d[n[i]]=t[i]);for(;u--;)d[s++]=t[i++];return d}function ni(t,e,n,o){for(var i=-1,a=t.length,l=-1,s=n.length,c=-1,u=e.length,d=Vn(a-s,0),f=r(d+u),h=!o;++i<d;)f[i]=t[i];for(var p=i;++c<u;)f[p+c]=e[c];for(;++l<s;)(h||i<a)&&(f[p+n[l]]=t[i++]);return f}function ri(t,e){var n=-1,o=t.length;for(e||(e=r(o));++n<o;)e[n]=t[n];return e}function oi(t,e,n,r){var o=!n;n||(n={});for(var a=-1,l=e.length;++a<l;){var s=e[a],c=r?r(n[s],t[s],s,n,t):i;c===i&&(c=t[s]),o?kr(n,s,c):Pr(n,s,c)}return n}function ii(t,e){return function(n,r){var o=gl(n)?Ye:jr,i=e?e():{};return o(n,t,Di(r,2),i)}}function ai(t){return Co(function(e,n){var r=-1,o=n.length,a=o>1?n[o-1]:i,l=o>2?n[2]:i;for(a=t.length>3&&"function"==typeof a?(o--,a):i,l&&$i(n[0],n[1],l)&&(a=o<3?i:a,o=1),e=ee(e);++r<o;){var s=n[r];s&&t(e,s,r,a)}return e})}function li(t,e){return function(n,r){if(null==n)return n;if(!bl(n))return t(n,r);for(var o=n.length,i=e?o:-1,a=ee(n);(e?i--:++i<o)&&!1!==r(a[i],i,a););return n}}function si(t){return function(e,n,r){for(var o=-1,i=ee(e),a=r(e),l=a.length;l--;){var s=a[t?l:++o];if(!1===n(i[s],s,i))break}return e}}function ci(t){return function(e){var n=Tn(e=Vl(e))?kn(e):i,r=n?n[0]:e.charAt(0),o=n?Xo(n,1).join(""):e.slice(1);return r[t]()+o}}function ui(t){return function(e){return en(Cs(ys(e).replace(me,"")),t,"")}}function di(t){return function(){var e=arguments;switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3]);case 5:return new t(e[0],e[1],e[2],e[3],e[4]);case 6:return new t(e[0],e[1],e[2],e[3],e[4],e[5]);case 7:return new t(e[0],e[1],e[2],e[3],e[4],e[5],e[6])}var n=pr(t.prototype),r=t.apply(n,e);return Ol(r)?r:n}}function fi(t){return function(e,n,r){var o=ee(e);if(!bl(e)){var a=Di(n,3);e=os(e),n=function(t){return a(o[t],t,o)}}var l=t(e,n,r);return l>-1?o[a?e[l]:l]:i}}function hi(t){return ji(function(e){var n=e.length,r=n,o=yr.prototype.thru;for(t&&e.reverse();r--;){var a=e[r];if("function"!=typeof a)throw new oe(s);if(o&&!l&&"wrapper"==Mi(a))var l=new yr([],!0)}for(r=l?r:n;++r<n;){var c=Mi(a=e[r]),u="wrapper"==c?Li(a):i;l=u&&Xi(u[0])&&u[1]==(C|_|w|T)&&!u[4].length&&1==u[9]?l[Mi(u[0])].apply(l,u[3]):1==a.length&&Xi(a)?l[c]():l.thru(a)}return function(){var t=arguments,r=t[0];if(l&&1==t.length&&gl(r))return l.plant(r).value();for(var o=0,i=n?e[o].apply(this,t):r;++o<n;)i=e[o].call(this,i);return i}})}function pi(t,e,n,o,a,l,s,c,u,d){var f=e&C,h=e&g,p=e&m,v=e&(_|x),y=e&F,b=p?i:di(t);return function g(){for(var m=arguments.length,_=r(m),x=m;x--;)_[x]=arguments[x];if(v)var w=Ni(g),S=function(t,e){for(var n=t.length,r=0;n--;)t[n]===e&&++r;return r}(_,w);if(o&&(_=ei(_,o,a,v)),l&&(_=ni(_,l,s,v)),m-=S,v&&m<d){var C=Pn(_,w);return xi(t,e,pi,g.placeholder,n,_,C,c,u,d-m)}var T=h?n:this,F=p?T[t]:t;return m=_.length,c?_=function(t,e){for(var n=t.length,r=Yn(e.length,n),o=ri(t);r--;){var a=e[r];t[r]=Yi(a,n)?o[a]:i}return t}(_,c):y&&m>1&&_.reverse(),f&&u<m&&(_.length=u),this&&this!==Le&&this instanceof g&&(F=b||di(F)),F.apply(T,_)}}function vi(t,e){return function(n,r){return function(t,e,n,r){return $r(t,function(t,o,i){e(r,n(t),o,i)}),r}(n,t,e(r),{})}}function yi(t,e){return function(n,r){var o;if(n===i&&r===i)return e;if(n!==i&&(o=n),r!==i){if(o===i)return r;"string"==typeof n||"string"==typeof r?(n=Ko(n),r=Ko(r)):(n=Do(n),r=Do(r)),o=t(n,r)}return o}}function gi(t){return ji(function(e){return e=qe(e,gn(Di())),Co(function(n){var r=this;return t(e,function(t){return Ve(t,r,n)})})})}function mi(t,e){var n=(e=e===i?" ":Ko(e)).length;if(n<2)return n?So(e,t):e;var r=So(e,Un(t/In(e)));return Tn(e)?Xo(kn(r),0,t).join(""):r.slice(0,t)}function bi(t){return function(e,n,o){return o&&"number"!=typeof o&&$i(e,n,o)&&(n=o=i),e=zl(e),n===i?(n=e,e=0):n=zl(n),function(t,e,n,o){for(var i=-1,a=Vn(Un((e-t)/(n||1)),0),l=r(a);a--;)l[o?a:++i]=t,t+=n;return l}(e,n,o=o===i?e<n?1:-1:zl(o),t)}}function _i(t){return function(e,n){return"string"==typeof e&&"string"==typeof n||(e=Bl(e),n=Bl(n)),t(e,n)}}function xi(t,e,n,r,o,a,l,s,c,u){var d=e&_;e|=d?w:S,(e&=~(d?S:w))&b||(e&=~(g|m));var f=[t,e,o,d?a:i,d?l:i,d?i:a,d?i:l,s,c,u],h=n.apply(i,f);return Xi(t)&&ra(h,f),h.placeholder=r,aa(h,t,e)}function wi(t){var e=te[t];return function(t,n){if(t=Bl(t),n=null==n?0:Yn(Rl(n),292)){var r=(Vl(t)+"e").split("e");return+((r=(Vl(e(r[0]+"e"+(+r[1]+n)))+"e").split("e"))[0]+"e"+(+r[1]-n))}return e(t)}}var Si=tr&&1/En(new tr([,-0]))[1]==L?function(t){return new tr(t)}:Ns;function Ci(t){return function(e){var n=Wi(e);return n==Z?Fn(e):n==nt?jn(e):function(t,e){return qe(e,function(e){return[e,t[e]]})}(e,t(e))}}function Ti(t,e,n,o,a,l,c,u){var f=e&m;if(!f&&"function"!=typeof t)throw new oe(s);var h=o?o.length:0;if(h||(e&=~(w|S),o=a=i),c=c===i?c:Vn(Rl(c),0),u=u===i?u:Rl(u),h-=a?a.length:0,e&S){var p=o,v=a;o=a=i}var y=f?i:Li(t),F=[t,e,n,o,a,p,v,l,c,u];if(y&&function(t,e){var n=t[1],r=e[1],o=n|r,i=o<(g|m|C),a=r==C&&n==_||r==C&&n==T&&t[7].length<=e[8]||r==(C|T)&&e[7].length<=e[8]&&n==_;if(!i&&!a)return t;r&g&&(t[2]=e[2],o|=n&g?0:b);var l=e[3];if(l){var s=t[3];t[3]=s?ei(s,l,e[4]):l,t[4]=s?Pn(t[3],d):e[4]}(l=e[5])&&(s=t[5],t[5]=s?ni(s,l,e[6]):l,t[6]=s?Pn(t[5],d):e[6]),(l=e[7])&&(t[7]=l),r&C&&(t[8]=null==t[8]?e[8]:Yn(t[8],e[8])),null==t[9]&&(t[9]=e[9]),t[0]=e[0],t[1]=o}(F,y),t=F[0],e=F[1],n=F[2],o=F[3],a=F[4],!(u=F[9]=F[9]===i?f?0:t.length:Vn(F[9]-h,0))&&e&(_|x)&&(e&=~(_|x)),e&&e!=g)O=e==_||e==x?function(t,e,n){var o=di(t);return function a(){for(var l=arguments.length,s=r(l),c=l,u=Ni(a);c--;)s[c]=arguments[c];var d=l<3&&s[0]!==u&&s[l-1]!==u?[]:Pn(s,u);return(l-=d.length)<n?xi(t,e,pi,a.placeholder,i,s,d,i,i,n-l):Ve(this&&this!==Le&&this instanceof a?o:t,this,s)}}(t,e,u):e!=w&&e!=(g|w)||a.length?pi.apply(i,F):function(t,e,n,o){var i=e&g,a=di(t);return function e(){for(var l=-1,s=arguments.length,c=-1,u=o.length,d=r(u+s),f=this&&this!==Le&&this instanceof e?a:t;++c<u;)d[c]=o[c];for(;s--;)d[c++]=arguments[++l];return Ve(f,i?n:this,d)}}(t,e,n,o);else var O=function(t,e,n){var r=e&g,o=di(t);return function e(){return(this&&this!==Le&&this instanceof e?o:t).apply(r?n:this,arguments)}}(t,e,n);return aa((y?Po:ra)(O,F),t,e)}function Fi(t,e,n,r){return t===i||hl(t,le[n])&&!ue.call(r,n)?e:t}function Oi(t,e,n,r,o,a){return Ol(t)&&Ol(e)&&(a.set(e,t),yo(t,e,i,Oi,a),a.delete(e)),t}function Pi(t){return Il(t)?i:t}function Ei(t,e,n,r,o,a){var l=n&v,s=t.length,c=e.length;if(s!=c&&!(l&&c>s))return!1;var u=a.get(t);if(u&&a.get(e))return u==e;var d=-1,f=!0,h=n&y?new xr:i;for(a.set(t,e),a.set(e,t);++d<s;){var p=t[d],g=e[d];if(r)var m=l?r(g,p,d,e,t,a):r(p,g,d,t,e,a);if(m!==i){if(m)continue;f=!1;break}if(h){if(!rn(e,function(t,e){if(!bn(h,e)&&(p===t||o(p,t,n,r,a)))return h.push(e)})){f=!1;break}}else if(p!==g&&!o(p,g,n,r,a)){f=!1;break}}return a.delete(t),a.delete(e),f}function ji(t){return ia(ta(t,i,ma),t+"")}function Ii(t){return Jr(t,os,zi)}function ki(t){return Jr(t,is,Ri)}var Li=rr?function(t){return rr.get(t)}:Ns;function Mi(t){for(var e=t.name+"",n=or[e],r=ue.call(or,e)?n.length:0;r--;){var o=n[r],i=o.func;if(null==i||i==t)return o.name}return e}function Ni(t){return(ue.call(hr,"placeholder")?hr:t).placeholder}function Di(){var t=hr.iteratee||Is;return t=t===Is?so:t,arguments.length?t(arguments[0],arguments[1]):t}function Ki(t,e){var n,r,o=t.__data__;return("string"==(r=typeof(n=e))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?o["string"==typeof e?"string":"hash"]:o.map}function Ui(t){for(var e=os(t),n=e.length;n--;){var r=e[n],o=t[r];e[n]=[r,o,Hi(o)]}return e}function Ai(t,e){var n=function(t,e){return null==t?i:t[e]}(t,e);return lo(n)?n:i}var zi=zn?function(t){return null==t?[]:(t=ee(t),Ze(zn(t),function(e){return Me.call(t,e)}))}:Ws,Ri=zn?function(t){for(var e=[];t;)tn(e,zi(t)),t=Ie(t);return e}:Ws,Wi=Hr;function Bi(t,e,n){for(var r=-1,o=(e=$o(e,t)).length,i=!1;++r<o;){var a=ua(e[r]);if(!(i=null!=t&&n(t,a)))break;t=t[a]}return i||++r!=o?i:!!(o=null==t?0:t.length)&&Fl(o)&&Yi(a,o)&&(gl(t)||yl(t))}function Gi(t){return"function"!=typeof t.constructor||Ji(t)?{}:pr(Ie(t))}function Vi(t){return gl(t)||yl(t)||!!(Ke&&t&&t[Ke])}function Yi(t,e){var n=typeof t;return!!(e=null==e?M:e)&&("number"==n||"symbol"!=n&&Qt.test(t))&&t>-1&&t%1==0&&t<e}function $i(t,e,n){if(!Ol(n))return!1;var r=typeof e;return!!("number"==r?bl(n)&&Yi(e,n.length):"string"==r&&e in n)&&hl(n[e],t)}function Qi(t,e){if(gl(t))return!1;var n=typeof t;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=t&&!Nl(t))||jt.test(t)||!Et.test(t)||null!=e&&t in ee(e)}function Xi(t){var e=Mi(t),n=hr[e];if("function"!=typeof n||!(e in gr.prototype))return!1;if(t===n)return!0;var r=Li(n);return!!r&&t===r[0]}(Jn&&Wi(new Jn(new ArrayBuffer(1)))!=ct||Hn&&Wi(new Hn)!=Z||qn&&"[object Promise]"!=Wi(qn.resolve())||tr&&Wi(new tr)!=nt||er&&Wi(new er)!=at)&&(Wi=function(t){var e=Hr(t),n=e==q?t.constructor:i,r=n?da(n):"";if(r)switch(r){case ir:return ct;case ar:return Z;case lr:return"[object Promise]";case sr:return nt;case cr:return at}return e});var Zi=se?Cl:Bs;function Ji(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||le)}function Hi(t){return t==t&&!Ol(t)}function qi(t,e){return function(n){return null!=n&&n[t]===e&&(e!==i||t in ee(n))}}function ta(t,e,n){return e=Vn(e===i?t.length-1:e,0),function(){for(var o=arguments,i=-1,a=Vn(o.length-e,0),l=r(a);++i<a;)l[i]=o[e+i];i=-1;for(var s=r(e+1);++i<e;)s[i]=o[i];return s[e]=n(l),Ve(t,this,s)}}function ea(t,e){return e.length<2?t:Zr(t,Io(e,0,-1))}function na(t,e){if("__proto__"!=e)return t[e]}var ra=la(Po),oa=Kn||function(t,e){return Le.setTimeout(t,e)},ia=la(Eo);function aa(t,e,n){var r=e+"";return ia(t,function(t,e){var n=e.length;if(!n)return t;var r=n-1;return e[r]=(n>1?"& ":"")+e[r],e=e.join(n>2?", ":" "),t.replace(Kt,"{\n/* [wrapped with "+e+"] */\n")}(r,function(t,e){return $e(z,function(n){var r="_."+n[0];e&n[1]&&!Je(t,r)&&t.push(r)}),t.sort()}(function(t){var e=t.match(Ut);return e?e[1].split(At):[]}(r),n)))}function la(t){var e=0,n=0;return function(){var r=$n(),o=j-(r-n);if(n=r,o>0){if(++e>=E)return arguments[0]}else e=0;return t.apply(i,arguments)}}function sa(t,e){var n=-1,r=t.length,o=r-1;for(e=e===i?r:e;++n<e;){var a=wo(n,o),l=t[a];t[a]=t[n],t[n]=l}return t.length=e,t}var ca=function(t){var e=ll(t,function(t){return n.size===u&&n.clear(),t}),n=e.cache;return e}(function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(It,function(t,n,r,o){e.push(r?o.replace(Rt,"$1"):n||t)}),e});function ua(t){if("string"==typeof t||Nl(t))return t;var e=t+"";return"0"==e&&1/t==-L?"-0":e}function da(t){if(null!=t){try{return ce.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function fa(t){if(t instanceof gr)return t.clone();var e=new yr(t.__wrapped__,t.__chain__);return e.__actions__=ri(t.__actions__),e.__index__=t.__index__,e.__values__=t.__values__,e}var ha=Co(function(t,e){return _l(t)?Ur(t,Gr(e,1,_l,!0)):[]}),pa=Co(function(t,e){var n=Sa(e);return _l(n)&&(n=i),_l(t)?Ur(t,Gr(e,1,_l,!0),Di(n,2)):[]}),va=Co(function(t,e){var n=Sa(e);return _l(n)&&(n=i),_l(t)?Ur(t,Gr(e,1,_l,!0),i,n):[]});function ya(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var o=null==n?0:Rl(n);return o<0&&(o=Vn(r+o,0)),ln(t,Di(e,3),o)}function ga(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var o=r-1;return n!==i&&(o=Rl(n),o=n<0?Vn(r+o,0):Yn(o,r-1)),ln(t,Di(e,3),o,!0)}function ma(t){return null!=t&&t.length?Gr(t,1):[]}function ba(t){return t&&t.length?t[0]:i}var _a=Co(function(t){var e=qe(t,Vo);return e.length&&e[0]===t[0]?no(e):[]}),xa=Co(function(t){var e=Sa(t),n=qe(t,Vo);return e===Sa(n)?e=i:n.pop(),n.length&&n[0]===t[0]?no(n,Di(e,2)):[]}),wa=Co(function(t){var e=Sa(t),n=qe(t,Vo);return(e="function"==typeof e?e:i)&&n.pop(),n.length&&n[0]===t[0]?no(n,i,e):[]});function Sa(t){var e=null==t?0:t.length;return e?t[e-1]:i}var Ca=Co(Ta);function Ta(t,e){return t&&t.length&&e&&e.length?_o(t,e):t}var Fa=ji(function(t,e){var n=null==t?0:t.length,r=Lr(t,e);return xo(t,qe(e,function(t){return Yi(t,n)?+t:t}).sort(ti)),r});function Oa(t){return null==t?t:Zn.call(t)}var Pa=Co(function(t){return Uo(Gr(t,1,_l,!0))}),Ea=Co(function(t){var e=Sa(t);return _l(e)&&(e=i),Uo(Gr(t,1,_l,!0),Di(e,2))}),ja=Co(function(t){var e=Sa(t);return e="function"==typeof e?e:i,Uo(Gr(t,1,_l,!0),i,e)});function Ia(t){if(!t||!t.length)return[];var e=0;return t=Ze(t,function(t){if(_l(t))return e=Vn(t.length,e),!0}),yn(e,function(e){return qe(t,fn(e))})}function ka(t,e){if(!t||!t.length)return[];var n=Ia(t);return null==e?n:qe(n,function(t){return Ve(e,i,t)})}var La=Co(function(t,e){return _l(t)?Ur(t,e):[]}),Ma=Co(function(t){return Bo(Ze(t,_l))}),Na=Co(function(t){var e=Sa(t);return _l(e)&&(e=i),Bo(Ze(t,_l),Di(e,2))}),Da=Co(function(t){var e=Sa(t);return e="function"==typeof e?e:i,Bo(Ze(t,_l),i,e)}),Ka=Co(Ia);var Ua=Co(function(t){var e=t.length,n=e>1?t[e-1]:i;return n="function"==typeof n?(t.pop(),n):i,ka(t,n)});function Aa(t){var e=hr(t);return e.__chain__=!0,e}function za(t,e){return e(t)}var Ra=ji(function(t){var e=t.length,n=e?t[0]:0,r=this.__wrapped__,o=function(e){return Lr(e,t)};return!(e>1||this.__actions__.length)&&r instanceof gr&&Yi(n)?((r=r.slice(n,+n+(e?1:0))).__actions__.push({func:za,args:[o],thisArg:i}),new yr(r,this.__chain__).thru(function(t){return e&&!t.length&&t.push(i),t})):this.thru(o)});var Wa=ii(function(t,e,n){ue.call(t,n)?++t[n]:kr(t,n,1)});var Ba=fi(ya),Ga=fi(ga);function Va(t,e){return(gl(t)?$e:Ar)(t,Di(e,3))}function Ya(t,e){return(gl(t)?Qe:zr)(t,Di(e,3))}var $a=ii(function(t,e,n){ue.call(t,n)?t[n].push(e):kr(t,n,[e])});var Qa=Co(function(t,e,n){var o=-1,i="function"==typeof e,a=bl(t)?r(t.length):[];return Ar(t,function(t){a[++o]=i?Ve(e,t,n):ro(t,e,n)}),a}),Xa=ii(function(t,e,n){kr(t,n,e)});function Za(t,e){return(gl(t)?qe:ho)(t,Di(e,3))}var Ja=ii(function(t,e,n){t[n?0:1].push(e)},function(){return[[],[]]});var Ha=Co(function(t,e){if(null==t)return[];var n=e.length;return n>1&&$i(t,e[0],e[1])?e=[]:n>2&&$i(e[0],e[1],e[2])&&(e=[e[0]]),mo(t,Gr(e,1),[])}),qa=Dn||function(){return Le.Date.now()};function tl(t,e,n){return e=n?i:e,e=t&&null==e?t.length:e,Ti(t,C,i,i,i,i,e)}function el(t,e){var n;if("function"!=typeof e)throw new oe(s);return t=Rl(t),function(){return--t>0&&(n=e.apply(this,arguments)),t<=1&&(e=i),n}}var nl=Co(function(t,e,n){var r=g;if(n.length){var o=Pn(n,Ni(nl));r|=w}return Ti(t,r,e,n,o)}),rl=Co(function(t,e,n){var r=g|m;if(n.length){var o=Pn(n,Ni(rl));r|=w}return Ti(e,r,t,n,o)});function ol(t,e,n){var r,o,a,l,c,u,d=0,f=!1,h=!1,p=!0;if("function"!=typeof t)throw new oe(s);function v(e){var n=r,a=o;return r=o=i,d=e,l=t.apply(a,n)}function y(t){var n=t-u;return u===i||n>=e||n<0||h&&t-d>=a}function g(){var t=qa();if(y(t))return m(t);c=oa(g,function(t){var n=e-(t-u);return h?Yn(n,a-(t-d)):n}(t))}function m(t){return c=i,p&&r?v(t):(r=o=i,l)}function b(){var t=qa(),n=y(t);if(r=arguments,o=this,u=t,n){if(c===i)return function(t){return d=t,c=oa(g,e),f?v(t):l}(u);if(h)return c=oa(g,e),v(u)}return c===i&&(c=oa(g,e)),l}return e=Bl(e)||0,Ol(n)&&(f=!!n.leading,a=(h="maxWait"in n)?Vn(Bl(n.maxWait)||0,e):a,p="trailing"in n?!!n.trailing:p),b.cancel=function(){c!==i&&Zo(c),d=0,r=u=o=c=i},b.flush=function(){return c===i?l:m(qa())},b}var il=Co(function(t,e){return Kr(t,1,e)}),al=Co(function(t,e,n){return Kr(t,Bl(e)||0,n)});function ll(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new oe(s);var n=function(){var r=arguments,o=e?e.apply(this,r):r[0],i=n.cache;if(i.has(o))return i.get(o);var a=t.apply(this,r);return n.cache=i.set(o,a)||i,a};return n.cache=new(ll.Cache||_r),n}function sl(t){if("function"!=typeof t)throw new oe(s);return function(){var e=arguments;switch(e.length){case 0:return!t.call(this);case 1:return!t.call(this,e[0]);case 2:return!t.call(this,e[0],e[1]);case 3:return!t.call(this,e[0],e[1],e[2])}return!t.apply(this,e)}}ll.Cache=_r;var cl=Qo(function(t,e){var n=(e=1==e.length&&gl(e[0])?qe(e[0],gn(Di())):qe(Gr(e,1),gn(Di()))).length;return Co(function(r){for(var o=-1,i=Yn(r.length,n);++o<i;)r[o]=e[o].call(this,r[o]);return Ve(t,this,r)})}),ul=Co(function(t,e){var n=Pn(e,Ni(ul));return Ti(t,w,i,e,n)}),dl=Co(function(t,e){var n=Pn(e,Ni(dl));return Ti(t,S,i,e,n)}),fl=ji(function(t,e){return Ti(t,T,i,i,i,e)});function hl(t,e){return t===e||t!=t&&e!=e}var pl=_i(qr),vl=_i(function(t,e){return t>=e}),yl=oo(function(){return arguments}())?oo:function(t){return Pl(t)&&ue.call(t,"callee")&&!Me.call(t,"callee")},gl=r.isArray,ml=Ae?gn(Ae):function(t){return Pl(t)&&Hr(t)==st};function bl(t){return null!=t&&Fl(t.length)&&!Cl(t)}function _l(t){return Pl(t)&&bl(t)}var xl=Rn||Bs,wl=ze?gn(ze):function(t){return Pl(t)&&Hr(t)==V};function Sl(t){if(!Pl(t))return!1;var e=Hr(t);return e==$||e==Y||"string"==typeof t.message&&"string"==typeof t.name&&!Il(t)}function Cl(t){if(!Ol(t))return!1;var e=Hr(t);return e==Q||e==X||e==B||e==tt}function Tl(t){return"number"==typeof t&&t==Rl(t)}function Fl(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=M}function Ol(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function Pl(t){return null!=t&&"object"==typeof t}var El=Re?gn(Re):function(t){return Pl(t)&&Wi(t)==Z};function jl(t){return"number"==typeof t||Pl(t)&&Hr(t)==J}function Il(t){if(!Pl(t)||Hr(t)!=q)return!1;var e=Ie(t);if(null===e)return!0;var n=ue.call(e,"constructor")&&e.constructor;return"function"==typeof n&&n instanceof n&&ce.call(n)==pe}var kl=We?gn(We):function(t){return Pl(t)&&Hr(t)==et};var Ll=Be?gn(Be):function(t){return Pl(t)&&Wi(t)==nt};function Ml(t){return"string"==typeof t||!gl(t)&&Pl(t)&&Hr(t)==rt}function Nl(t){return"symbol"==typeof t||Pl(t)&&Hr(t)==ot}var Dl=Ge?gn(Ge):function(t){return Pl(t)&&Fl(t.length)&&!!Fe[Hr(t)]};var Kl=_i(fo),Ul=_i(function(t,e){return t<=e});function Al(t){if(!t)return[];if(bl(t))return Ml(t)?kn(t):ri(t);if(Ue&&t[Ue])return function(t){for(var e,n=[];!(e=t.next()).done;)n.push(e.value);return n}(t[Ue]());var e=Wi(t);return(e==Z?Fn:e==nt?En:hs)(t)}function zl(t){return t?(t=Bl(t))===L||t===-L?(t<0?-1:1)*N:t==t?t:0:0===t?t:0}function Rl(t){var e=zl(t),n=e%1;return e==e?n?e-n:e:0}function Wl(t){return t?Mr(Rl(t),0,K):0}function Bl(t){if("number"==typeof t)return t;if(Nl(t))return D;if(Ol(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=Ol(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(Mt,"");var n=Vt.test(t);return n||$t.test(t)?je(t.slice(2),n?2:8):Gt.test(t)?D:+t}function Gl(t){return oi(t,is(t))}function Vl(t){return null==t?"":Ko(t)}var Yl=ai(function(t,e){if(Ji(e)||bl(e))oi(e,os(e),t);else for(var n in e)ue.call(e,n)&&Pr(t,n,e[n])}),$l=ai(function(t,e){oi(e,is(e),t)}),Ql=ai(function(t,e,n,r){oi(e,is(e),t,r)}),Xl=ai(function(t,e,n,r){oi(e,os(e),t,r)}),Zl=ji(Lr);var Jl=Co(function(t,e){t=ee(t);var n=-1,r=e.length,o=r>2?e[2]:i;for(o&&$i(e[0],e[1],o)&&(r=1);++n<r;)for(var a=e[n],l=is(a),s=-1,c=l.length;++s<c;){var u=l[s],d=t[u];(d===i||hl(d,le[u])&&!ue.call(t,u))&&(t[u]=a[u])}return t}),Hl=Co(function(t){return t.push(i,Oi),Ve(ls,i,t)});function ql(t,e,n){var r=null==t?i:Zr(t,e);return r===i?n:r}function ts(t,e){return null!=t&&Bi(t,e,eo)}var es=vi(function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=he.call(e)),t[e]=n},Os(js)),ns=vi(function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=he.call(e)),ue.call(t,e)?t[e].push(n):t[e]=[n]},Di),rs=Co(ro);function os(t){return bl(t)?Sr(t):co(t)}function is(t){return bl(t)?Sr(t,!0):uo(t)}var as=ai(function(t,e,n){yo(t,e,n)}),ls=ai(function(t,e,n,r){yo(t,e,n,r)}),ss=ji(function(t,e){var n={};if(null==t)return n;var r=!1;e=qe(e,function(e){return e=$o(e,t),r||(r=e.length>1),e}),oi(t,ki(t),n),r&&(n=Nr(n,f|h|p,Pi));for(var o=e.length;o--;)Ao(n,e[o]);return n});var cs=ji(function(t,e){return null==t?{}:function(t,e){return bo(t,e,function(e,n){return ts(t,n)})}(t,e)});function us(t,e){if(null==t)return{};var n=qe(ki(t),function(t){return[t]});return e=Di(e),bo(t,n,function(t,n){return e(t,n[0])})}var ds=Ci(os),fs=Ci(is);function hs(t){return null==t?[]:mn(t,os(t))}var ps=ui(function(t,e,n){return e=e.toLowerCase(),t+(n?vs(e):e)});function vs(t){return Ss(Vl(t).toLowerCase())}function ys(t){return(t=Vl(t))&&t.replace(Xt,wn).replace(be,"")}var gs=ui(function(t,e,n){return t+(n?"-":"")+e.toLowerCase()}),ms=ui(function(t,e,n){return t+(n?" ":"")+e.toLowerCase()}),bs=ci("toLowerCase");var _s=ui(function(t,e,n){return t+(n?"_":"")+e.toLowerCase()});var xs=ui(function(t,e,n){return t+(n?" ":"")+Ss(e)});var ws=ui(function(t,e,n){return t+(n?" ":"")+e.toUpperCase()}),Ss=ci("toUpperCase");function Cs(t,e,n){return t=Vl(t),(e=n?i:e)===i?function(t){return Se.test(t)}(t)?function(t){return t.match(xe)||[]}(t):function(t){return t.match(zt)||[]}(t):t.match(e)||[]}var Ts=Co(function(t,e){try{return Ve(t,i,e)}catch(t){return Sl(t)?t:new Ht(t)}}),Fs=ji(function(t,e){return $e(e,function(e){e=ua(e),kr(t,e,nl(t[e],t))}),t});function Os(t){return function(){return t}}var Ps=hi(),Es=hi(!0);function js(t){return t}function Is(t){return so("function"==typeof t?t:Nr(t,f))}var ks=Co(function(t,e){return function(n){return ro(n,t,e)}}),Ls=Co(function(t,e){return function(n){return ro(t,n,e)}});function Ms(t,e,n){var r=os(e),o=Xr(e,r);null!=n||Ol(e)&&(o.length||!r.length)||(n=e,e=t,t=this,o=Xr(e,os(e)));var i=!(Ol(n)&&"chain"in n&&!n.chain),a=Cl(t);return $e(o,function(n){var r=e[n];t[n]=r,a&&(t.prototype[n]=function(){var e=this.__chain__;if(i||e){var n=t(this.__wrapped__);return(n.__actions__=ri(this.__actions__)).push({func:r,args:arguments,thisArg:t}),n.__chain__=e,n}return r.apply(t,tn([this.value()],arguments))})}),t}function Ns(){}var Ds=gi(qe),Ks=gi(Xe),Us=gi(rn);function As(t){return Qi(t)?fn(ua(t)):function(t){return function(e){return Zr(e,t)}}(t)}var zs=bi(),Rs=bi(!0);function Ws(){return[]}function Bs(){return!1}var Gs=yi(function(t,e){return t+e},0),Vs=wi("ceil"),Ys=yi(function(t,e){return t/e},1),$s=wi("floor");var Qs,Xs=yi(function(t,e){return t*e},1),Zs=wi("round"),Js=yi(function(t,e){return t-e},0);return hr.after=function(t,e){if("function"!=typeof e)throw new oe(s);return t=Rl(t),function(){if(--t<1)return e.apply(this,arguments)}},hr.ary=tl,hr.assign=Yl,hr.assignIn=$l,hr.assignInWith=Ql,hr.assignWith=Xl,hr.at=Zl,hr.before=el,hr.bind=nl,hr.bindAll=Fs,hr.bindKey=rl,hr.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return gl(t)?t:[t]},hr.chain=Aa,hr.chunk=function(t,e,n){e=(n?$i(t,e,n):e===i)?1:Vn(Rl(e),0);var o=null==t?0:t.length;if(!o||e<1)return[];for(var a=0,l=0,s=r(Un(o/e));a<o;)s[l++]=Io(t,a,a+=e);return s},hr.compact=function(t){for(var e=-1,n=null==t?0:t.length,r=0,o=[];++e<n;){var i=t[e];i&&(o[r++]=i)}return o},hr.concat=function(){var t=arguments.length;if(!t)return[];for(var e=r(t-1),n=arguments[0],o=t;o--;)e[o-1]=arguments[o];return tn(gl(n)?ri(n):[n],Gr(e,1))},hr.cond=function(t){var e=null==t?0:t.length,n=Di();return t=e?qe(t,function(t){if("function"!=typeof t[1])throw new oe(s);return[n(t[0]),t[1]]}):[],Co(function(n){for(var r=-1;++r<e;){var o=t[r];if(Ve(o[0],this,n))return Ve(o[1],this,n)}})},hr.conforms=function(t){return function(t){var e=os(t);return function(n){return Dr(n,t,e)}}(Nr(t,f))},hr.constant=Os,hr.countBy=Wa,hr.create=function(t,e){var n=pr(t);return null==e?n:Ir(n,e)},hr.curry=function t(e,n,r){var o=Ti(e,_,i,i,i,i,i,n=r?i:n);return o.placeholder=t.placeholder,o},hr.curryRight=function t(e,n,r){var o=Ti(e,x,i,i,i,i,i,n=r?i:n);return o.placeholder=t.placeholder,o},hr.debounce=ol,hr.defaults=Jl,hr.defaultsDeep=Hl,hr.defer=il,hr.delay=al,hr.difference=ha,hr.differenceBy=pa,hr.differenceWith=va,hr.drop=function(t,e,n){var r=null==t?0:t.length;return r?Io(t,(e=n||e===i?1:Rl(e))<0?0:e,r):[]},hr.dropRight=function(t,e,n){var r=null==t?0:t.length;return r?Io(t,0,(e=r-(e=n||e===i?1:Rl(e)))<0?0:e):[]},hr.dropRightWhile=function(t,e){return t&&t.length?Ro(t,Di(e,3),!0,!0):[]},hr.dropWhile=function(t,e){return t&&t.length?Ro(t,Di(e,3),!0):[]},hr.fill=function(t,e,n,r){var o=null==t?0:t.length;return o?(n&&"number"!=typeof n&&$i(t,e,n)&&(n=0,r=o),function(t,e,n,r){var o=t.length;for((n=Rl(n))<0&&(n=-n>o?0:o+n),(r=r===i||r>o?o:Rl(r))<0&&(r+=o),r=n>r?0:Wl(r);n<r;)t[n++]=e;return t}(t,e,n,r)):[]},hr.filter=function(t,e){return(gl(t)?Ze:Br)(t,Di(e,3))},hr.flatMap=function(t,e){return Gr(Za(t,e),1)},hr.flatMapDeep=function(t,e){return Gr(Za(t,e),L)},hr.flatMapDepth=function(t,e,n){return n=n===i?1:Rl(n),Gr(Za(t,e),n)},hr.flatten=ma,hr.flattenDeep=function(t){return null!=t&&t.length?Gr(t,L):[]},hr.flattenDepth=function(t,e){return null!=t&&t.length?Gr(t,e=e===i?1:Rl(e)):[]},hr.flip=function(t){return Ti(t,F)},hr.flow=Ps,hr.flowRight=Es,hr.fromPairs=function(t){for(var e=-1,n=null==t?0:t.length,r={};++e<n;){var o=t[e];r[o[0]]=o[1]}return r},hr.functions=function(t){return null==t?[]:Xr(t,os(t))},hr.functionsIn=function(t){return null==t?[]:Xr(t,is(t))},hr.groupBy=$a,hr.initial=function(t){return null!=t&&t.length?Io(t,0,-1):[]},hr.intersection=_a,hr.intersectionBy=xa,hr.intersectionWith=wa,hr.invert=es,hr.invertBy=ns,hr.invokeMap=Qa,hr.iteratee=Is,hr.keyBy=Xa,hr.keys=os,hr.keysIn=is,hr.map=Za,hr.mapKeys=function(t,e){var n={};return e=Di(e,3),$r(t,function(t,r,o){kr(n,e(t,r,o),t)}),n},hr.mapValues=function(t,e){var n={};return e=Di(e,3),$r(t,function(t,r,o){kr(n,r,e(t,r,o))}),n},hr.matches=function(t){return po(Nr(t,f))},hr.matchesProperty=function(t,e){return vo(t,Nr(e,f))},hr.memoize=ll,hr.merge=as,hr.mergeWith=ls,hr.method=ks,hr.methodOf=Ls,hr.mixin=Ms,hr.negate=sl,hr.nthArg=function(t){return t=Rl(t),Co(function(e){return go(e,t)})},hr.omit=ss,hr.omitBy=function(t,e){return us(t,sl(Di(e)))},hr.once=function(t){return el(2,t)},hr.orderBy=function(t,e,n,r){return null==t?[]:(gl(e)||(e=null==e?[]:[e]),gl(n=r?i:n)||(n=null==n?[]:[n]),mo(t,e,n))},hr.over=Ds,hr.overArgs=cl,hr.overEvery=Ks,hr.overSome=Us,hr.partial=ul,hr.partialRight=dl,hr.partition=Ja,hr.pick=cs,hr.pickBy=us,hr.property=As,hr.propertyOf=function(t){return function(e){return null==t?i:Zr(t,e)}},hr.pull=Ca,hr.pullAll=Ta,hr.pullAllBy=function(t,e,n){return t&&t.length&&e&&e.length?_o(t,e,Di(n,2)):t},hr.pullAllWith=function(t,e,n){return t&&t.length&&e&&e.length?_o(t,e,i,n):t},hr.pullAt=Fa,hr.range=zs,hr.rangeRight=Rs,hr.rearg=fl,hr.reject=function(t,e){return(gl(t)?Ze:Br)(t,sl(Di(e,3)))},hr.remove=function(t,e){var n=[];if(!t||!t.length)return n;var r=-1,o=[],i=t.length;for(e=Di(e,3);++r<i;){var a=t[r];e(a,r,t)&&(n.push(a),o.push(r))}return xo(t,o),n},hr.rest=function(t,e){if("function"!=typeof t)throw new oe(s);return Co(t,e=e===i?e:Rl(e))},hr.reverse=Oa,hr.sampleSize=function(t,e,n){return e=(n?$i(t,e,n):e===i)?1:Rl(e),(gl(t)?Tr:Fo)(t,e)},hr.set=function(t,e,n){return null==t?t:Oo(t,e,n)},hr.setWith=function(t,e,n,r){return r="function"==typeof r?r:i,null==t?t:Oo(t,e,n,r)},hr.shuffle=function(t){return(gl(t)?Fr:jo)(t)},hr.slice=function(t,e,n){var r=null==t?0:t.length;return r?(n&&"number"!=typeof n&&$i(t,e,n)?(e=0,n=r):(e=null==e?0:Rl(e),n=n===i?r:Rl(n)),Io(t,e,n)):[]},hr.sortBy=Ha,hr.sortedUniq=function(t){return t&&t.length?No(t):[]},hr.sortedUniqBy=function(t,e){return t&&t.length?No(t,Di(e,2)):[]},hr.split=function(t,e,n){return n&&"number"!=typeof n&&$i(t,e,n)&&(e=n=i),(n=n===i?K:n>>>0)?(t=Vl(t))&&("string"==typeof e||null!=e&&!kl(e))&&!(e=Ko(e))&&Tn(t)?Xo(kn(t),0,n):t.split(e,n):[]},hr.spread=function(t,e){if("function"!=typeof t)throw new oe(s);return e=null==e?0:Vn(Rl(e),0),Co(function(n){var r=n[e],o=Xo(n,0,e);return r&&tn(o,r),Ve(t,this,o)})},hr.tail=function(t){var e=null==t?0:t.length;return e?Io(t,1,e):[]},hr.take=function(t,e,n){return t&&t.length?Io(t,0,(e=n||e===i?1:Rl(e))<0?0:e):[]},hr.takeRight=function(t,e,n){var r=null==t?0:t.length;return r?Io(t,(e=r-(e=n||e===i?1:Rl(e)))<0?0:e,r):[]},hr.takeRightWhile=function(t,e){return t&&t.length?Ro(t,Di(e,3),!1,!0):[]},hr.takeWhile=function(t,e){return t&&t.length?Ro(t,Di(e,3)):[]},hr.tap=function(t,e){return e(t),t},hr.throttle=function(t,e,n){var r=!0,o=!0;if("function"!=typeof t)throw new oe(s);return Ol(n)&&(r="leading"in n?!!n.leading:r,o="trailing"in n?!!n.trailing:o),ol(t,e,{leading:r,maxWait:e,trailing:o})},hr.thru=za,hr.toArray=Al,hr.toPairs=ds,hr.toPairsIn=fs,hr.toPath=function(t){return gl(t)?qe(t,ua):Nl(t)?[t]:ri(ca(Vl(t)))},hr.toPlainObject=Gl,hr.transform=function(t,e,n){var r=gl(t),o=r||xl(t)||Dl(t);if(e=Di(e,4),null==n){var i=t&&t.constructor;n=o?r?new i:[]:Ol(t)&&Cl(i)?pr(Ie(t)):{}}return(o?$e:$r)(t,function(t,r,o){return e(n,t,r,o)}),n},hr.unary=function(t){return tl(t,1)},hr.union=Pa,hr.unionBy=Ea,hr.unionWith=ja,hr.uniq=function(t){return t&&t.length?Uo(t):[]},hr.uniqBy=function(t,e){return t&&t.length?Uo(t,Di(e,2)):[]},hr.uniqWith=function(t,e){return e="function"==typeof e?e:i,t&&t.length?Uo(t,i,e):[]},hr.unset=function(t,e){return null==t||Ao(t,e)},hr.unzip=Ia,hr.unzipWith=ka,hr.update=function(t,e,n){return null==t?t:zo(t,e,Yo(n))},hr.updateWith=function(t,e,n,r){return r="function"==typeof r?r:i,null==t?t:zo(t,e,Yo(n),r)},hr.values=hs,hr.valuesIn=function(t){return null==t?[]:mn(t,is(t))},hr.without=La,hr.words=Cs,hr.wrap=function(t,e){return ul(Yo(e),t)},hr.xor=Ma,hr.xorBy=Na,hr.xorWith=Da,hr.zip=Ka,hr.zipObject=function(t,e){return Go(t||[],e||[],Pr)},hr.zipObjectDeep=function(t,e){return Go(t||[],e||[],Oo)},hr.zipWith=Ua,hr.entries=ds,hr.entriesIn=fs,hr.extend=$l,hr.extendWith=Ql,Ms(hr,hr),hr.add=Gs,hr.attempt=Ts,hr.camelCase=ps,hr.capitalize=vs,hr.ceil=Vs,hr.clamp=function(t,e,n){return n===i&&(n=e,e=i),n!==i&&(n=(n=Bl(n))==n?n:0),e!==i&&(e=(e=Bl(e))==e?e:0),Mr(Bl(t),e,n)},hr.clone=function(t){return Nr(t,p)},hr.cloneDeep=function(t){return Nr(t,f|p)},hr.cloneDeepWith=function(t,e){return Nr(t,f|p,e="function"==typeof e?e:i)},hr.cloneWith=function(t,e){return Nr(t,p,e="function"==typeof e?e:i)},hr.conformsTo=function(t,e){return null==e||Dr(t,e,os(e))},hr.deburr=ys,hr.defaultTo=function(t,e){return null==t||t!=t?e:t},hr.divide=Ys,hr.endsWith=function(t,e,n){t=Vl(t),e=Ko(e);var r=t.length,o=n=n===i?r:Mr(Rl(n),0,r);return(n-=e.length)>=0&&t.slice(n,o)==e},hr.eq=hl,hr.escape=function(t){return(t=Vl(t))&&Tt.test(t)?t.replace(St,Sn):t},hr.escapeRegExp=function(t){return(t=Vl(t))&&Lt.test(t)?t.replace(kt,"\\$&"):t},hr.every=function(t,e,n){var r=gl(t)?Xe:Rr;return n&&$i(t,e,n)&&(e=i),r(t,Di(e,3))},hr.find=Ba,hr.findIndex=ya,hr.findKey=function(t,e){return an(t,Di(e,3),$r)},hr.findLast=Ga,hr.findLastIndex=ga,hr.findLastKey=function(t,e){return an(t,Di(e,3),Qr)},hr.floor=$s,hr.forEach=Va,hr.forEachRight=Ya,hr.forIn=function(t,e){return null==t?t:Vr(t,Di(e,3),is)},hr.forInRight=function(t,e){return null==t?t:Yr(t,Di(e,3),is)},hr.forOwn=function(t,e){return t&&$r(t,Di(e,3))},hr.forOwnRight=function(t,e){return t&&Qr(t,Di(e,3))},hr.get=ql,hr.gt=pl,hr.gte=vl,hr.has=function(t,e){return null!=t&&Bi(t,e,to)},hr.hasIn=ts,hr.head=ba,hr.identity=js,hr.includes=function(t,e,n,r){t=bl(t)?t:hs(t),n=n&&!r?Rl(n):0;var o=t.length;return n<0&&(n=Vn(o+n,0)),Ml(t)?n<=o&&t.indexOf(e,n)>-1:!!o&&sn(t,e,n)>-1},hr.indexOf=function(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var o=null==n?0:Rl(n);return o<0&&(o=Vn(r+o,0)),sn(t,e,o)},hr.inRange=function(t,e,n){return e=zl(e),n===i?(n=e,e=0):n=zl(n),function(t,e,n){return t>=Yn(e,n)&&t<Vn(e,n)}(t=Bl(t),e,n)},hr.invoke=rs,hr.isArguments=yl,hr.isArray=gl,hr.isArrayBuffer=ml,hr.isArrayLike=bl,hr.isArrayLikeObject=_l,hr.isBoolean=function(t){return!0===t||!1===t||Pl(t)&&Hr(t)==G},hr.isBuffer=xl,hr.isDate=wl,hr.isElement=function(t){return Pl(t)&&1===t.nodeType&&!Il(t)},hr.isEmpty=function(t){if(null==t)return!0;if(bl(t)&&(gl(t)||"string"==typeof t||"function"==typeof t.splice||xl(t)||Dl(t)||yl(t)))return!t.length;var e=Wi(t);if(e==Z||e==nt)return!t.size;if(Ji(t))return!co(t).length;for(var n in t)if(ue.call(t,n))return!1;return!0},hr.isEqual=function(t,e){return io(t,e)},hr.isEqualWith=function(t,e,n){var r=(n="function"==typeof n?n:i)?n(t,e):i;return r===i?io(t,e,i,n):!!r},hr.isError=Sl,hr.isFinite=function(t){return"number"==typeof t&&Wn(t)},hr.isFunction=Cl,hr.isInteger=Tl,hr.isLength=Fl,hr.isMap=El,hr.isMatch=function(t,e){return t===e||ao(t,e,Ui(e))},hr.isMatchWith=function(t,e,n){return n="function"==typeof n?n:i,ao(t,e,Ui(e),n)},hr.isNaN=function(t){return jl(t)&&t!=+t},hr.isNative=function(t){if(Zi(t))throw new Ht(l);return lo(t)},hr.isNil=function(t){return null==t},hr.isNull=function(t){return null===t},hr.isNumber=jl,hr.isObject=Ol,hr.isObjectLike=Pl,hr.isPlainObject=Il,hr.isRegExp=kl,hr.isSafeInteger=function(t){return Tl(t)&&t>=-M&&t<=M},hr.isSet=Ll,hr.isString=Ml,hr.isSymbol=Nl,hr.isTypedArray=Dl,hr.isUndefined=function(t){return t===i},hr.isWeakMap=function(t){return Pl(t)&&Wi(t)==at},hr.isWeakSet=function(t){return Pl(t)&&Hr(t)==lt},hr.join=function(t,e){return null==t?"":Bn.call(t,e)},hr.kebabCase=gs,hr.last=Sa,hr.lastIndexOf=function(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var o=r;return n!==i&&(o=(o=Rl(n))<0?Vn(r+o,0):Yn(o,r-1)),e==e?function(t,e,n){for(var r=n+1;r--;)if(t[r]===e)return r;return r}(t,e,o):ln(t,un,o,!0)},hr.lowerCase=ms,hr.lowerFirst=bs,hr.lt=Kl,hr.lte=Ul,hr.max=function(t){return t&&t.length?Wr(t,js,qr):i},hr.maxBy=function(t,e){return t&&t.length?Wr(t,Di(e,2),qr):i},hr.mean=function(t){return dn(t,js)},hr.meanBy=function(t,e){return dn(t,Di(e,2))},hr.min=function(t){return t&&t.length?Wr(t,js,fo):i},hr.minBy=function(t,e){return t&&t.length?Wr(t,Di(e,2),fo):i},hr.stubArray=Ws,hr.stubFalse=Bs,hr.stubObject=function(){return{}},hr.stubString=function(){return""},hr.stubTrue=function(){return!0},hr.multiply=Xs,hr.nth=function(t,e){return t&&t.length?go(t,Rl(e)):i},hr.noConflict=function(){return Le._===this&&(Le._=ve),this},hr.noop=Ns,hr.now=qa,hr.pad=function(t,e,n){t=Vl(t);var r=(e=Rl(e))?In(t):0;if(!e||r>=e)return t;var o=(e-r)/2;return mi(An(o),n)+t+mi(Un(o),n)},hr.padEnd=function(t,e,n){t=Vl(t);var r=(e=Rl(e))?In(t):0;return e&&r<e?t+mi(e-r,n):t},hr.padStart=function(t,e,n){t=Vl(t);var r=(e=Rl(e))?In(t):0;return e&&r<e?mi(e-r,n)+t:t},hr.parseInt=function(t,e,n){return n||null==e?e=0:e&&(e=+e),Qn(Vl(t).replace(Nt,""),e||0)},hr.random=function(t,e,n){if(n&&"boolean"!=typeof n&&$i(t,e,n)&&(e=n=i),n===i&&("boolean"==typeof e?(n=e,e=i):"boolean"==typeof t&&(n=t,t=i)),t===i&&e===i?(t=0,e=1):(t=zl(t),e===i?(e=t,t=0):e=zl(e)),t>e){var r=t;t=e,e=r}if(n||t%1||e%1){var o=Xn();return Yn(t+o*(e-t+Ee("1e-"+((o+"").length-1))),e)}return wo(t,e)},hr.reduce=function(t,e,n){var r=gl(t)?en:pn,o=arguments.length<3;return r(t,Di(e,4),n,o,Ar)},hr.reduceRight=function(t,e,n){var r=gl(t)?nn:pn,o=arguments.length<3;return r(t,Di(e,4),n,o,zr)},hr.repeat=function(t,e,n){return e=(n?$i(t,e,n):e===i)?1:Rl(e),So(Vl(t),e)},hr.replace=function(){var t=arguments,e=Vl(t[0]);return t.length<3?e:e.replace(t[1],t[2])},hr.result=function(t,e,n){var r=-1,o=(e=$o(e,t)).length;for(o||(o=1,t=i);++r<o;){var a=null==t?i:t[ua(e[r])];a===i&&(r=o,a=n),t=Cl(a)?a.call(t):a}return t},hr.round=Zs,hr.runInContext=t,hr.sample=function(t){return(gl(t)?Cr:To)(t)},hr.size=function(t){if(null==t)return 0;if(bl(t))return Ml(t)?In(t):t.length;var e=Wi(t);return e==Z||e==nt?t.size:co(t).length},hr.snakeCase=_s,hr.some=function(t,e,n){var r=gl(t)?rn:ko;return n&&$i(t,e,n)&&(e=i),r(t,Di(e,3))},hr.sortedIndex=function(t,e){return Lo(t,e)},hr.sortedIndexBy=function(t,e,n){return Mo(t,e,Di(n,2))},hr.sortedIndexOf=function(t,e){var n=null==t?0:t.length;if(n){var r=Lo(t,e);if(r<n&&hl(t[r],e))return r}return-1},hr.sortedLastIndex=function(t,e){return Lo(t,e,!0)},hr.sortedLastIndexBy=function(t,e,n){return Mo(t,e,Di(n,2),!0)},hr.sortedLastIndexOf=function(t,e){if(null!=t&&t.length){var n=Lo(t,e,!0)-1;if(hl(t[n],e))return n}return-1},hr.startCase=xs,hr.startsWith=function(t,e,n){return t=Vl(t),n=null==n?0:Mr(Rl(n),0,t.length),e=Ko(e),t.slice(n,n+e.length)==e},hr.subtract=Js,hr.sum=function(t){return t&&t.length?vn(t,js):0},hr.sumBy=function(t,e){return t&&t.length?vn(t,Di(e,2)):0},hr.template=function(t,e,n){var r=hr.templateSettings;n&&$i(t,e,n)&&(e=i),t=Vl(t),e=Ql({},e,r,Fi);var o,a,l=Ql({},e.imports,r.imports,Fi),s=os(l),c=mn(l,s),u=0,d=e.interpolate||Zt,f="__p += '",h=ne((e.escape||Zt).source+"|"+d.source+"|"+(d===Pt?Wt:Zt).source+"|"+(e.evaluate||Zt).source+"|$","g"),p="//# sourceURL="+("sourceURL"in e?e.sourceURL:"lodash.templateSources["+ ++Te+"]")+"\n";t.replace(h,function(e,n,r,i,l,s){return r||(r=i),f+=t.slice(u,s).replace(Jt,Cn),n&&(o=!0,f+="' +\n__e("+n+") +\n'"),l&&(a=!0,f+="';\n"+l+";\n__p += '"),r&&(f+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),u=s+e.length,e}),f+="';\n";var v=e.variable;v||(f="with (obj) {\n"+f+"\n}\n"),f=(a?f.replace(bt,""):f).replace(_t,"$1").replace(xt,"$1;"),f="function("+(v||"obj")+") {\n"+(v?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(o?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+f+"return __p\n}";var y=Ts(function(){return qt(s,p+"return "+f).apply(i,c)});if(y.source=f,Sl(y))throw y;return y},hr.times=function(t,e){if((t=Rl(t))<1||t>M)return[];var n=K,r=Yn(t,K);e=Di(e),t-=K;for(var o=yn(r,e);++n<t;)e(n);return o},hr.toFinite=zl,hr.toInteger=Rl,hr.toLength=Wl,hr.toLower=function(t){return Vl(t).toLowerCase()},hr.toNumber=Bl,hr.toSafeInteger=function(t){return t?Mr(Rl(t),-M,M):0===t?t:0},hr.toString=Vl,hr.toUpper=function(t){return Vl(t).toUpperCase()},hr.trim=function(t,e,n){if((t=Vl(t))&&(n||e===i))return t.replace(Mt,"");if(!t||!(e=Ko(e)))return t;var r=kn(t),o=kn(e);return Xo(r,_n(r,o),xn(r,o)+1).join("")},hr.trimEnd=function(t,e,n){if((t=Vl(t))&&(n||e===i))return t.replace(Dt,"");if(!t||!(e=Ko(e)))return t;var r=kn(t);return Xo(r,0,xn(r,kn(e))+1).join("")},hr.trimStart=function(t,e,n){if((t=Vl(t))&&(n||e===i))return t.replace(Nt,"");if(!t||!(e=Ko(e)))return t;var r=kn(t);return Xo(r,_n(r,kn(e))).join("")},hr.truncate=function(t,e){var n=O,r=P;if(Ol(e)){var o="separator"in e?e.separator:o;n="length"in e?Rl(e.length):n,r="omission"in e?Ko(e.omission):r}var a=(t=Vl(t)).length;if(Tn(t)){var l=kn(t);a=l.length}if(n>=a)return t;var s=n-In(r);if(s<1)return r;var c=l?Xo(l,0,s).join(""):t.slice(0,s);if(o===i)return c+r;if(l&&(s+=c.length-s),kl(o)){if(t.slice(s).search(o)){var u,d=c;for(o.global||(o=ne(o.source,Vl(Bt.exec(o))+"g")),o.lastIndex=0;u=o.exec(d);)var f=u.index;c=c.slice(0,f===i?s:f)}}else if(t.indexOf(Ko(o),s)!=s){var h=c.lastIndexOf(o);h>-1&&(c=c.slice(0,h))}return c+r},hr.unescape=function(t){return(t=Vl(t))&&Ct.test(t)?t.replace(wt,Ln):t},hr.uniqueId=function(t){var e=++de;return Vl(t)+e},hr.upperCase=ws,hr.upperFirst=Ss,hr.each=Va,hr.eachRight=Ya,hr.first=ba,Ms(hr,(Qs={},$r(hr,function(t,e){ue.call(hr.prototype,e)||(Qs[e]=t)}),Qs),{chain:!1}),hr.VERSION="4.17.11",$e(["bind","bindKey","curry","curryRight","partial","partialRight"],function(t){hr[t].placeholder=hr}),$e(["drop","take"],function(t,e){gr.prototype[t]=function(n){n=n===i?1:Vn(Rl(n),0);var r=this.__filtered__&&!e?new gr(this):this.clone();return r.__filtered__?r.__takeCount__=Yn(n,r.__takeCount__):r.__views__.push({size:Yn(n,K),type:t+(r.__dir__<0?"Right":"")}),r},gr.prototype[t+"Right"]=function(e){return this.reverse()[t](e).reverse()}}),$e(["filter","map","takeWhile"],function(t,e){var n=e+1,r=n==I||3==n;gr.prototype[t]=function(t){var e=this.clone();return e.__iteratees__.push({iteratee:Di(t,3),type:n}),e.__filtered__=e.__filtered__||r,e}}),$e(["head","last"],function(t,e){var n="take"+(e?"Right":"");gr.prototype[t]=function(){return this[n](1).value()[0]}}),$e(["initial","tail"],function(t,e){var n="drop"+(e?"":"Right");gr.prototype[t]=function(){return this.__filtered__?new gr(this):this[n](1)}}),gr.prototype.compact=function(){return this.filter(js)},gr.prototype.find=function(t){return this.filter(t).head()},gr.prototype.findLast=function(t){return this.reverse().find(t)},gr.prototype.invokeMap=Co(function(t,e){return"function"==typeof t?new gr(this):this.map(function(n){return ro(n,t,e)})}),gr.prototype.reject=function(t){return this.filter(sl(Di(t)))},gr.prototype.slice=function(t,e){t=Rl(t);var n=this;return n.__filtered__&&(t>0||e<0)?new gr(n):(t<0?n=n.takeRight(-t):t&&(n=n.drop(t)),e!==i&&(n=(e=Rl(e))<0?n.dropRight(-e):n.take(e-t)),n)},gr.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},gr.prototype.toArray=function(){return this.take(K)},$r(gr.prototype,function(t,e){var n=/^(?:filter|find|map|reject)|While$/.test(e),r=/^(?:head|last)$/.test(e),o=hr[r?"take"+("last"==e?"Right":""):e],a=r||/^find/.test(e);o&&(hr.prototype[e]=function(){var e=this.__wrapped__,l=r?[1]:arguments,s=e instanceof gr,c=l[0],u=s||gl(e),d=function(t){var e=o.apply(hr,tn([t],l));return r&&f?e[0]:e};u&&n&&"function"==typeof c&&1!=c.length&&(s=u=!1);var f=this.__chain__,h=!!this.__actions__.length,p=a&&!f,v=s&&!h;if(!a&&u){e=v?e:new gr(this);var y=t.apply(e,l);return y.__actions__.push({func:za,args:[d],thisArg:i}),new yr(y,f)}return p&&v?t.apply(this,l):(y=this.thru(d),p?r?y.value()[0]:y.value():y)})}),$e(["pop","push","shift","sort","splice","unshift"],function(t){var e=ie[t],n=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",r=/^(?:pop|shift)$/.test(t);hr.prototype[t]=function(){var t=arguments;if(r&&!this.__chain__){var o=this.value();return e.apply(gl(o)?o:[],t)}return this[n](function(n){return e.apply(gl(n)?n:[],t)})}}),$r(gr.prototype,function(t,e){var n=hr[e];if(n){var r=n.name+"";(or[r]||(or[r]=[])).push({name:e,func:n})}}),or[pi(i,m).name]=[{name:"wrapper",func:i}],gr.prototype.clone=function(){var t=new gr(this.__wrapped__);return t.__actions__=ri(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=ri(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=ri(this.__views__),t},gr.prototype.reverse=function(){if(this.__filtered__){var t=new gr(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},gr.prototype.value=function(){var t=this.__wrapped__.value(),e=this.__dir__,n=gl(t),r=e<0,o=n?t.length:0,i=function(t,e,n){for(var r=-1,o=n.length;++r<o;){var i=n[r],a=i.size;switch(i.type){case"drop":t+=a;break;case"dropRight":e-=a;break;case"take":e=Yn(e,t+a);break;case"takeRight":t=Vn(t,e-a)}}return{start:t,end:e}}(0,o,this.__views__),a=i.start,l=i.end,s=l-a,c=r?l:a-1,u=this.__iteratees__,d=u.length,f=0,h=Yn(s,this.__takeCount__);if(!n||!r&&o==s&&h==s)return Wo(t,this.__actions__);var p=[];t:for(;s--&&f<h;){for(var v=-1,y=t[c+=e];++v<d;){var g=u[v],m=g.iteratee,b=g.type,_=m(y);if(b==k)y=_;else if(!_){if(b==I)continue t;break t}}p[f++]=y}return p},hr.prototype.at=Ra,hr.prototype.chain=function(){return Aa(this)},hr.prototype.commit=function(){return new yr(this.value(),this.__chain__)},hr.prototype.next=function(){this.__values__===i&&(this.__values__=Al(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?i:this.__values__[this.__index__++]}},hr.prototype.plant=function(t){for(var e,n=this;n instanceof vr;){var r=fa(n);r.__index__=0,r.__values__=i,e?o.__wrapped__=r:e=r;var o=r;n=n.__wrapped__}return o.__wrapped__=t,e},hr.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof gr){var e=t;return this.__actions__.length&&(e=new gr(this)),(e=e.reverse()).__actions__.push({func:za,args:[Oa],thisArg:i}),new yr(e,this.__chain__)}return this.thru(Oa)},hr.prototype.toJSON=hr.prototype.valueOf=hr.prototype.value=function(){return Wo(this.__wrapped__,this.__actions__)},hr.prototype.first=hr.prototype.head,Ue&&(hr.prototype[Ue]=function(){return this}),hr}();Le._=Mn,(o=function(){return Mn}.call(e,n,e,r))===i||(r.exports=o)}).call(this)}).call(this,n(14),n(65)(t))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"Accordion",{enumerable:!0,get:function(){return r.default}}),Object.defineProperty(e,"AccordionItem",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(e,"AccordionItemTitle",{enumerable:!0,get:function(){return i.default}}),Object.defineProperty(e,"AccordionItemBody",{enumerable:!0,get:function(){return a.default}});var r=l(n(116)),o=l(n(118)),i=l(n(51)),a=l(n(50));function l(t){return t&&t.__esModule?t:{default:t}}},function(t,e,n){"use strict";t.exports=function(t,e,n,r,o,i,a,l){if(!t){var s;if(void 0===e)s=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,r,o,i,a,l],u=0;(s=new Error(e.replace(/%s/g,function(){return c[u++]}))).name="Invariant Violation"}throw s.framesToPop=1,s}}},function(t,e){var n=t.exports={version:"2.6.2"};"number"==typeof __e&&(__e=n)},function(t,e,n){var r;
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
!function(){"use strict";var n={}.hasOwnProperty;function o(){for(var t=[],e=0;e<arguments.length;e++){var r=arguments[e];if(r){var i=typeof r;if("string"===i||"number"===i)t.push(r);else if(Array.isArray(r)&&r.length){var a=o.apply(null,r);a&&t.push(a)}else if("object"===i)for(var l in r)n.call(r,l)&&r[l]&&t.push(l)}}return t.join(" ")}t.exports?(o.default=o,t.exports=o):void 0===(r=function(){return o}.apply(e,[]))||(t.exports=r)}()},function(t,e,n){t.exports=n(62)()},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=n(0),a=s(i),l=s(n(108));function s(t){return t&&t.__esModule?t:{default:t}}var c=function(t){function e(t){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var n=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t)),r=t.effect||"fadeInDown";return n.setSize(r),n.state={visible:t.visible,style:l.default[r]},n}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,i.Component),o(e,[{key:"componentWillReceiveProps",value:function(t){var e=t.visible,n=t.effect,r=void 0===n?"fadeInDown":n;this.setState({visible:e}),this.setSize(r),this.setStyles(r)}},{key:"setStyles",value:function(t){this.props&&this.props.styles&&(l.default[t].panel=r({},l.default[t].panel,this.props.styles))}},{key:"setSize",value:function(t){if(this.props&&this.props.width)if("%"===this.props.width.charAt(this.props.width.length-1)){var e=this.props.width.slice(0,-1);l.default[t].panel.width=e+"%"}else if("x"===this.props.width.charAt(this.props.width.length-1)){var n=this.props.width.slice(0,-2);l.default[t].panel.width=n+"px"}else l.default[t].panel.width=this.props.width+"px";if(this.props&&this.props.height)if("%"===this.props.height.charAt(this.props.height.length-1)){var r=this.props.height.slice(0,-1);l.default[t].panel.height=r+"vh"}else if("x"===this.props.height.charAt(this.props.height.length-1)){var o=this.props.height.slice(0,-2);l.default[t].panel.height=o+"px"}else l.default[t].panel.height=this.props.height+"px"}},{key:"render",value:function(){return a.default.createElement("div",null,a.default.createElement("div",{style:this.state.visible?this.state.style.container:this.state.style.containerHidden},a.default.createElement("div",{style:this.state.visible?r({},this.state.style.panel):this.state.style.panelHidden},this.props.children),a.default.createElement("div",{style:this.state.visible?this.state.style.mask:this.state.style.maskHidden,onClick:this.props.onClickAway?this.props.onClickAway:null})))}}]),e}();e.default=c},function(t,e,n){"use strict";var r=n(122).DebounceInput;r.DebounceInput=r,t.exports=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=n(0),i=s(o),a=s(n(23)),l=s(n(12));function s(t){return t&&t.__esModule?t:{default:t}}function c(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var u="Select...",d=function(t){function e(t){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var n=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return n.state={selected:n.parseValue(t.value,t.options)||{label:void 0===t.placeholder?u:t.placeholder,value:""},isOpen:!1},n.mounted=!0,n.handleDocumentClick=n.handleDocumentClick.bind(n),n.fireChangeEvent=n.fireChangeEvent.bind(n),n}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,o.Component),r(e,[{key:"componentWillReceiveProps",value:function(t){if(t.value){var e=this.parseValue(t.value,t.options);e!==this.state.selected&&this.setState({selected:e})}else this.setState({selected:{label:void 0===t.placeholder?u:t.placeholder,value:""}})}},{key:"componentDidMount",value:function(){document.addEventListener("click",this.handleDocumentClick,!1),document.addEventListener("touchend",this.handleDocumentClick,!1)}},{key:"componentWillUnmount",value:function(){this.mounted=!1,document.removeEventListener("click",this.handleDocumentClick,!1),document.removeEventListener("touchend",this.handleDocumentClick,!1)}},{key:"handleMouseDown",value:function(t){this.props.onFocus&&"function"==typeof this.props.onFocus&&this.props.onFocus(this.state.isOpen),"mousedown"===t.type&&0!==t.button||(t.stopPropagation(),t.preventDefault(),this.props.disabled||this.setState({isOpen:!this.state.isOpen}))}},{key:"parseValue",value:function(t,e){var n=void 0;if("string"==typeof t)for(var r=0,o=e.length;r<o;r++)if("group"===e[r].type){var i=e[r].items.filter(function(e){return e.value===t});i.length&&(n=i[0])}else void 0!==e[r].value&&e[r].value===t&&(n=e[r]);return n||t}},{key:"setValue",value:function(t,e){var n={selected:{value:t,label:e},isOpen:!1};this.fireChangeEvent(n),this.setState(n)}},{key:"fireChangeEvent",value:function(t){t.selected!==this.state.selected&&this.props.onChange&&this.props.onChange(t.selected)}},{key:"renderOption",value:function(t){var e,n=t.value;void 0===n&&(n=t.label||t);var r=t.label||t.value||t,o=n===this.state.selected.value||n===this.state.selected,a=(c(e={},this.props.baseClassName+"-option",!0),c(e,t.className,!!t.className),c(e,"is-selected",o),e),s=(0,l.default)(a);return i.default.createElement("div",{key:n,className:s,onMouseDown:this.setValue.bind(this,n,r),onClick:this.setValue.bind(this,n,r),role:"option","aria-selected":o?"true":"false"},r)}},{key:"buildMenu",value:function(){var t=this,e=this.props,n=e.options,r=e.baseClassName,o=n.map(function(e){if("group"===e.type){var n=i.default.createElement("div",{className:r+"-title"},e.name),o=e.items.map(function(e){return t.renderOption(e)});return i.default.createElement("div",{className:r+"-group",key:e.name,role:"listbox",tabIndex:"-1"},n,o)}return t.renderOption(e)});return o.length?o:i.default.createElement("div",{className:r+"-noresults"},"No options found")}},{key:"handleDocumentClick",value:function(t){this.mounted&&(a.default.findDOMNode(this).contains(t.target)||this.state.isOpen&&this.setState({isOpen:!1}))}},{key:"isValueSelected",value:function(){return"string"==typeof this.state.selected||""!==this.state.selected.value}},{key:"render",value:function(){var t,e,n,r,o,a=this.props,s=a.baseClassName,u=a.controlClassName,d=a.placeholderClassName,f=a.menuClassName,h=a.arrowClassName,p=a.arrowClosed,v=a.arrowOpen,y=a.className,g=this.props.disabled?"Dropdown-disabled":"",m="string"==typeof this.state.selected?this.state.selected:this.state.selected.label,b=(0,l.default)((c(t={},s+"-root",!0),c(t,y,!!y),c(t,"is-open",this.state.isOpen),t)),_=(0,l.default)((c(e={},s+"-control",!0),c(e,u,!!u),c(e,g,!!g),e)),x=(0,l.default)((c(n={},s+"-placeholder",!0),c(n,d,!!d),c(n,"is-selected",this.isValueSelected()),n)),w=(0,l.default)((c(r={},s+"-menu",!0),c(r,f,!!f),r)),S=(0,l.default)((c(o={},s+"-arrow",!0),c(o,h,!!h),o)),C=i.default.createElement("div",{className:x},m),T=this.state.isOpen?i.default.createElement("div",{className:w,"aria-expanded":"true"},this.buildMenu()):null;return i.default.createElement("div",{className:b},i.default.createElement("div",{className:_,onMouseDown:this.handleMouseDown.bind(this),onTouchEnd:this.handleMouseDown.bind(this),"aria-haspopup":"listbox"},C,i.default.createElement("div",{className:s+"-arrow-wrapper"},v&&p?this.state.isOpen?v:p:i.default.createElement("span",{className:S}))),T)}}]),e}();d.defaultProps={baseClassName:"Dropdown"},e.default=d},function(t,e,n){var r=n(19),o=n(11),i=n(79),a=n(81),l=n(39),s=function(t,e,n){var c,u,d,f=t&s.F,h=t&s.G,p=t&s.S,v=t&s.P,y=t&s.B,g=t&s.W,m=h?o:o[e]||(o[e]={}),b=m.prototype,_=h?r:p?r[e]:(r[e]||{}).prototype;for(c in h&&(n=e),n)(u=!f&&_&&void 0!==_[c])&&l(m,c)||(d=u?_[c]:n[c],m[c]=h&&"function"!=typeof _[c]?n[c]:y&&u?i(d,r):g&&_[c]==d?function(t){var e=function(e,n,r){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(e);case 2:return new t(e,n)}return new t(e,n,r)}return t.apply(this,arguments)};return e.prototype=t.prototype,e}(d):v&&"function"==typeof d?i(Function.call,d):d,v&&((m.virtual||(m.virtual={}))[c]=d,t&s.R&&b&&!b[c]&&a(b,c,d)))};s.F=1,s.G=2,s.S=4,s.P=8,s.B=16,s.W=32,s.U=64,s.R=128,t.exports=s},function(t,e){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(t,e,n){t.exports=!n(21)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e,n){var r=n(86),o=n(44);t.exports=Object.keys||function(t){return r(t,o)}},function(t,e,n){"use strict";!function t(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(t)}catch(t){console.error(t)}}(),t.exports=n(59)},function(t,e,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;t.exports=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},n=0;n<10;n++)e["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(e).map(function(t){return e[t]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(t){r[t]=t}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(t){return!1}}()?Object.assign:function(t,e){for(var n,a,l=function(t){if(null==t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}(t),s=1;s<arguments.length;s++){for(var c in n=Object(arguments[s]))o.call(n,c)&&(l[c]=n[c]);if(r){a=r(n);for(var u=0;u<a.length;u++)i.call(n,a[u])&&(l[a[u]]=n[a[u]])}}return l}},function(t,e,n){"use strict";var r=function(t){if(void 0===t)throw new Error("invariant(...): Second argument must be a string.")};t.exports=function(t,e){for(var n=arguments.length,o=new Array(n>2?n-2:0),i=2;i<n;i++)o[i-2]=arguments[i];if(r(e),!t){var a;if(void 0===e)a=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=0;(a=new Error(e.replace(/%s/g,function(){return String(o[l++])}))).name="Invariant Violation"}throw a.framesToPop=1,a}}},function(t,e,n){var r=n(27);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,n){var r=n(40),o=n(41);t.exports=function(t){return r(o(t))}},function(t,e,n){var r=n(148);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(3)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){"use strict";t.exports=n(64)},function(t,e,n){"use strict";(function(t,r){var o,i=n(53);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==t?t:r;var a=Object(i.a)(o);e.a=a}).call(this,n(14),n(61)(t))},function(t,e,n){"use strict";var r=n(30),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function s(t){return r.isMemo(t)?a:l[t.$$typeof]||o}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0};var c=Object.defineProperty,u=Object.getOwnPropertyNames,d=Object.getOwnPropertySymbols,f=Object.getOwnPropertyDescriptor,h=Object.getPrototypeOf,p=Object.prototype;t.exports=function t(e,n,r){if("string"!=typeof n){if(p){var o=h(n);o&&o!==p&&t(e,o,r)}var a=u(n);d&&(a=a.concat(d(n)));for(var l=s(e),v=s(n),y=0;y<a.length;++y){var g=a[y];if(!(i[g]||r&&r[g]||v&&v[g]||l&&l[g])){var m=f(n,g);try{c(e,g,m)}catch(t){}}}return e}return e}},function(t,e,n){t.exports=n(105)},function(t,e,n){"use strict";t.exports=n(60)},function(t,e,n){(function(e){
/*
 * Konva JavaScript Framework v2.6.0
 * http://konvajs.github.io/
 * Licensed under the MIT
 * Date: Fri Dec 14 2018
 *
 * Original work Copyright (C) 2011 - 2013 by Eric Rowell (KineticJS)
 * Modified work Copyright (C) 2014 - present by Anton Lavrenov (Konva)
 *
 * @license
 */
!function(){"use strict";var n=Math.PI/180,r={version:"2.6.0",stages:[],idCounter:0,ids:{},names:{},shapes:{},listenClickTap:!1,inDblClickWindow:!1,isBrowser:"undefined"!=typeof window&&("[object Window]"==={}.toString.call(window)||"[object global]"==={}.toString.call(window)),isUnminified:/comment/.test(function(){}),enableTrace:!1,traceArrMax:100,dblClickWindow:400,pixelRatio:void 0,dragDistance:3,angleDeg:!0,showWarnings:!0,Filters:{},isDragging:function(){var t=r.DD;return!!t&&t.isDragging},isDragReady:function(){var t=r.DD;return!!t&&!!t.node},_addId:function(t,e){e&&(this.ids[e]=t)},_removeId:function(t){void 0!==t&&delete this.ids[t]},_addName:function(t,e){e&&(this.names[e]||(this.names[e]=[]),this.names[e].push(t))},_removeName:function(t,e){if(t){var n=this.names[t];if(n){for(var r=0;r<n.length;r++){n[r]._id===e&&n.splice(r,1)}0===n.length&&delete this.names[t]}}},getAngle:function(t){return this.angleDeg?t*n:t},_detectIE:function(t){var e=t.indexOf("msie ");if(e>0)return parseInt(t.substring(e+5,t.indexOf(".",e)),10);if(t.indexOf("trident/")>0){var n=t.indexOf("rv:");return parseInt(t.substring(n+3,t.indexOf(".",n)),10)}var r=t.indexOf("edge/");return r>0&&parseInt(t.substring(r+5,t.indexOf(".",r)),10)},_parseUA:function(t){var e=t.toLowerCase(),n=/(chrome)[ \/]([\w.]+)/.exec(e)||/(webkit)[ \/]([\w.]+)/.exec(e)||/(opera)(?:.*version|)[ \/]([\w.]+)/.exec(e)||/(msie) ([\w.]+)/.exec(e)||e.indexOf("compatible")<0&&/(mozilla)(?:.*? rv:([\w.]+)|)/.exec(e)||[],o=!!t.match(/Android|BlackBerry|iPhone|iPad|iPod|Opera Mini|IEMobile/i),i=!!t.match(/IEMobile/i);return{browser:n[1]||"",version:n[2]||"0",isIE:r._detectIE(e),mobile:o,ieMobile:i}},UA:void 0},o=void 0!==e?e:"undefined"!=typeof window?window:"undefined"!=typeof WorkerGlobalScope?self:{};r.UA=r._parseUA(o.navigator&&o.navigator.userAgent||""),o.Konva&&console.error("Konva instance is already exist in current eviroment. Please use only one instance."),o.Konva=r,r.global=o,r.window=o,r.document=o.document,t.exports=r}(),function(){"use strict";Konva.Collection=function(){var t=[].slice.call(arguments),e=t.length,n=0;for(this.length=e;n<e;n++)this[n]=t[n];return this},Konva.Collection.prototype=[],Konva.Collection.prototype.each=function(t){for(var e=0;e<this.length;e++)t(this[e],e)},Konva.Collection.prototype.toArray=function(){var t,e=[],n=this.length;for(t=0;t<n;t++)e.push(this[t]);return e},Konva.Collection.toCollection=function(t){var e,n=new Konva.Collection,r=t.length;for(e=0;e<r;e++)n.push(t[e]);return n},Konva.Collection._mapMethod=function(t){Konva.Collection.prototype[t]=function(){var e,n=this.length,r=[].slice.call(arguments);for(e=0;e<n;e++)this[e][t].apply(this[e],r);return this}},Konva.Collection.mapMethods=function(t){var e=t.prototype;for(var n in e)Konva.Collection._mapMethod(n)},Konva.Transform=function(t){this.m=t&&t.slice()||[1,0,0,1,0,0]},Konva.Transform.prototype={copy:function(){return new Konva.Transform(this.m)},point:function(t){var e=this.m;return{x:e[0]*t.x+e[2]*t.y+e[4],y:e[1]*t.x+e[3]*t.y+e[5]}},translate:function(t,e){return this.m[4]+=this.m[0]*t+this.m[2]*e,this.m[5]+=this.m[1]*t+this.m[3]*e,this},scale:function(t,e){return this.m[0]*=t,this.m[1]*=t,this.m[2]*=e,this.m[3]*=e,this},rotate:function(t){var e=Math.cos(t),n=Math.sin(t),r=this.m[0]*e+this.m[2]*n,o=this.m[1]*e+this.m[3]*n,i=this.m[0]*-n+this.m[2]*e,a=this.m[1]*-n+this.m[3]*e;return this.m[0]=r,this.m[1]=o,this.m[2]=i,this.m[3]=a,this},getTranslation:function(){return{x:this.m[4],y:this.m[5]}},skew:function(t,e){var n=this.m[0]+this.m[2]*e,r=this.m[1]+this.m[3]*e,o=this.m[2]+this.m[0]*t,i=this.m[3]+this.m[1]*t;return this.m[0]=n,this.m[1]=r,this.m[2]=o,this.m[3]=i,this},multiply:function(t){var e=this.m[0]*t.m[0]+this.m[2]*t.m[1],n=this.m[1]*t.m[0]+this.m[3]*t.m[1],r=this.m[0]*t.m[2]+this.m[2]*t.m[3],o=this.m[1]*t.m[2]+this.m[3]*t.m[3],i=this.m[0]*t.m[4]+this.m[2]*t.m[5]+this.m[4],a=this.m[1]*t.m[4]+this.m[3]*t.m[5]+this.m[5];return this.m[0]=e,this.m[1]=n,this.m[2]=r,this.m[3]=o,this.m[4]=i,this.m[5]=a,this},invert:function(){var t=1/(this.m[0]*this.m[3]-this.m[1]*this.m[2]),e=this.m[3]*t,n=-this.m[1]*t,r=-this.m[2]*t,o=this.m[0]*t,i=t*(this.m[2]*this.m[5]-this.m[3]*this.m[4]),a=t*(this.m[1]*this.m[4]-this.m[0]*this.m[5]);return this.m[0]=e,this.m[1]=n,this.m[2]=r,this.m[3]=o,this.m[4]=i,this.m[5]=a,this},getMatrix:function(){return this.m},setAbsolutePosition:function(t,e){var n=this.m[0],r=this.m[1],o=this.m[2],i=this.m[3],a=this.m[4],l=(n*(e-this.m[5])-r*(t-a))/(n*i-r*o),s=(t-a-o*l)/n;return this.translate(s,l)}};var t=Math.PI/180,e=180/Math.PI,n={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,132,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,255,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,203],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[119,128,144],slategrey:[119,128,144],snow:[255,255,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],transparent:[255,255,255,0],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,5]},r=/rgb\((\d{1,3}),(\d{1,3}),(\d{1,3})\)/;Konva.Util={_isElement:function(t){return!(!t||1!=t.nodeType)},_isFunction:function(t){return!!(t&&t.constructor&&t.call&&t.apply)},_isObject:function(t){return!!t&&t.constructor===Object},_isArray:function(t){return"[object Array]"===Object.prototype.toString.call(t)},_isNumber:function(t){return"[object Number]"===Object.prototype.toString.call(t)&&!isNaN(t)&&isFinite(t)},_isString:function(t){return"[object String]"===Object.prototype.toString.call(t)},_isBoolean:function(t){return"[object Boolean]"===Object.prototype.toString.call(t)},isObject:function(t){return t instanceof Object},isValidSelector:function(t){if("string"!=typeof t)return!1;var e=t[0];return"#"===e||"."===e||e===e.toUpperCase()},_sign:function(t){return 0===t?0:t>0?1:-1},createCanvasElement:function(){var t=Konva.isBrowser?Konva.document.createElement("canvas"):new Konva._nodeCanvas;try{t.style=t.style||{}}catch(t){}return t},_isInDocument:function(t){for(;t=t.parentNode;)if(t==Konva.document)return!0;return!1},_simplifyArray:function(t){var e,n,r=[],o=t.length,i=Konva.Util;for(e=0;e<o;e++)n=t[e],i._isNumber(n)?n=Math.round(1e3*n)/1e3:i._isString(n)||(n=n.toString()),r.push(n);return r},_getImage:function(t,e){var n,r;if(t)if(this._isElement(t))e(t);else if(this._isString(t))(n=new Konva.window.Image).onload=function(){e(n)},n.src=t;else if(t.data){(r=Konva.Util.createCanvasElement()).width=t.width,r.height=t.height,r.getContext("2d").putImageData(t,0,0),this._getImage(r.toDataURL(),e)}else e(null);else e(null)},_getRGBAString:function(t){return["rgba(",t.red||0,",",t.green||0,",",t.blue||0,",",t.alpha||1,")"].join("")},_rgbToHex:function(t,e,n){return((1<<24)+(t<<16)+(e<<8)+n).toString(16).slice(1)},_hexToRgb:function(t){t=t.replace("#","");var e=parseInt(t,16);return{r:e>>16&255,g:e>>8&255,b:255&e}},getRandomColor:function(){for(var t=(16777215*Math.random()<<0).toString(16);t.length<6;)t="0"+t;return"#"+t},get:function(t,e){return void 0===t?e:t},getRGB:function(t){var e;return t in n?{r:(e=n[t])[0],g:e[1],b:e[2]}:"#"===t[0]?this._hexToRgb(t.substring(1)):"rgb("===t.substr(0,4)?(e=r.exec(t.replace(/ /g,"")),{r:parseInt(e[1],10),g:parseInt(e[2],10),b:parseInt(e[3],10)}):{r:0,g:0,b:0}},colorToRGBA:function(t){return t=t||"black",Konva.Util._namedColorToRBA(t)||Konva.Util._hex3ColorToRGBA(t)||Konva.Util._hex6ColorToRGBA(t)||Konva.Util._rgbColorToRGBA(t)||Konva.Util._rgbaColorToRGBA(t)},_namedColorToRBA:function(t){var e=n[t.toLowerCase()];return e?{r:e[0],g:e[1],b:e[2],a:1}:null},_rgbColorToRGBA:function(t){if(0===t.indexOf("rgb(")){var e=(t=t.match(/rgb\(([^)]+)\)/)[1]).split(/ *, */).map(Number);return{r:e[0],g:e[1],b:e[2],a:1}}},_rgbaColorToRGBA:function(t){if(0===t.indexOf("rgba(")){var e=(t=t.match(/rgba\(([^)]+)\)/)[1]).split(/ *, */).map(Number);return{r:e[0],g:e[1],b:e[2],a:e[3]}}},_hex6ColorToRGBA:function(t){if("#"===t[0]&&7===t.length)return{r:parseInt(t.slice(1,3),16),g:parseInt(t.slice(3,5),16),b:parseInt(t.slice(5,7),16),a:1}},_hex3ColorToRGBA:function(t){if("#"===t[0]&&4===t.length)return{r:parseInt(t[1]+t[1],16),g:parseInt(t[2]+t[2],16),b:parseInt(t[3]+t[3],16),a:1}},_merge:function(t,e){var n=this._clone(e);for(var r in t)this._isObject(t[r])?n[r]=this._merge(t[r],n[r]):n[r]=t[r];return n},trimRight:function(t){return t.replace(/\s+$/,"")},trimLeft:function(t){return t.replace(/^\s+/,"")},haveIntersection:function(t,e){return!(e.x>t.x+t.width||e.x+e.width<t.x||e.y>t.y+t.height||e.y+e.height<t.y)},cloneObject:function(t){var e={};for(var n in t)this._isObject(t[n])?e[n]=this.cloneObject(t[n]):this._isArray(t[n])?e[n]=this.cloneArray(t[n]):e[n]=t[n];return e},cloneArray:function(t){return t.slice(0)},_degToRad:function(e){return e*t},_radToDeg:function(t){return t*e},_capitalize:function(t){return t.charAt(0).toUpperCase()+t.slice(1)},throw:function(t){throw new Error("Konva error: "+t)},error:function(t){console.error("Konva error: "+t)},warn:function(t){Konva.global.console&&console.warn&&Konva.showWarnings&&console.warn("Konva warning: "+t)},extend:function(t,e){function n(){this.constructor=t}n.prototype=e.prototype;var r=t.prototype;for(var o in t.prototype=new n,r)r.hasOwnProperty(o)&&(t.prototype[o]=r[o]);t.__super__=e.prototype,t.super=e},addMethods:function(t,e){var n;for(n in e)t.prototype[n]=e[n]},_getControlPoints:function(t,e,n,r,o,i,a){var l=Math.sqrt(Math.pow(n-t,2)+Math.pow(r-e,2)),s=Math.sqrt(Math.pow(o-n,2)+Math.pow(i-r,2)),c=a*l/(l+s),u=a*s/(l+s);return[n-c*(o-t),r-c*(i-e),n+u*(o-t),r+u*(i-e)]},_expandPoints:function(t,e){var n,r,o=t.length,i=[];for(n=2;n<o-2;n+=2)r=Konva.Util._getControlPoints(t[n-2],t[n-1],t[n],t[n+1],t[n+2],t[n+3],e),i.push(r[0]),i.push(r[1]),i.push(t[n]),i.push(t[n+1]),i.push(r[2]),i.push(r[3]);return i},_removeLastLetter:function(t){return t.substring(0,t.length-1)},each:function(t,e){for(var n in t)e(n,t[n])},_inRange:function(t,e,n){return e<=t&&t<n},_getProjectionToSegment:function(t,e,n,r,o,i){var a,l,s,c=(t-n)*(t-n)+(e-r)*(e-r);if(0==c)a=t,l=e,s=(o-n)*(o-n)+(i-r)*(i-r);else{var u=((o-t)*(n-t)+(i-e)*(r-e))/c;u<0?(a=t,l=e,s=(t-o)*(t-o)+(e-i)*(e-i)):u>1?(a=n,l=r,s=(n-o)*(n-o)+(r-i)*(r-i)):s=((a=t+u*(n-t))-o)*(a-o)+((l=e+u*(r-e))-i)*(l-i)}return[a,l,s]},_getProjectionToLine:function(t,e,n){var r=Konva.Util.cloneObject(t),o=Number.MAX_VALUE;return e.forEach(function(i,a){if(n||a!==e.length-1){var l=e[(a+1)%e.length],s=Konva.Util._getProjectionToSegment(i.x,i.y,l.x,l.y,t.x,t.y),c=s[0],u=s[1],d=s[2];d<o&&(r.x=c,r.y=u,o=d)}}),r},_prepareArrayForTween:function(t,e,n){var r,o=[],i=[];if(t.length>e.length){var a=e;e=t,t=a}for(r=0;r<t.length;r+=2)o.push({x:t[r],y:t[r+1]});for(r=0;r<e.length;r+=2)i.push({x:e[r],y:e[r+1]});var l=[];return i.forEach(function(t){var e=Konva.Util._getProjectionToLine(t,o,n);l.push(e.x),l.push(e.y)}),l},_prepareToStringify:function(t){var e;for(var n in t.visitedByCircularReferenceRemoval=!0,t)if(t.hasOwnProperty(n)&&t[n]&&"object"==typeof t[n])if(e=Object.getOwnPropertyDescriptor(t,n),t[n].visitedByCircularReferenceRemoval||Konva.Util._isElement(t[n])){if(!e.configurable)return null;delete t[n]}else if(null===Konva.Util._prepareToStringify(t[n])){if(!e.configurable)return null;delete t[n]}return delete t.visitedByCircularReferenceRemoval,t}}}(),function(){"use strict";var t;Konva.Canvas=function(t){this.init(t)},Konva.Canvas.prototype={init:function(e){var n=(e||{}).pixelRatio||Konva.pixelRatio||function(){if(t)return t;var e=Konva.Util.createCanvasElement().getContext("2d");return t=(Konva.window.devicePixelRatio||1)/(e.webkitBackingStorePixelRatio||e.mozBackingStorePixelRatio||e.msBackingStorePixelRatio||e.oBackingStorePixelRatio||e.backingStorePixelRatio||1)}();this.pixelRatio=n,this._canvas=Konva.Util.createCanvasElement(),this._canvas.style.padding=0,this._canvas.style.margin=0,this._canvas.style.border=0,this._canvas.style.background="transparent",this._canvas.style.position="absolute",this._canvas.style.top=0,this._canvas.style.left=0},getContext:function(){return this.context},getPixelRatio:function(){return this.pixelRatio},setPixelRatio:function(t){var e=this.pixelRatio;this.pixelRatio=t,this.setSize(this.getWidth()/e,this.getHeight()/e)},setWidth:function(t){this.width=this._canvas.width=t*this.pixelRatio,this._canvas.style.width=t+"px";var e=this.pixelRatio;this.getContext()._context.scale(e,e)},setHeight:function(t){this.height=this._canvas.height=t*this.pixelRatio,this._canvas.style.height=t+"px";var e=this.pixelRatio;this.getContext()._context.scale(e,e)},getWidth:function(){return this.width},getHeight:function(){return this.height},setSize:function(t,e){this.setWidth(t),this.setHeight(e)},toDataURL:function(t,e){try{return this._canvas.toDataURL(t,e)}catch(t){try{return this._canvas.toDataURL()}catch(t){return Konva.Util.warn("Unable to get data URL. "+t.message),""}}}},Konva.SceneCanvas=function(t){var e=t||{},n=e.width||0,r=e.height||0;Konva.Canvas.call(this,e),this.context=new Konva.SceneContext(this),this.setSize(n,r)},Konva.Util.extend(Konva.SceneCanvas,Konva.Canvas),Konva.HitCanvas=function(t){var e=t||{},n=e.width||0,r=e.height||0;Konva.Canvas.call(this,e),this.context=new Konva.HitContext(this),this.setSize(n,r),this.hitCanvas=!0},Konva.Util.extend(Konva.HitCanvas,Konva.Canvas)}(),function(){"use strict";var t=["arc","arcTo","beginPath","bezierCurveTo","clearRect","clip","closePath","createLinearGradient","createPattern","createRadialGradient","drawImage","fill","fillText","getImageData","createImageData","lineTo","moveTo","putImageData","quadraticCurveTo","rect","restore","rotate","save","scale","setLineDash","setTransform","stroke","strokeText","transform","translate"];Konva.Context=function(t){this.init(t)},Konva.Context.prototype={init:function(t){this.canvas=t,this._context=t._canvas.getContext("2d"),Konva.enableTrace&&(this.traceArr=[],this._enableTrace())},fillShape:function(t){t.getFillEnabled()&&this._fill(t)},strokeShape:function(t){t.getStrokeEnabled()&&this._stroke(t)},fillStrokeShape:function(t){t.getFillEnabled()&&this._fill(t),t.getStrokeEnabled()&&this._stroke(t)},getTrace:function(t){var e,n,r,o,i=this.traceArr,a=i.length,l="";for(e=0;e<a;e++)(r=(n=i[e]).method)?(o=n.args,l+=r,t?l+="()":Konva.Util._isArray(o[0])?l+="(["+o.join(",")+"])":l+="("+o.join(",")+")"):(l+=n.property,t||(l+="="+n.val)),l+=";";return l},clearTrace:function(){this.traceArr=[]},_trace:function(t){var e=this.traceArr;e.push(t),e.length>=Konva.traceArrMax&&e.shift()},reset:function(){var t=this.getCanvas().getPixelRatio();this.setTransform(1*t,0,0,1*t,0,0)},getCanvas:function(){return this.canvas},clear:function(t){var e=this.getCanvas();t?this.clearRect(t.x||0,t.y||0,t.width||0,t.height||0):this.clearRect(0,0,e.getWidth()/e.pixelRatio,e.getHeight()/e.pixelRatio)},_applyLineCap:function(t){var e=t.getLineCap();e&&this.setAttr("lineCap",e)},_applyOpacity:function(t){var e=t.getAbsoluteOpacity();1!==e&&this.setAttr("globalAlpha",e)},_applyLineJoin:function(t){var e=t.getLineJoin();e&&this.setAttr("lineJoin",e)},setAttr:function(t,e){this._context[t]=e},arc:function(){var t=arguments;this._context.arc(t[0],t[1],t[2],t[3],t[4],t[5])},beginPath:function(){this._context.beginPath()},bezierCurveTo:function(){var t=arguments;this._context.bezierCurveTo(t[0],t[1],t[2],t[3],t[4],t[5])},clearRect:function(){var t=arguments;this._context.clearRect(t[0],t[1],t[2],t[3])},clip:function(){this._context.clip()},closePath:function(){this._context.closePath()},createImageData:function(){var t=arguments;return 2===t.length?this._context.createImageData(t[0],t[1]):1===t.length?this._context.createImageData(t[0]):void 0},createLinearGradient:function(){var t=arguments;return this._context.createLinearGradient(t[0],t[1],t[2],t[3])},createPattern:function(){var t=arguments;return this._context.createPattern(t[0],t[1])},createRadialGradient:function(){var t=arguments;return this._context.createRadialGradient(t[0],t[1],t[2],t[3],t[4],t[5])},drawImage:function(){var t=arguments,e=this._context;3===t.length?e.drawImage(t[0],t[1],t[2]):5===t.length?e.drawImage(t[0],t[1],t[2],t[3],t[4]):9===t.length&&e.drawImage(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8])},isPointInPath:function(t,e){return this._context.isPointInPath(t,e)},fill:function(){this._context.fill()},fillRect:function(t,e,n,r){this._context.fillRect(t,e,n,r)},strokeRect:function(t,e,n,r){this._context.strokeRect(t,e,n,r)},fillText:function(){var t=arguments;this._context.fillText(t[0],t[1],t[2])},measureText:function(t){return this._context.measureText(t)},getImageData:function(){var t=arguments;return this._context.getImageData(t[0],t[1],t[2],t[3])},lineTo:function(){var t=arguments;this._context.lineTo(t[0],t[1])},moveTo:function(){var t=arguments;this._context.moveTo(t[0],t[1])},rect:function(){var t=arguments;this._context.rect(t[0],t[1],t[2],t[3])},putImageData:function(){var t=arguments;this._context.putImageData(t[0],t[1],t[2])},quadraticCurveTo:function(){var t=arguments;this._context.quadraticCurveTo(t[0],t[1],t[2],t[3])},restore:function(){this._context.restore()},rotate:function(){var t=arguments;this._context.rotate(t[0])},save:function(){this._context.save()},scale:function(){var t=arguments;this._context.scale(t[0],t[1])},setLineDash:function(){var t=arguments,e=this._context;this._context.setLineDash?e.setLineDash(t[0]):"mozDash"in e?e.mozDash=t[0]:"webkitLineDash"in e&&(e.webkitLineDash=t[0])},getLineDash:function(){return this._context.getLineDash()},setTransform:function(){var t=arguments;this._context.setTransform(t[0],t[1],t[2],t[3],t[4],t[5])},stroke:function(){this._context.stroke()},strokeText:function(){var t=arguments;this._context.strokeText(t[0],t[1],t[2])},transform:function(){var t=arguments;this._context.transform(t[0],t[1],t[2],t[3],t[4],t[5])},translate:function(){var t=arguments;this._context.translate(t[0],t[1])},_enableTrace:function(){var e,n,r=this,o=t.length,i=Konva.Util._simplifyArray,a=this.setAttr,l=function(t){var e,o=r[t];r[t]=function(){return n=i(Array.prototype.slice.call(arguments,0)),e=o.apply(r,arguments),r._trace({method:t,args:n}),e}};for(e=0;e<o;e++)l(t[e]);r.setAttr=function(){a.apply(r,arguments);var t=arguments[0],e=arguments[1];"shadowOffsetX"!==t&&"shadowOffsetY"!==t&&"shadowBlur"!==t||(e/=this.canvas.getPixelRatio()),r._trace({property:t,val:e})}}},["fillStyle","strokeStyle","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","lineCap","lineDashOffset","lineJoin","lineWidth","miterLimit","font","textAlign","textBaseline","globalAlpha","globalCompositeOperation"].forEach(function(t){Object.defineProperty(Konva.Context.prototype,t,{get:function(){return this._context[t]},set:function(e){this._context[t]=e}})}),Konva.SceneContext=function(t){Konva.Context.call(this,t)},Konva.SceneContext.prototype={_fillColor:function(t){var e=t.fill();this.setAttr("fillStyle",e),t._fillFunc(this)},_fillPattern:function(t){var e=t.getFillPatternX(),n=t.getFillPatternY(),r=t.getFillPatternScale(),o=Konva.getAngle(t.getFillPatternRotation()),i=t.getFillPatternOffset();(e||n)&&this.translate(e||0,n||0),o&&this.rotate(o),r&&this.scale(r.x,r.y),i&&this.translate(-1*i.x,-1*i.y),this.setAttr("fillStyle",this.createPattern(t.getFillPatternImage(),t.getFillPatternRepeat()||"repeat")),this.fill()},_fillLinearGradient:function(t){var e=t.getFillLinearGradientStartPoint(),n=t.getFillLinearGradientEndPoint(),r=t.getFillLinearGradientColorStops(),o=this.createLinearGradient(e.x,e.y,n.x,n.y);if(r){for(var i=0;i<r.length;i+=2)o.addColorStop(r[i],r[i+1]);this.setAttr("fillStyle",o),t._fillFunc(this)}},_fillRadialGradient:function(t){for(var e=t.getFillRadialGradientStartPoint(),n=t.getFillRadialGradientEndPoint(),r=t.getFillRadialGradientStartRadius(),o=t.getFillRadialGradientEndRadius(),i=t.getFillRadialGradientColorStops(),a=this.createRadialGradient(e.x,e.y,r,n.x,n.y,o),l=0;l<i.length;l+=2)a.addColorStop(i[l],i[l+1]);this.setAttr("fillStyle",a),this.fill()},_fill:function(t){var e=t.fill(),n=t.getFillPriority();if(e&&"color"===n)this._fillColor(t);else{var r=t.getFillPatternImage();if(r&&"pattern"===n)this._fillPattern(t);else{var o=t.getFillLinearGradientColorStops();if(o&&"linear-gradient"===n)this._fillLinearGradient(t);else{var i=t.getFillRadialGradientColorStops();i&&"radial-gradient"===n?this._fillRadialGradient(t):e?this._fillColor(t):r?this._fillPattern(t):o?this._fillLinearGradient(t):i&&this._fillRadialGradient(t)}}}},_strokeLinearGradient:function(t){var e=t.getStrokeLinearGradientStartPoint(),n=t.getStrokeLinearGradientEndPoint(),r=t.getStrokeLinearGradientColorStops(),o=this.createLinearGradient(e.x,e.y,n.x,n.y);if(r){for(var i=0;i<r.length;i+=2)o.addColorStop(r[i],r[i+1]);this.setAttr("strokeStyle",o)}},_stroke:function(t){var e=t.dash(),n=t.getStrokeScaleEnabled()||t instanceof Konva.Text;if(t.hasStroke()){if(!n){this.save();var r=this.getCanvas().getPixelRatio();this.setTransform(r,0,0,r,0,0)}this._applyLineCap(t),e&&t.dashEnabled()&&(this.setLineDash(e),this.setAttr("lineDashOffset",t.dashOffset())),this.setAttr("lineWidth",t.strokeWidth()),t.getShadowForStrokeEnabled()||this.setAttr("shadowColor","rgba(0,0,0,0)"),t.getStrokeLinearGradientColorStops()?this._strokeLinearGradient(t):this.setAttr("strokeStyle",t.stroke()),t._strokeFunc(this),n||this.restore()}},_applyShadow:function(t){var e=Konva.Util,n=e.get(t.getShadowRGBA(),"black"),r=e.get(t.getShadowBlur(),5),o=e.get(t.getShadowOffset(),{x:0,y:0}),i=t.getAbsoluteScale(),a=this.canvas.getPixelRatio(),l=i.x*a,s=i.y*a;this.setAttr("shadowColor",n),this.setAttr("shadowBlur",r*Math.min(Math.abs(l),Math.abs(s))),this.setAttr("shadowOffsetX",o.x*l),this.setAttr("shadowOffsetY",o.y*s)},_applyGlobalCompositeOperation:function(t){var e=t.getGlobalCompositeOperation();"source-over"!==e&&this.setAttr("globalCompositeOperation",e)}},Konva.Util.extend(Konva.SceneContext,Konva.Context),Konva.HitContext=function(t){Konva.Context.call(this,t)},Konva.HitContext.prototype={_fill:function(t){this.save(),this.setAttr("fillStyle",t.colorKey),t._fillFuncHit(this),this.restore()},_stroke:function(t){if(t.hasStroke()&&t.strokeHitEnabled()){var e=t.getStrokeScaleEnabled()||t instanceof Konva.Text;e||(this.save(),this.setTransform(1,0,0,1,0,0)),this._applyLineCap(t),this.setAttr("lineWidth",t.strokeWidth()),this.setAttr("strokeStyle",t.colorKey),t._strokeFuncHit(this),e||this.restore()}}},Konva.Util.extend(Konva.HitContext,Konva.Context)}(),function(){"use strict";Konva.Factory={addGetterSetter:function(t,e,n,r,o){this.addGetter(t,e,n),this.addSetter(t,e,r,o),this.addOverloadedGetterSetter(t,e)},addGetter:function(t,e,n){var r="get"+Konva.Util._capitalize(e);t.prototype[r]=function(){var t=this.attrs[e];return void 0===t?n:t}},addSetter:function(t,e,n,r){var o="set"+Konva.Util._capitalize(e);t.prototype[o]=function(t){return n&&null!=t&&(t=n.call(this,t,e)),this._setAttr(e,t),r&&r.call(this),this}},addComponentsGetterSetter:function(t,e,n,r,o){var i,a,l=n.length,s=Konva.Util._capitalize,c="get"+s(e),u="set"+s(e);t.prototype[c]=function(){var t={};for(i=0;i<l;i++)t[a=n[i]]=this.getAttr(e+s(a));return t},t.prototype[u]=function(t){var n,i=this.attrs[e];for(n in r&&(t=r.call(this,t)),t)t.hasOwnProperty(n)&&this._setAttr(e+s(n),t[n]);return this._fireChangeEvent(e,i,t),o&&o.call(this),this},this.addOverloadedGetterSetter(t,e)},addOverloadedGetterSetter:function(t,e){var n=Konva.Util._capitalize(e),r="set"+n,o="get"+n;t.prototype[e]=function(){return arguments.length?(this[r](arguments[0]),this):this[o]()}},addDeprecatedGetterSetter:function(t,e,n,r){Konva.Util.error("Adding deprecated "+e);var o="get"+Konva.Util._capitalize(e),i=e+" property is deprecated and will be removed soon. Look at Konva change log for more information.";t.prototype[o]=function(){Konva.Util.error(i);var t=this.attrs[e];return void 0===t?n:t},this.addSetter(t,e,r,function(){Konva.Util.error(i)}),this.addOverloadedGetterSetter(t,e)},backCompat:function(t,e){Konva.Util.each(e,function(e,n){var r=t.prototype[n],o="get"+Konva.Util._capitalize(e),i="set"+Konva.Util._capitalize(e);function a(){r.apply(this,arguments),Konva.Util.error('"'+e+'" method is deprecated and will be removed soon. Use ""'+n+'" instead.')}t.prototype[e]=a,t.prototype[o]=a,t.prototype[i]=a})},afterSetFilter:function(){this._filterUpToDate=!1}},Konva.Validators={RGBComponent:function(t){return t>255?255:t<0?0:Math.round(t)},alphaComponent:function(t){return t>1?1:t<1e-4?1e-4:t},_formatValue:function(t){return Konva.Util._isString(t)?'"'+t+'"':"[object Number]"===Object.prototype.toString.call(t)?t:Konva.Util._isBoolean(t)?t:Object.prototype.toString.call(t)},getNumberValidator:function(){if(Konva.isUnminified)return function(t,e){return Konva.Util._isNumber(t)||Konva.Util.warn(Konva.Validators._formatValue(t)+' is a not valid value for "'+e+'" attribute. The value should be a number.'),t}},getNumberOrAutoValidator:function(){if(Konva.isUnminified)return function(t,e){return Konva.Util._isNumber(t)||"auto"===t||Konva.Util.warn(Konva.Validators._formatValue(t)+' is a not valid value for "'+e+'" attribute. The value should be a number or "auto".'),t}},getStringValidator:function(){if(Konva.isUnminified)return function(t,e){return Konva.Util._isString(t)||Konva.Util.warn(Konva.Validators._formatValue(t)+' is a not valid value for "'+e+'" attribute. The value should be a string.'),t}},getFunctionValidator:function(){if(Konva.isUnminified)return function(t,e){return Konva.Util._isFunction(t)||Konva.Util.warn(Konva.Validators._formatValue(t)+' is a not valid value for "'+e+'" attribute. The value should be a function.'),t}},getNumberArrayValidator:function(){if(Konva.isUnminified)return function(t,e){return Konva.Util._isArray(t)?t.forEach(function(t){Konva.Util._isNumber(t)||Konva.Util.warn('"'+e+'" attribute has non numeric element '+t+". Make sure that all elements are numbers.")}):Konva.Util.warn(Konva.Validators._formatValue(t)+' is a not valid value for "'+e+'" attribute. The value should be a array of numbers.'),t}},getBooleanValidator:function(){if(Konva.isUnminified)return function(t,e){return!0===t||!1===t||Konva.Util.warn(Konva.Validators._formatValue(t)+' is a not valid value for "'+e+'" attribute. The value should be a boolean.'),t}}}}(),function(t){"use strict";var e="Shape",n=["id"],r=["xChange.konva","yChange.konva","scaleXChange.konva","scaleYChange.konva","skewXChange.konva","skewYChange.konva","rotationChange.konva","offsetXChange.konva","offsetYChange.konva","transformsEnabledChange.konva"].join(" "),o=["scaleXChange.konva","scaleYChange.konva"].join(" ");t.Node=function(t){this._init(t)},t.Util.addMethods(t.Node,{_init:function(e){this._id=t.idCounter++,this.eventListeners={},this.attrs={},this._cache={},this._filterUpToDate=!1,this._isUnderCache=!1,this.setAttrs(e),this.on(r,function(){this._clearCache("transform"),this._clearSelfAndDescendantCache("absoluteTransform")}),this.on(o,function(){this._clearSelfAndDescendantCache("absoluteScale")}),this.on("visibleChange.konva",function(){this._clearSelfAndDescendantCache("visible")}),this.on("listeningChange.konva",function(){this._clearSelfAndDescendantCache("listening")}),this.on("opacityChange.konva",function(){this._clearSelfAndDescendantCache("absoluteOpacity")})},_clearCache:function(t){t?delete this._cache[t]:this._cache={}},_getCache:function(t,e){return void 0===this._cache[t]&&(this._cache[t]=e.call(this)),this._cache[t]},_clearSelfAndDescendantCache:function(t){this._clearCache(t),this._cache.canvas||this.children&&this.getChildren().each(function(e){e._clearSelfAndDescendantCache(t)})},clearCache:function(){return delete this._cache.canvas,this._filterUpToDate=!1,this._clearSelfAndDescendantCache(),this},cache:function(e){var n=e||{},r={};void 0!==n.x&&void 0!==n.y&&void 0!==n.width&&void 0!==n.height||(r=this.getClientRect({skipTransform:!0,relativeTo:this.getParent()}));var o=n.width||r.width,i=n.height||r.height,a=n.pixelRatio,l=void 0===n.x?r.x:n.x,s=void 0===n.y?r.y:n.y,c=n.offset||0,u=n.drawBorder||!1;if(o&&i){o+=2*c,i+=2*c,l-=c,s-=c;var d=new t.SceneCanvas({pixelRatio:a,width:o,height:i}),f=new t.SceneCanvas({pixelRatio:a,width:o,height:i}),h=new t.HitCanvas({pixelRatio:1,width:o,height:i}),p=d.getContext(),v=h.getContext();return h.isCache=!0,this.clearCache(),p.save(),v.save(),p.translate(-l,-s),v.translate(-l,-s),this._isUnderCache=!0,this._clearSelfAndDescendantCache("absoluteOpacity"),this._clearSelfAndDescendantCache("absoluteScale"),this.drawScene(d,this,!0),this.drawHit(h,this,!0),this._isUnderCache=!1,p.restore(),v.restore(),u&&(p.save(),p.beginPath(),p.rect(0,0,o,i),p.closePath(),p.setAttr("strokeStyle","red"),p.setAttr("lineWidth",5),p.stroke(),p.restore()),this._cache.canvas={scene:d,filter:f,hit:h,x:l,y:s},this}t.Util.error("Can not cache the node. Width or height of the node equals 0. Caching is skipped.")},getClientRect:function(){throw new Error('abstract "getClientRect" method call')},_transformedRect:function(t,e){var n,r,o,i,a=[{x:t.x,y:t.y},{x:t.x+t.width,y:t.y},{x:t.x+t.width,y:t.y+t.height},{x:t.x,y:t.y+t.height}],l=this.getAbsoluteTransform(e);return a.forEach(function(t){var e=l.point(t);void 0===n&&(n=o=e.x,r=i=e.y),n=Math.min(n,e.x),r=Math.min(r,e.y),o=Math.max(o,e.x),i=Math.max(i,e.y)}),{x:n,y:r,width:o-n,height:i-r}},_drawCachedSceneCanvas:function(t){t.save(),t._applyOpacity(this),t._applyGlobalCompositeOperation(this),t.translate(this._cache.canvas.x,this._cache.canvas.y);var e=this._getCachedSceneCanvas(),n=e.pixelRatio;t.drawImage(e._canvas,0,0,e.width/n,e.height/n),t.restore()},_drawCachedHitCanvas:function(t){var e=this._cache.canvas.hit;t.save(),t.translate(this._cache.canvas.x,this._cache.canvas.y),t.drawImage(e._canvas,0,0),t.restore()},_getCachedSceneCanvas:function(){var e,n,r,o,i=this.filters(),a=this._cache.canvas,l=a.scene,s=a.filter,c=s.getContext();if(i){if(!this._filterUpToDate){var u=l.pixelRatio;try{for(e=i.length,c.clear(),c.drawImage(l._canvas,0,0,l.getWidth()/u,l.getHeight()/u),n=c.getImageData(0,0,s.getWidth(),s.getHeight()),r=0;r<e;r++)"function"==typeof(o=i[r])?(o.call(this,n),c.putImageData(n,0,0)):t.Util.error("Filter should be type of function, but got "+typeof o+" insted. Please check correct filters")}catch(e){t.Util.error("Unable to apply filter. "+e.message)}this._filterUpToDate=!0}return s}return l},on:function(t,e){if(3===arguments.length)return this._delegate.apply(this,arguments);var n,r,o,i,a=t.split(" "),l=a.length;for(n=0;n<l;n++)o=(r=a[n].split("."))[0],i=r[1]||"",this.eventListeners[o]||(this.eventListeners[o]=[]),this.eventListeners[o].push({name:i,handler:e});return this},off:function(t,e){var n,r,o,i,a,l=(t||"").split(" "),s=l.length;if(!t)for(r in this.eventListeners)this._off(r);for(n=0;n<s;n++)if(i=(o=l[n].split("."))[0],a=o[1],i)this.eventListeners[i]&&this._off(i,a,e);else for(r in this.eventListeners)this._off(r,a,e);return this},dispatchEvent:function(t){var e={target:this,type:t.type,evt:t};return this.fire(t.type,e),this},addEventListener:function(t,e){return this.on(t,function(t){e.call(this,t.evt)}),this},removeEventListener:function(t){return this.off(t),this},_delegate:function(e,n,r){var o=this;this.on(e,function(e){for(var i=e.target.findAncestors(n,!0,o),a=0;a<i.length;a++)(e=t.Util.cloneObject(e)).currentTarget=i[a],r.call(i[a],e)})},remove:function(){var t=this.getParent();return t&&t.children&&(t.children.splice(this.index,1),t._setChildrenIndices(),delete this.parent),this._clearSelfAndDescendantCache("stage"),this._clearSelfAndDescendantCache("absoluteTransform"),this._clearSelfAndDescendantCache("visible"),this._clearSelfAndDescendantCache("listening"),this._clearSelfAndDescendantCache("absoluteOpacity"),this},destroy:function(){t._removeId(this.getId());for(var e=(this.getName()||"").split(/\s/g),n=0;n<e.length;n++){var r=e[n];t._removeName(r,this._id)}return this.remove(),this},getAttr:function(e){var n="get"+t.Util._capitalize(e);return t.Util._isFunction(this[n])?this[n]():this.attrs[e]},getAncestors:function(){for(var e=this.getParent(),n=new t.Collection;e;)n.push(e),e=e.getParent();return n},getAttrs:function(){return this.attrs||{}},setAttrs:function(e){var n,r;if(!e)return this;for(n in e)"children"!==n&&(r="set"+t.Util._capitalize(n),t.Util._isFunction(this[r])?this[r](e[n]):this._setAttr(n,e[n]));return this},isListening:function(){return this._getCache("listening",this._isListening)},_isListening:function(){var t=this.getListening(),e=this.getParent();return"inherit"===t?!e||e.isListening():t},isVisible:function(){return this._getCache("visible",this._isVisible)},_isVisible:function(t){var e=this.getVisible(),n=this.getParent();return t===n&&"inherit"===e||(t===n?e:"inherit"===e?!n||n._isVisible(t):e)},shouldDrawHit:function(){var t=this.getLayer();return!t&&this.isListening()&&this.isVisible()||t&&t.hitGraphEnabled()&&this.isListening()&&this.isVisible()},show:function(){return this.setVisible(!0),this},hide:function(){return this.setVisible(!1),this},getZIndex:function(){return this.index||0},getAbsoluteZIndex:function(){var t,n,r,o,i=this.getDepth(),a=this,l=0;return"Stage"!==a.nodeType&&function s(c){for(t=[],n=c.length,r=0;r<n;r++)o=c[r],l++,o.nodeType!==e&&(t=t.concat(o.getChildren().toArray())),o._id===a._id&&(r=n);t.length>0&&t[0].getDepth()<=i&&s(t)}(a.getStage().getChildren()),l},getDepth:function(){for(var t=0,e=this.parent;e;)t++,e=e.parent;return t},setPosition:function(t){return this.setX(t.x),this.setY(t.y),this},getPosition:function(){return{x:this.getX(),y:this.getY()}},getAbsolutePosition:function(e){var n=this.getAbsoluteTransform(e).getMatrix(),r=new t.Transform,o=this.offset();return r.m=n.slice(),r.translate(o.x,o.y),r.getTranslation()},setAbsolutePosition:function(t){var e,n=this._clearTransform();return this.attrs.x=n.x,this.attrs.y=n.y,delete n.x,delete n.y,(e=this.getAbsoluteTransform()).invert(),e.translate(t.x,t.y),t={x:this.attrs.x+e.getTranslation().x,y:this.attrs.y+e.getTranslation().y},this.setPosition({x:t.x,y:t.y}),this._setTransform(n),this},_setTransform:function(t){var e;for(e in t)this.attrs[e]=t[e];this._clearCache("transform"),this._clearSelfAndDescendantCache("absoluteTransform")},_clearTransform:function(){var t={x:this.getX(),y:this.getY(),rotation:this.getRotation(),scaleX:this.getScaleX(),scaleY:this.getScaleY(),offsetX:this.getOffsetX(),offsetY:this.getOffsetY(),skewX:this.getSkewX(),skewY:this.getSkewY()};return this.attrs.x=0,this.attrs.y=0,this.attrs.rotation=0,this.attrs.scaleX=1,this.attrs.scaleY=1,this.attrs.offsetX=0,this.attrs.offsetY=0,this.attrs.skewX=0,this.attrs.skewY=0,this._clearCache("transform"),this._clearSelfAndDescendantCache("absoluteTransform"),t},move:function(t){var e=t.x,n=t.y,r=this.getX(),o=this.getY();return void 0!==e&&(r+=e),void 0!==n&&(o+=n),this.setPosition({x:r,y:o}),this},_eachAncestorReverse:function(t,e){var n,r,o=[],i=this.getParent();if(e&&e._id===this._id)t(this);else{for(o.unshift(this);i&&(!e||i._id!==e._id);)o.unshift(i),i=i.parent;for(n=o.length,r=0;r<n;r++)t(o[r])}},rotate:function(t){return this.setRotation(this.getRotation()+t),this},moveToTop:function(){if(!this.parent)return t.Util.warn("Node has no parent. moveToTop function is ignored."),!1;var e=this.index;return this.parent.children.splice(e,1),this.parent.children.push(this),this.parent._setChildrenIndices(),!0},moveUp:function(){if(!this.parent)return t.Util.warn("Node has no parent. moveUp function is ignored."),!1;var e=this.index;return e<this.parent.getChildren().length-1&&(this.parent.children.splice(e,1),this.parent.children.splice(e+1,0,this),this.parent._setChildrenIndices(),!0)},moveDown:function(){if(!this.parent)return t.Util.warn("Node has no parent. moveDown function is ignored."),!1;var e=this.index;return e>0&&(this.parent.children.splice(e,1),this.parent.children.splice(e-1,0,this),this.parent._setChildrenIndices(),!0)},moveToBottom:function(){if(!this.parent)return t.Util.warn("Node has no parent. moveToBottom function is ignored."),!1;var e=this.index;return e>0&&(this.parent.children.splice(e,1),this.parent.children.unshift(this),this.parent._setChildrenIndices(),!0)},setZIndex:function(e){if(!this.parent)return t.Util.warn("Node has no parent. zIndex parameter is ignored."),!1;var n=this.index;return this.parent.children.splice(n,1),this.parent.children.splice(e,0,this),this.parent._setChildrenIndices(),this},getAbsoluteOpacity:function(){return this._getCache("absoluteOpacity",this._getAbsoluteOpacity)},_getAbsoluteOpacity:function(){var t=this.getOpacity(),e=this.getParent();return e&&!e._isUnderCache&&(t*=this.getParent().getAbsoluteOpacity()),t},moveTo:function(t){return this.getParent()!==t&&((this.__originalRemove||this.remove).call(this),t.add(this)),this},toObject:function(){var e,n,r,o,i={},a=this.getAttrs();for(e in i.attrs={},a)n=a[e],r="function"==typeof this[e]&&this[e],delete a[e],o=r?r.call(this):null,a[e]=n,o!==n&&(i.attrs[e]=n);return i.className=this.getClassName(),t.Util._prepareToStringify(i)},toJSON:function(){return JSON.stringify(this.toObject())},getParent:function(){return this.parent},findAncestors:function(t,e,n){var r=[];e&&this._isMatch(t)&&r.push(this);for(var o=this.parent;o;){if(o===n)return r;o._isMatch(t)&&r.push(o),o=o.parent}return r},findAncestor:function(t,e,n){return this.findAncestors(t,e,n)[0]},_isMatch:function(e){if(!e)return!1;var n,r,o=e.replace(/ /g,"").split(","),i=o.length;for(n=0;n<i;n++)if(r=o[n],t.Util.isValidSelector(r)||(t.Util.warn('Selector "'+r+'" is invalid. Allowed selectors examples are "#foo", ".bar" or "Group".'),t.Util.warn('If you have a custom shape with such className, please change it to start with upper letter like "Triangle".'),t.Util.warn("Konva is awesome, right?")),"#"===r.charAt(0)){if(this.id()===r.slice(1))return!0}else if("."===r.charAt(0)){if(this.hasName(r.slice(1)))return!0}else if(0!==this._get(r).length)return!0;return!1},getLayer:function(){var t=this.getParent();return t?t.getLayer():null},getStage:function(){return this._getCache("stage",this._getStage)},_getStage:function(){var t=this.getParent();return t?t.getStage():void 0},fire:function(t,e,n){return(e=e||{}).target=e.target||this,n?this._fireAndBubble(t,e):this._fire(t,e),this},getAbsoluteTransform:function(t){return t?this._getAbsoluteTransform(t):this._getCache("absoluteTransform",this._getAbsoluteTransform)},_getAbsoluteTransform:function(e){var n=new t.Transform;return this._eachAncestorReverse(function(t){var e=t.transformsEnabled();"all"===e?n.multiply(t.getTransform()):"position"===e&&n.translate(t.getX()-t.getOffsetX(),t.getY()-t.getOffsetY())},e),n},getAbsoluteScale:function(t){return t?this._getAbsoluteScale(t):this._getCache("absoluteScale",this._getAbsoluteScale)},_getAbsoluteScale:function(t){for(var e=this;e;)e._isUnderCache&&(t=e),e=e.getParent();var n=1,r=1;return this._eachAncestorReverse(function(t){n*=t.scaleX(),r*=t.scaleY()},t),{x:n,y:r}},getTransform:function(){return this._getCache("transform",this._getTransform)},_getTransform:function(){var e=new t.Transform,n=this.getX(),r=this.getY(),o=t.getAngle(this.getRotation()),i=this.getScaleX(),a=this.getScaleY(),l=this.getSkewX(),s=this.getSkewY(),c=this.getOffsetX(),u=this.getOffsetY();return 0===n&&0===r||e.translate(n,r),0!==o&&e.rotate(o),0===l&&0===s||e.skew(l,s),1===i&&1===a||e.scale(i,a),0===c&&0===u||e.translate(-1*c,-1*u),e},clone:function(e){var r,o,i,a,l,s=t.Util.cloneObject(this.attrs);for(var c in n){delete s[n[c]]}for(r in e)s[r]=e[r];var u=new this.constructor(s);for(r in this.eventListeners)for(i=(o=this.eventListeners[r]).length,a=0;a<i;a++)(l=o[a]).name.indexOf("konva")<0&&(u.eventListeners[r]||(u.eventListeners[r]=[]),u.eventListeners[r].push(l));return u},_toKonvaCanvas:function(e){e=e||{};var n=this.getClientRect(),r=this.getStage(),o=void 0!==e.x?e.x:n.x,i=void 0!==e.y?e.y:n.y,a=e.pixelRatio||1,l=new t.SceneCanvas({width:e.width||n.width||(r?r.getWidth():0),height:e.height||n.height||(r?r.getHeight():0),pixelRatio:a}),s=l.getContext();return s.save(),(o||i)&&s.translate(-1*o,-1*i),this.drawScene(l),s.restore(),l},toCanvas:function(t){return this._toKonvaCanvas(t)._canvas},toDataURL:function(t){var e=(t=t||{}).mimeType||null,n=t.quality||null,r=this._toKonvaCanvas(t).toDataURL(e,n);return t.callback&&t.callback(r),r},toImage:function(e){if(!e||!e.callback)throw"callback required for toImage method config argument";var n=e.callback;delete e.callback,t.Util._getImage(this.toDataURL(e),function(t){n(t)})},setSize:function(t){return this.setWidth(t.width),this.setHeight(t.height),this},getSize:function(){return{width:this.getWidth(),height:this.getHeight()}},getWidth:function(){return this.attrs.width||0},getHeight:function(){return this.attrs.height||0},getClassName:function(){return this.className||this.nodeType},getType:function(){return this.nodeType},getDragDistance:function(){return void 0!==this.attrs.dragDistance?this.attrs.dragDistance:this.parent?this.parent.getDragDistance():t.dragDistance},_get:function(t){return this.className===t||this.nodeType===t?[this]:[]},_off:function(t,e,n){var r,o,i,a=this.eventListeners[t];for(r=0;r<a.length;r++)if(o=a[r].name,i=a[r].handler,!("konva"===o&&"konva"!==e||e&&o!==e||n&&n!==i)){if(a.splice(r,1),0===a.length){delete this.eventListeners[t];break}r--}},_fireChangeEvent:function(t,e,n){this._fire(t+"Change",{oldVal:e,newVal:n})},setId:function(e){var n=this.getId();return t._removeId(n),t._addId(this,e),this._setAttr("id",e),this},setName:function(e){var n,r,o=(this.getName()||"").split(/\s/g),i=(e||"").split(/\s/g);for(r=0;r<o.length;r++)n=o[r],-1===i.indexOf(n)&&n&&t._removeName(n,this._id);for(r=0;r<i.length;r++)n=i[r],-1===o.indexOf(n)&&n&&t._addName(this,n);return this._setAttr("name",e),this},addName:function(t){if(!this.hasName(t)){var e=this.name(),n=e?e+" "+t:t;this.setName(n)}return this},hasName:function(t){return-1!==(this.name()||"").split(/\s/g).indexOf(t)},removeName:function(t){var e=(this.name()||"").split(/\s/g),n=e.indexOf(t);return-1!==n&&(e.splice(n,1),this.setName(e.join(" "))),this},setAttr:function(e,n){var r=this["set"+t.Util._capitalize(e)];return t.Util._isFunction(r)?r.call(this,n):this._setAttr(e,n),this},_setAttr:function(e,n){var r;(r=this.attrs[e])===n&&!t.Util.isObject(n)||(null==n?delete this.attrs[e]:this.attrs[e]=n,this._fireChangeEvent(e,r,n))},_setComponentAttr:function(t,e,n){var r;void 0!==n&&((r=this.attrs[t])||(this.attrs[t]=this.getAttr(t)),this.attrs[t][e]=n,this._fireChangeEvent(t,r,n))},_fireAndBubble:function(t,n,r){var o=!0;if(n&&this.nodeType===e&&(n.target=this),"mouseenter"===t&&r&&(this._id===r._id||this.isAncestorOf&&this.isAncestorOf(r))?o=!1:"mouseleave"===t&&r&&(this._id===r._id||this.isAncestorOf&&this.isAncestorOf(r))&&(o=!1),o){this._fire(t,n);var i=("mouseenter"===t||"mouseleave"===t)&&r&&r.isAncestorOf&&r.isAncestorOf(this)&&!r.isAncestorOf(this.parent);(n&&!n.cancelBubble||!n)&&this.parent&&this.parent.isListening()&&!i&&(r&&r.parent?this._fireAndBubble.call(this.parent,t,n,r.parent):this._fireAndBubble.call(this.parent,t,n))}},_fire:function(t,e){var n,r=this.eventListeners[t];if((e=e||{}).currentTarget=this,e.type=t,r)for(n=0;n<r.length;n++)r[n].handler.call(this,e)},draw:function(){return this.drawScene(),this.drawHit(),this}}),t.Node.create=function(e,n){return t.Util._isString(e)&&(e=JSON.parse(e)),this._createNode(e,n)},t.Node._createNode=function(e,n){var r,o,i,a=t.Node.prototype.getClassName.call(e),l=e.children;if(n&&(e.attrs.container=n),r=new t[a](e.attrs),l)for(o=l.length,i=0;i<o;i++)r.add(this._createNode(l[i]));return r},t.Factory.addOverloadedGetterSetter(t.Node,"position"),t.Factory.addGetterSetter(t.Node,"x",0,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Node,"y",0,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Node,"globalCompositeOperation","source-over",t.Validators.getStringValidator()),t.Factory.addGetterSetter(t.Node,"opacity",1,t.Validators.getNumberValidator()),t.Factory.addGetter(t.Node,"name"),t.Factory.addOverloadedGetterSetter(t.Node,"name"),t.Factory.addGetter(t.Node,"id"),t.Factory.addOverloadedGetterSetter(t.Node,"id"),t.Factory.addGetterSetter(t.Node,"rotation",0,t.Validators.getNumberValidator()),t.Factory.addComponentsGetterSetter(t.Node,"scale",["x","y"]),t.Factory.addGetterSetter(t.Node,"scaleX",1,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Node,"scaleY",1,t.Validators.getNumberValidator()),t.Factory.addComponentsGetterSetter(t.Node,"skew",["x","y"]),t.Factory.addGetterSetter(t.Node,"skewX",0,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Node,"skewY",0,t.Validators.getNumberValidator()),t.Factory.addComponentsGetterSetter(t.Node,"offset",["x","y"]),t.Factory.addGetterSetter(t.Node,"offsetX",0,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Node,"offsetY",0,t.Validators.getNumberValidator()),t.Factory.addSetter(t.Node,"dragDistance",t.Validators.getNumberValidator()),t.Factory.addOverloadedGetterSetter(t.Node,"dragDistance"),t.Factory.addSetter(t.Node,"width",t.Validators.getNumberValidator()),t.Factory.addOverloadedGetterSetter(t.Node,"width"),t.Factory.addSetter(t.Node,"height",t.Validators.getNumberValidator()),t.Factory.addOverloadedGetterSetter(t.Node,"height"),t.Factory.addGetterSetter(t.Node,"listening","inherit",function(e){return!0===e||!1===e||"inherit"===e||t.Util.warn(e+' is a not valid value for "listening" attribute. The value may be true, false or "inherit".'),e}),t.Factory.addGetterSetter(t.Node,"preventDefault",!0,t.Validators.getBooleanValidator()),t.Factory.addGetterSetter(t.Node,"filters",null,function(t){return this._filterUpToDate=!1,t}),t.Factory.addGetterSetter(t.Node,"visible","inherit",function(e){return!0===e||!1===e||"inherit"===e||t.Util.warn(e+' is a not valid value for "visible" attribute. The value may be true, false or "inherit".'),e}),t.Factory.addGetterSetter(t.Node,"transformsEnabled","all",t.Validators.getStringValidator()),t.Factory.addOverloadedGetterSetter(t.Node,"size"),t.Factory.backCompat(t.Node,{rotateDeg:"rotate",setRotationDeg:"setRotation",getRotationDeg:"getRotation"}),t.Collection.mapMethods(t.Node)}(Konva),function(){"use strict";Konva.Filters.Grayscale=function(t){var e,n,r=t.data,o=r.length;for(e=0;e<o;e+=4)n=.34*r[e]+.5*r[e+1]+.16*r[e+2],r[e]=n,r[e+1]=n,r[e+2]=n}}(),function(t){"use strict";t.Filters.Brighten=function(t){var e,n=255*this.brightness(),r=t.data,o=r.length;for(e=0;e<o;e+=4)r[e]+=n,r[e+1]+=n,r[e+2]+=n},t.Factory.addGetterSetter(t.Node,"brightness",0,t.Validators.getNumberValidator(),t.Factory.afterSetFilter)}(Konva),function(){"use strict";Konva.Filters.Invert=function(t){var e,n=t.data,r=n.length;for(e=0;e<r;e+=4)n[e]=255-n[e],n[e+1]=255-n[e+1],n[e+2]=255-n[e+2]}}(),function(t){"use strict";function e(){this.r=0,this.g=0,this.b=0,this.a=0,this.next=null}var n=[512,512,456,512,328,456,335,512,405,328,271,456,388,335,292,512,454,405,364,328,298,271,496,456,420,388,360,335,312,292,273,512,482,454,428,405,383,364,345,328,312,298,284,271,259,496,475,456,437,420,404,388,374,360,347,335,323,312,302,292,282,273,265,512,497,482,468,454,441,428,417,405,394,383,373,364,354,345,337,328,320,312,305,298,291,284,278,271,265,259,507,496,485,475,465,456,446,437,428,420,412,404,396,388,381,374,367,360,354,347,341,335,329,323,318,312,307,302,297,292,287,282,278,273,269,265,261,512,505,497,489,482,475,468,461,454,447,441,435,428,422,417,411,405,399,394,389,383,378,373,368,364,359,354,350,345,341,337,332,328,324,320,316,312,309,305,301,298,294,291,287,284,281,278,274,271,268,265,262,259,257,507,501,496,491,485,480,475,470,465,460,456,451,446,442,437,433,428,424,420,416,412,408,404,400,396,392,388,385,381,377,374,370,367,363,360,357,354,350,347,344,341,338,335,332,329,326,323,320,318,315,312,310,307,304,302,299,297,294,292,289,287,285,282,280,278,275,273,271,269,267,265,263,261,259],r=[9,11,12,13,13,14,14,15,15,15,15,16,16,16,16,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24];t.Filters.Blur=function(t){var o=Math.round(this.blurRadius());o>0&&function(t,o){var i,a,l,s,c,u,d,f,h,p,v,y,g,m,b,_,x,w,S,C,T,F,O,P,E=t.data,j=t.width,I=t.height,k=o+o+1,L=j-1,M=I-1,N=o+1,D=N*(N+1)/2,K=new e,U=null,A=K,z=null,R=null,W=n[o],B=r[o];for(l=1;l<k;l++)A=A.next=new e,l===N&&(U=A);for(A.next=K,d=u=0,a=0;a<I;a++){for(_=x=w=S=f=h=p=v=0,y=N*(C=E[u]),g=N*(T=E[u+1]),m=N*(F=E[u+2]),b=N*(O=E[u+3]),f+=D*C,h+=D*T,p+=D*F,v+=D*O,A=K,l=0;l<N;l++)A.r=C,A.g=T,A.b=F,A.a=O,A=A.next;for(l=1;l<N;l++)s=u+((L<l?L:l)<<2),f+=(A.r=C=E[s])*(P=N-l),h+=(A.g=T=E[s+1])*P,p+=(A.b=F=E[s+2])*P,v+=(A.a=O=E[s+3])*P,_+=C,x+=T,w+=F,S+=O,A=A.next;for(z=K,R=U,i=0;i<j;i++)E[u+3]=O=v*W>>B,0!==O?(O=255/O,E[u]=(f*W>>B)*O,E[u+1]=(h*W>>B)*O,E[u+2]=(p*W>>B)*O):E[u]=E[u+1]=E[u+2]=0,f-=y,h-=g,p-=m,v-=b,y-=z.r,g-=z.g,m-=z.b,b-=z.a,s=d+((s=i+o+1)<L?s:L)<<2,f+=_+=z.r=E[s],h+=x+=z.g=E[s+1],p+=w+=z.b=E[s+2],v+=S+=z.a=E[s+3],z=z.next,y+=C=R.r,g+=T=R.g,m+=F=R.b,b+=O=R.a,_-=C,x-=T,w-=F,S-=O,R=R.next,u+=4;d+=j}for(i=0;i<j;i++){for(x=w=S=_=h=p=v=f=0,y=N*(C=E[u=i<<2]),g=N*(T=E[u+1]),m=N*(F=E[u+2]),b=N*(O=E[u+3]),f+=D*C,h+=D*T,p+=D*F,v+=D*O,A=K,l=0;l<N;l++)A.r=C,A.g=T,A.b=F,A.a=O,A=A.next;for(c=j,l=1;l<=o;l++)u=c+i<<2,f+=(A.r=C=E[u])*(P=N-l),h+=(A.g=T=E[u+1])*P,p+=(A.b=F=E[u+2])*P,v+=(A.a=O=E[u+3])*P,_+=C,x+=T,w+=F,S+=O,A=A.next,l<M&&(c+=j);for(u=i,z=K,R=U,a=0;a<I;a++)E[3+(s=u<<2)]=O=v*W>>B,O>0?(O=255/O,E[s]=(f*W>>B)*O,E[s+1]=(h*W>>B)*O,E[s+2]=(p*W>>B)*O):E[s]=E[s+1]=E[s+2]=0,f-=y,h-=g,p-=m,v-=b,y-=z.r,g-=z.g,m-=z.b,b-=z.a,s=i+((s=a+N)<M?s:M)*j<<2,f+=_+=z.r=E[s],h+=x+=z.g=E[s+1],p+=w+=z.b=E[s+2],v+=S+=z.a=E[s+3],z=z.next,y+=C=R.r,g+=T=R.g,m+=F=R.b,b+=O=R.a,_-=C,x-=T,w-=F,S-=O,R=R.next,u+=j}}(t,o)},t.Factory.addGetterSetter(t.Node,"blurRadius",0,t.Validators.getNumberValidator(),t.Factory.afterSetFilter)}(Konva),function(){"use strict";function t(t,e,n){var r=4*(n*t.width+e),o=[];return o.push(t.data[r++],t.data[r++],t.data[r++],t.data[r++]),o}function e(t,e){return Math.sqrt(Math.pow(t[0]-e[0],2)+Math.pow(t[1]-e[1],2)+Math.pow(t[2]-e[2],2))}Konva.Filters.Mask=function(n){var r=function(n,r){var o=t(n,0,0),i=t(n,n.width-1,0),a=t(n,0,n.height-1),l=t(n,n.width-1,n.height-1),s=r||10;if(e(o,i)<s&&e(i,l)<s&&e(l,a)<s&&e(a,o)<s){for(var c=function(t){for(var e=[0,0,0],n=0;n<t.length;n++)e[0]+=t[n][0],e[1]+=t[n][1],e[2]+=t[n][2];return e[0]/=t.length,e[1]/=t.length,e[2]/=t.length,e}([i,o,l,a]),u=[],d=0;d<n.width*n.height;d++){var f=e(c,[n.data[4*d],n.data[4*d+1],n.data[4*d+2]]);u[d]=f<s?0:255}return u}}(n,this.threshold());return r&&function(t,e){for(var n=0;n<t.width*t.height;n++)t.data[4*n+3]=e[n]}(n,r=function(t,e,n){for(var r=[1/9,1/9,1/9,1/9,1/9,1/9,1/9,1/9,1/9],o=Math.round(Math.sqrt(r.length)),i=Math.floor(o/2),a=[],l=0;l<n;l++)for(var s=0;s<e;s++){for(var c=l*e+s,u=0,d=0;d<o;d++)for(var f=0;f<o;f++){var h=l+d-i,p=s+f-i;if(h>=0&&h<n&&p>=0&&p<e){var v=r[d*o+f];u+=t[h*e+p]*v}}a[c]=u}return a}(r=function(t,e,n){for(var r=[1,1,1,1,1,1,1,1,1],o=Math.round(Math.sqrt(r.length)),i=Math.floor(o/2),a=[],l=0;l<n;l++)for(var s=0;s<e;s++){for(var c=l*e+s,u=0,d=0;d<o;d++)for(var f=0;f<o;f++){var h=l+d-i,p=s+f-i;if(h>=0&&h<n&&p>=0&&p<e){var v=r[d*o+f];u+=t[h*e+p]*v}}a[c]=u>=1020?255:0}return a}(r=function(t,e,n){for(var r=[1,1,1,1,0,1,1,1,1],o=Math.round(Math.sqrt(r.length)),i=Math.floor(o/2),a=[],l=0;l<n;l++)for(var s=0;s<e;s++){for(var c=l*e+s,u=0,d=0;d<o;d++)for(var f=0;f<o;f++){var h=l+d-i,p=s+f-i;if(h>=0&&h<n&&p>=0&&p<e){var v=r[d*o+f];u+=t[h*e+p]*v}}a[c]=2040===u?255:0}return a}(r,n.width,n.height),n.width,n.height),n.width,n.height)),n},Konva.Factory.addGetterSetter(Konva.Node,"threshold",0,Konva.Validators.getNumberValidator(),Konva.Factory.afterSetFilter)}(),function(){"use strict";Konva.Filters.RGB=function(t){var e,n,r=t.data,o=r.length,i=this.red(),a=this.green(),l=this.blue();for(e=0;e<o;e+=4)n=(.34*r[e]+.5*r[e+1]+.16*r[e+2])/255,r[e]=n*i,r[e+1]=n*a,r[e+2]=n*l,r[e+3]=r[e+3]},Konva.Factory.addGetterSetter(Konva.Node,"red",0,function(t){return this._filterUpToDate=!1,t>255?255:t<0?0:Math.round(t)}),Konva.Factory.addGetterSetter(Konva.Node,"green",0,function(t){return this._filterUpToDate=!1,t>255?255:t<0?0:Math.round(t)}),Konva.Factory.addGetterSetter(Konva.Node,"blue",0,Konva.Validators.RGBComponent,Konva.Factory.afterSetFilter)}(),function(){"use strict";Konva.Filters.RGBA=function(t){var e,n,r=t.data,o=r.length,i=this.red(),a=this.green(),l=this.blue(),s=this.alpha();for(e=0;e<o;e+=4)n=1-s,r[e]=i*s+r[e]*n,r[e+1]=a*s+r[e+1]*n,r[e+2]=l*s+r[e+2]*n},Konva.Factory.addGetterSetter(Konva.Node,"red",0,function(t){return this._filterUpToDate=!1,t>255?255:t<0?0:Math.round(t)}),Konva.Factory.addGetterSetter(Konva.Node,"green",0,function(t){return this._filterUpToDate=!1,t>255?255:t<0?0:Math.round(t)}),Konva.Factory.addGetterSetter(Konva.Node,"blue",0,Konva.Validators.RGBComponent,Konva.Factory.afterSetFilter),Konva.Factory.addGetterSetter(Konva.Node,"alpha",1,function(t){return this._filterUpToDate=!1,t>1?1:t<0?0:t})}(),function(){"use strict";Konva.Filters.HSV=function(t){var e,n,r,o,i,a=t.data,l=a.length,s=Math.pow(2,this.value()),c=Math.pow(2,this.saturation()),u=Math.abs(this.hue()+360)%360,d=s*c*Math.cos(u*Math.PI/180),f=s*c*Math.sin(u*Math.PI/180),h=.299*s+.701*d+.167*f,p=.587*s-.587*d+.33*f,v=.114*s-.114*d-.497*f,y=.299*s-.299*d-.328*f,g=.587*s+.413*d+.035*f,m=.114*s-.114*d+.293*f,b=.299*s-.3*d+1.25*f,_=.587*s-.586*d-1.05*f,x=.114*s+.886*d-.2*f;for(e=0;e<l;e+=4)n=a[e+0],r=a[e+1],o=a[e+2],i=a[e+3],a[e+0]=h*n+p*r+v*o,a[e+1]=y*n+g*r+m*o,a[e+2]=b*n+_*r+x*o,a[e+3]=i},Konva.Factory.addGetterSetter(Konva.Node,"hue",0,Konva.Validators.getNumberValidator(),Konva.Factory.afterSetFilter),Konva.Factory.addGetterSetter(Konva.Node,"saturation",0,Konva.Validators.getNumberValidator(),Konva.Factory.afterSetFilter),Konva.Factory.addGetterSetter(Konva.Node,"value",0,Konva.Validators.getNumberValidator(),Konva.Factory.afterSetFilter)}(),function(){"use strict";Konva.Factory.addGetterSetter(Konva.Node,"hue",0,Konva.Validators.getNumberValidator(),Konva.Factory.afterSetFilter),Konva.Factory.addGetterSetter(Konva.Node,"saturation",0,Konva.Validators.getNumberValidator(),Konva.Factory.afterSetFilter),Konva.Factory.addGetterSetter(Konva.Node,"luminance",0,Konva.Validators.getNumberValidator(),Konva.Factory.afterSetFilter),Konva.Filters.HSL=function(t){var e,n,r,o,i,a=t.data,l=a.length,s=Math.pow(2,this.saturation()),c=Math.abs(this.hue()+360)%360,u=127*this.luminance(),d=1*s*Math.cos(c*Math.PI/180),f=1*s*Math.sin(c*Math.PI/180),h=.299+.701*d+.167*f,p=.587-.587*d+.33*f,v=.114-.114*d-.497*f,y=.299-.299*d-.328*f,g=.587+.413*d+.035*f,m=.114-.114*d+.293*f,b=.299-.3*d+1.25*f,_=.587-.586*d-1.05*f,x=.114+.886*d-.2*f;for(e=0;e<l;e+=4)n=a[e+0],r=a[e+1],o=a[e+2],i=a[e+3],a[e+0]=h*n+p*r+v*o+u,a[e+1]=y*n+g*r+m*o+u,a[e+2]=b*n+_*r+x*o+u,a[e+3]=i}}(),function(){"use strict";Konva.Filters.Emboss=function(t){var e=10*this.embossStrength(),n=255*this.embossWhiteLevel(),r=this.embossDirection(),o=this.embossBlend(),i=0,a=0,l=t.data,s=t.width,c=t.height,u=4*s,d=c;switch(r){case"top-left":i=-1,a=-1;break;case"top":i=-1,a=0;break;case"top-right":i=-1,a=1;break;case"right":i=0,a=1;break;case"bottom-right":i=1,a=1;break;case"bottom":i=1,a=0;break;case"bottom-left":i=1,a=-1;break;case"left":i=0,a=-1;break;default:Konva.Util.error("Unknown emboss direction: "+r)}do{var f=(d-1)*u,h=i;d+h<1&&(h=0),d+h>c&&(h=0);var p=(d-1+h)*s*4,v=s;do{var y=f+4*(v-1),g=a;v+g<1&&(g=0),v+g>s&&(g=0);var m=p+4*(v-1+g),b=l[y]-l[m],_=l[y+1]-l[m+1],x=l[y+2]-l[m+2],w=b,S=w>0?w:-w;if((_>0?_:-_)>S&&(w=_),(x>0?x:-x)>S&&(w=x),w*=e,o){var C=l[y]+w,T=l[y+1]+w,F=l[y+2]+w;l[y]=C>255?255:C<0?0:C,l[y+1]=T>255?255:T<0?0:T,l[y+2]=F>255?255:F<0?0:F}else{var O=n-w;O<0?O=0:O>255&&(O=255),l[y]=l[y+1]=l[y+2]=O}}while(--v)}while(--d)},Konva.Factory.addGetterSetter(Konva.Node,"embossStrength",.5,Konva.Validators.getNumberValidator(),Konva.Factory.afterSetFilter),Konva.Factory.addGetterSetter(Konva.Node,"embossWhiteLevel",.5,Konva.Validators.getNumberValidator(),Konva.Factory.afterSetFilter),Konva.Factory.addGetterSetter(Konva.Node,"embossDirection","top-left",null,Konva.Factory.afterSetFilter),Konva.Factory.addGetterSetter(Konva.Node,"embossBlend",!1,null,Konva.Factory.afterSetFilter)}(),function(){"use strict";function t(t,e,n,r,o){var i=n-e,a=o-r;return 0===i?r+a/2:0===a?r:a*((t-e)/i)+r}Konva.Filters.Enhance=function(e){var n,r,o,i,a=e.data,l=a.length,s=a[0],c=s,u=a[1],d=u,f=a[2],h=f,p=this.enhance();if(0!==p){for(i=0;i<l;i+=4)(n=a[i+0])<s?s=n:n>c&&(c=n),(r=a[i+1])<u?u=r:r>d&&(d=r),(o=a[i+2])<f?f=o:o>h&&(h=o);var v,y,g,m,b,_,x,w,S;for(c===s&&(c=255,s=0),d===u&&(d=255,u=0),h===f&&(h=255,f=0),p>0?(y=c+p*(255-c),g=s-p*(s-0),b=d+p*(255-d),_=u-p*(u-0),w=h+p*(255-h),S=f-p*(f-0)):(y=c+p*(c-(v=.5*(c+s))),g=s+p*(s-v),b=d+p*(d-(m=.5*(d+u))),_=u+p*(u-m),w=h+p*(h-(x=.5*(h+f))),S=f+p*(f-x)),i=0;i<l;i+=4)a[i+0]=t(a[i+0],s,c,g,y),a[i+1]=t(a[i+1],u,d,_,b),a[i+2]=t(a[i+2],f,h,S,w)}},Konva.Factory.addGetterSetter(Konva.Node,"enhance",0,Konva.Validators.getNumberValidator(),Konva.Factory.afterSetFilter)}(),function(){"use strict";Konva.Filters.Posterize=function(t){var e,n=Math.round(254*this.levels())+1,r=t.data,o=r.length,i=255/n;for(e=0;e<o;e+=1)r[e]=Math.floor(r[e]/i)*i},Konva.Factory.addGetterSetter(Konva.Node,"levels",.5,Konva.Validators.getNumberValidator(),Konva.Factory.afterSetFilter)}(),function(){"use strict";Konva.Filters.Noise=function(t){var e,n=255*this.noise(),r=t.data,o=r.length,i=n/2;for(e=0;e<o;e+=4)r[e+0]+=i-2*i*Math.random(),r[e+1]+=i-2*i*Math.random(),r[e+2]+=i-2*i*Math.random()},Konva.Factory.addGetterSetter(Konva.Node,"noise",.2,Konva.Validators.getNumberValidator(),Konva.Factory.afterSetFilter)}(),function(){"use strict";Konva.Filters.Pixelate=function(t){var e,n,r,o,i,a,l,s,c,u,d,f,h,p,v=Math.ceil(this.pixelSize()),y=t.width,g=t.height,m=Math.ceil(y/v),b=Math.ceil(g/v);if(t=t.data,v<=0)Konva.Util.error("pixelSize value can not be <= 0");else for(f=0;f<m;f+=1)for(h=0;h<b;h+=1){for(o=0,i=0,a=0,l=0,c=(s=f*v)+v,d=(u=h*v)+v,p=0,e=s;e<c;e+=1)if(!(e>=y))for(n=u;n<d;n+=1)n>=g||(o+=t[(r=4*(y*n+e))+0],i+=t[r+1],a+=t[r+2],l+=t[r+3],p+=1);for(o/=p,i/=p,a/=p,l/=p,e=s;e<c;e+=1)if(!(e>=y))for(n=u;n<d;n+=1)n>=g||(t[(r=4*(y*n+e))+0]=o,t[r+1]=i,t[r+2]=a,t[r+3]=l)}},Konva.Factory.addGetterSetter(Konva.Node,"pixelSize",8,Konva.Validators.getNumberValidator(),Konva.Factory.afterSetFilter)}(),function(){"use strict";Konva.Filters.Threshold=function(t){var e,n=255*this.threshold(),r=t.data,o=r.length;for(e=0;e<o;e+=1)r[e]=r[e]<n?0:255},Konva.Factory.addGetterSetter(Konva.Node,"threshold",.5,Konva.Validators.getNumberValidator(),Konva.Factory.afterSetFilter)}(),function(){"use strict";
/**
   * Sepia Filter
   * Based on: Pixastic Lib - Sepia filter - v0.1.0
   * Copyright (c) 2008 Jacob Seidelin, jseidelin@nihilogic.dk, http://blog.nihilogic.dk/
   * @function
   * @name Sepia
   * @memberof Konva.Filters
   * @param {Object} imageData
   * @author Jacob Seidelin <jseidelin@nihilogic.dk>
   * @license MPL v1.1 [http://www.pixastic.com/lib/license.txt]
   * @example
   * node.cache();
   * node.filters([Konva.Filters.Sepia]);
   */Konva.Filters.Sepia=function(t){var e,n,r,o,i,a,l,s,c,u=t.data,d=t.width,f=t.height,h=4*d;do{e=(f-1)*h,n=d;do{l=.393*(o=u[r=e+4*(n-1)])+.769*(i=u[r+1])+.189*(a=u[r+2]),s=.349*o+.686*i+.168*a,c=.272*o+.534*i+.131*a,u[r]=l>255?255:l,u[r+1]=s>255?255:s,u[r+2]=c>255?255:c,u[r+3]=u[r+3]}while(--n)}while(--f)}}(),function(){"use strict";Konva.Filters.Solarize=function(t){var e=t.data,n=t.width,r=4*n,o=t.height;do{var i=(o-1)*r,a=n;do{var l=i+4*(a-1),s=e[l],c=e[l+1],u=e[l+2];s>127&&(s=255-s),c>127&&(c=255-c),u>127&&(u=255-u),e[l]=s,e[l+1]=c,e[l+2]=u}while(--a)}while(--o)}}(),function(){"use strict";Konva.Filters.Kaleidoscope=function(t){var e,n,r,o,i,a,l,s,c,u=t.width,d=t.height,f=Math.round(this.kaleidoscopePower()),h=Math.round(this.kaleidoscopeAngle()),p=Math.floor(u*(h%360)/360);if(!(f<1)){var v=Konva.Util.createCanvasElement();v.width=u,v.height=d;var y=v.getContext("2d").getImageData(0,0,u,d);!function(t,e,n){var r,o,i,a,l=t.data,s=e.data,c=t.width,u=t.height,d=n.polarCenterX||c/2,f=n.polarCenterY||u/2,h=0,p=0,v=0,y=0,g=Math.sqrt(d*d+f*f);o=c-d,i=u-f,g=(a=Math.sqrt(o*o+i*i))>g?a:g;var m,b,_,x,w=u,S=c,C=360/S*Math.PI/180;for(b=0;b<S;b+=1)for(_=Math.sin(b*C),x=Math.cos(b*C),m=0;m<w;m+=1)o=Math.floor(d+g*m/w*x),h=l[0+(r=4*((i=Math.floor(f+g*m/w*_))*c+o))],p=l[r+1],v=l[r+2],y=l[r+3],s[0+(r=4*(b+m*c))]=h,s[r+1]=p,s[r+2]=v,s[r+3]=y}(t,y,{polarCenterX:u/2,polarCenterY:d/2});for(var g=u/Math.pow(2,f);g<=8;)g*=2,f-=1;var m=g=Math.ceil(g),b=0,_=m,x=1;for(p+g>u&&(b=m,_=0,x=-1),n=0;n<d;n+=1)for(e=b;e!==_;e+=x)s=4*(u*n+Math.round(e+p)%u),o=y.data[s+0],i=y.data[s+1],a=y.data[s+2],l=y.data[s+3],c=4*(u*n+e),y.data[c+0]=o,y.data[c+1]=i,y.data[c+2]=a,y.data[c+3]=l;for(n=0;n<d;n+=1)for(m=Math.floor(g),r=0;r<f;r+=1){for(e=0;e<m+1;e+=1)s=4*(u*n+e),o=y.data[s+0],i=y.data[s+1],a=y.data[s+2],l=y.data[s+3],c=4*(u*n+2*m-e-1),y.data[c+0]=o,y.data[c+1]=i,y.data[c+2]=a,y.data[c+3]=l;m*=2}!function(t,e,n){var r,o,i,a,l,s,c=t.data,u=e.data,d=t.width,f=t.height,h=n.polarCenterX||d/2,p=n.polarCenterY||f/2,v=0,y=0,g=0,m=0,b=Math.sqrt(h*h+p*p);o=d-h,i=f-p,b=(s=Math.sqrt(o*o+i*i))>b?s:b;var _,x,w,S=f,C=d,T=n.polarRotation||0;for(o=0;o<d;o+=1)for(i=0;i<f;i+=1)a=o-h,l=i-p,_=Math.sqrt(a*a+l*l)*S/b,x=(x=(180*Math.atan2(l,a)/Math.PI+360+T)%360)*C/360,w=Math.floor(x),v=c[0+(r=4*(Math.floor(_)*d+w))],y=c[r+1],g=c[r+2],m=c[r+3],u[0+(r=4*(i*d+o))]=v,u[r+1]=y,u[r+2]=g,u[r+3]=m}(y,t,{polarRotation:0})}},Konva.Factory.addGetterSetter(Konva.Node,"kaleidoscopePower",2,Konva.Validators.getNumberValidator(),Konva.Factory.afterSetFilter),Konva.Factory.addGetterSetter(Konva.Node,"kaleidoscopeAngle",0,Konva.Validators.getNumberValidator(),Konva.Factory.afterSetFilter)}(),function(t){"use strict";t.Filters.Contrast=function(t){var e,n=Math.pow((parseInt(this.contrast())+100)/100,2),r=t.data,o=r.length,i=150,a=150,l=150;for(e=0;e<o;e+=4)i=r[e],a=r[e+1],l=r[e+2],i/=255,i-=.5,i*=n,i+=.5,a/=255,a-=.5,a*=n,a+=.5,l/=255,l-=.5,l*=n,l+=.5,i=(i*=255)<0?0:i>255?255:i,a=(a*=255)<0?0:a>255?255:a,l=(l*=255)<0?0:l>255?255:l,r[e]=i,r[e+1]=a,r[e+2]=l},t.Factory.addGetterSetter(t.Node,"contrast",0,t.Validators.getNumberValidator(),t.Factory.afterSetFilter)}(Konva),function(){"use strict";Konva.Container=function(t){this.__init(t)},Konva.Util.addMethods(Konva.Container,{__init:function(t){this.children=new Konva.Collection,Konva.Node.call(this,t)},getChildren:function(t){if(!t)return this.children;var e=new Konva.Collection;return this.children.each(function(n){t(n)&&e.push(n)}),e},hasChildren:function(){return this.getChildren().length>0},removeChildren:function(){for(var t,e=Konva.Collection.toCollection(this.children),n=0;n<e.length;n++)delete(t=e[n]).parent,t.index=0,t.remove();return e=null,this.children=new Konva.Collection,this},destroyChildren:function(){for(var t,e=Konva.Collection.toCollection(this.children),n=0;n<e.length;n++)delete(t=e[n]).parent,t.index=0,t.destroy();return e=null,this.children=new Konva.Collection,this},add:function(t){if(arguments.length>1){for(var e=0;e<arguments.length;e++)this.add(arguments[e]);return this}if(t.getParent())return t.moveTo(this),this;var n=this.children;return this._validateAdd(t),t.index=n.length,t.parent=this,n.push(t),this._fire("add",{child:t}),Konva.DD&&t.isDragging()&&Konva.DD.anim.setLayers(t.getLayer()),this},destroy:function(){return this.hasChildren()&&this.destroyChildren(),Konva.Node.prototype.destroy.call(this),this},find:function(t){return this._generalFind(t,!1)},findOne:function(t){var e=this._generalFind(t,!0);return e.length>0?e[0]:void 0},_generalFind:function(t,e){var n=[];return"string"==typeof t?n=this._findByString(t,e):"function"==typeof t&&(n=this._findByFunction(t,e)),Konva.Collection.toCollection(n)},_findByString:function(t){var e,n,r,o,i,a,l,s=[],c=t.replace(/ /g,"").split(","),u=c.length;for(e=0;e<u;e++){if(r=c[e],!Konva.Util.isValidSelector(r)){var d='Selector "'+r+'" is invalid. Allowed selectors examples are "#foo", ".bar" or "Group".\nIf you have a custom shape with such className, please change it to start with upper letter like "Triangle".\nKonva is awesome, right?';Konva.Util.warn(d)}if("#"===r.charAt(0))(i=this._getNodeById(r.slice(1)))&&s.push(i);else if("."===r.charAt(0))o=this._getNodesByName(r.slice(1)),s=s.concat(o);else for(l=(a=this.getChildren()).length,n=0;n<l;n++)s=s.concat(a[n]._get(r))}return s},_findByFunction:function(t,e){var n=[],r=function(o){if(!(e&&n.length>0)){var i=o.getChildren(),a=i.length;t(o)&&(n=n.concat(o));for(var l=0;l<a;l++)r(i[l])}};return r(this),n},_getNodeById:function(t){var e=Konva.ids[t];return void 0!==e&&this.isAncestorOf(e)?e:null},_getNodesByName:function(t){var e=Konva.names[t]||[];return this._getDescendants(e)},_get:function(t){for(var e=Konva.Node.prototype._get.call(this,t),n=this.getChildren(),r=n.length,o=0;o<r;o++)e=e.concat(n[o]._get(t));return e},toObject:function(){var t=Konva.Node.prototype.toObject.call(this);t.children=[];for(var e=this.getChildren(),n=e.length,r=0;r<n;r++){var o=e[r];t.children.push(o.toObject())}return t},_getDescendants:function(t){for(var e=[],n=t.length,r=0;r<n;r++){var o=t[r];this.isAncestorOf(o)&&e.push(o)}return e},isAncestorOf:function(t){for(var e=t.getParent();e;){if(e._id===this._id)return!0;e=e.getParent()}return!1},clone:function(t){var e=Konva.Node.prototype.clone.call(this,t);return this.getChildren().each(function(t){e.add(t.clone())}),e},getAllIntersections:function(t){var e=[];return this.find("Shape").each(function(n){n.isVisible()&&n.intersects(t)&&e.push(n)}),e},_setChildrenIndices:function(){this.children.each(function(t,e){t.index=e})},drawScene:function(t,e,n){var r=this.getLayer(),o=t||r&&r.getCanvas(),i=o&&o.getContext(),a=this._cache.canvas,l=a&&a.scene;return(this.isVisible()||n)&&(!n&&l?(i.save(),r._applyTransform(this,i,e),this._drawCachedSceneCanvas(i),i.restore()):this._drawChildren(o,"drawScene",e,!1,n)),this},drawHit:function(t,e,n){var r=this.getLayer(),o=t||r&&r.hitCanvas,i=o&&o.getContext(),a=this._cache.canvas,l=a&&a.hit;return(this.shouldDrawHit(o)||n)&&(r&&r.clearHitCache(),!n&&l?(i.save(),r._applyTransform(this,i,e),this._drawCachedHitCanvas(i),i.restore()):this._drawChildren(o,"drawHit",e)),this},_drawChildren:function(t,e,n,r,o){var i,a,l=this.getLayer(),s=t&&t.getContext(),c=this.getClipWidth(),u=this.getClipHeight(),d=this.getClipFunc(),f=c&&u||d;if(f&&l){s.save();var h=this.getAbsoluteTransform(n),p=h.getMatrix();s.transform(p[0],p[1],p[2],p[3],p[4],p[5]),s.beginPath(),d?d.call(this,s,this):(i=this.getClipX(),a=this.getClipY(),s.rect(i,a,c,u)),s.clip(),p=h.copy().invert().getMatrix(),s.transform(p[0],p[1],p[2],p[3],p[4],p[5])}this.children.each(function(i){i[e](t,n,r,o)}),f&&s.restore()},shouldDrawHit:function(t){var e=this.getLayer(),n=Konva.DD&&Konva.isDragging()&&-1!==Konva.DD.anim.getLayers().indexOf(e);return t&&t.isCache||e&&e.hitGraphEnabled()&&this.isVisible()&&!n},getClientRect:function(t){var e,n,r,o,i=(t=t||{}).skipTransform,a=t.relativeTo,l={x:1/0,y:1/0,width:0,height:0},s=this;this.children.each(function(i){if(i.getVisible()){var a=i.getClientRect({relativeTo:s,skipShadow:t.skipShadow,skipStroke:t.skipStroke});0===a.width&&0===a.height||(void 0===e?(e=a.x,n=a.y,r=a.x+a.width,o=a.y+a.height):(e=Math.min(e,a.x),n=Math.min(n,a.y),r=Math.max(r,a.x+a.width),o=Math.max(o,a.y+a.height)))}});for(var c=this.find("Shape"),u=!1,d=0;d<c.length;d++){if(c[d]._isVisible(this)){u=!0;break}}return l=u?{x:e,y:n,width:r-e,height:o-n}:{x:0,y:0,width:0,height:0},i?l:this._transformedRect(l,a)}}),Konva.Util.extend(Konva.Container,Konva.Node),Konva.Container.prototype.get=Konva.Container.prototype.find,Konva.Factory.addComponentsGetterSetter(Konva.Container,"clip",["x","y","width","height"]),Konva.Factory.addGetterSetter(Konva.Container,"clipX",void 0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Container,"clipY",void 0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Container,"clipWidth",void 0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Container,"clipHeight",void 0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Container,"clipFunc"),Konva.Collection.mapMethods(Konva.Container)}(),function(t){"use strict";var e="hasShadow",n="shadowRGBA";function r(t){t.fill()}function o(t){t.stroke()}function i(t){t.fill()}function a(t){t.stroke()}function l(){this._clearCache(e)}function s(){this._clearCache(n)}t.Shape=function(t){this.__init(t)},t.Util.addMethods(t.Shape,{__init:function(e){this.nodeType="Shape",this._fillFunc=r,this._strokeFunc=o,this._fillFuncHit=i,this._strokeFuncHit=a;for(var n,c=t.shapes;!(n=t.Util.getRandomColor())||n in c;);this.colorKey=n,c[n]=this,t.Node.call(this,e),this.on("shadowColorChange.konva shadowBlurChange.konva shadowOffsetChange.konva shadowOpacityChange.konva shadowEnabledChange.konva",l),this.on("shadowColorChange.konva shadowOpacityChange.konva shadowEnabledChange.konva",s)},hasChildren:function(){return!1},getChildren:function(){return[]},getContext:function(){return this.getLayer().getContext()},getCanvas:function(){return this.getLayer().getCanvas()},hasShadow:function(){return this._getCache(e,this._hasShadow)},_hasShadow:function(){return this.getShadowEnabled()&&0!==this.getShadowOpacity()&&!!(this.getShadowColor()||this.getShadowBlur()||this.getShadowOffsetX()||this.getShadowOffsetY())},getShadowRGBA:function(){return this._getCache(n,this._getShadowRGBA)},_getShadowRGBA:function(){if(this.hasShadow()){var e=t.Util.colorToRGBA(this.shadowColor());return"rgba("+e.r+","+e.g+","+e.b+","+e.a*(this.getShadowOpacity()||1)+")"}},hasFill:function(){return!!(this.getFill()||this.getFillPatternImage()||this.getFillLinearGradientColorStops()||this.getFillRadialGradientColorStops())},hasStroke:function(){return this.strokeEnabled()&&!(!this.stroke()&&!this.getStrokeLinearGradientColorStops())},intersects:function(t){var e=this.getStage().bufferHitCanvas;return e.getContext().clear(),this.drawHit(e),e.context.getImageData(Math.round(t.x),Math.round(t.y),1,1).data[3]>0},destroy:function(){return t.Node.prototype.destroy.call(this),delete t.shapes[this.colorKey],this},_useBufferCanvas:function(t){return!t&&this.perfectDrawEnabled()&&1!==this.getAbsoluteOpacity()&&this.hasFill()&&this.hasStroke()&&this.getStage()||this.perfectDrawEnabled()&&this.hasShadow()&&1!==this.getAbsoluteOpacity()&&this.hasFill()&&this.hasStroke()&&this.getStage()},getSelfRect:function(){var t=this.getSize();return{x:this._centroid?Math.round(-t.width/2):0,y:this._centroid?Math.round(-t.height/2):0,width:t.width,height:t.height}},getClientRect:function(t){var e=(t=t||{}).skipTransform,n=t.relativeTo,r=this.getSelfRect(),o=!t.skipStroke&&this.hasStroke()&&this.strokeWidth()||0,i=r.width+o,a=r.height+o,l=!t.skipShadow&&this.hasShadow(),s=l?this.shadowOffsetX():0,c=l?this.shadowOffsetY():0,u=i+Math.abs(s),d=a+Math.abs(c),f=l&&this.shadowBlur()||0,h=u+2*f,p=d+2*f,v=0;Math.round(o/2)!==o/2&&(v=1);var y={width:h+v,height:p+v,x:-Math.round(o/2+f)+Math.min(s,0)+r.x,y:-Math.round(o/2+f)+Math.min(c,0)+r.y};return e?y:this._transformedRect(y,n)},drawScene:function(t,e,n,r){var o,i,a=this.getLayer(),l=t||a.getCanvas(),s=l.getContext(),c=this._cache.canvas,u=this.sceneFunc(),d=this.hasShadow(),f=this.hasStroke();if(!this.isVisible()&&!n)return this;if(c)return s.save(),a._applyTransform(this,s,e),this._drawCachedSceneCanvas(s),s.restore(),this;if(!u)return this;if(s.save(),this._useBufferCanvas(n)&&!r){if((i=(o=this.getStage().bufferCanvas).getContext()).clear(),i.save(),i._applyLineJoin(this),!n)if(a)a._applyTransform(this,i,e);else{var h=this.getAbsoluteTransform(e).getMatrix();s.transform(h[0],h[1],h[2],h[3],h[4],h[5])}u.call(this,i,this),i.restore();var p=o.pixelRatio;d&&!l.hitCanvas?(s.save(),s._applyShadow(this),s._applyOpacity(this),s._applyGlobalCompositeOperation(this),s.drawImage(o._canvas,0,0,o.width/p,o.height/p),s.restore()):(s._applyOpacity(this),s._applyGlobalCompositeOperation(this),s.drawImage(o._canvas,0,0,o.width/p,o.height/p))}else{if(s._applyLineJoin(this),!n)if(a)a._applyTransform(this,s,e);else{var v=this.getAbsoluteTransform(e).getMatrix();s.transform(v[0],v[1],v[2],v[3],v[4],v[5])}d&&f&&!l.hitCanvas?(s.save(),n||(s._applyOpacity(this),s._applyGlobalCompositeOperation(this)),s._applyShadow(this),u.call(this,s,this),s.restore(),this.hasFill()&&this.getShadowForStrokeEnabled()&&u.call(this,s,this)):d&&!l.hitCanvas?(s.save(),n||(s._applyOpacity(this),s._applyGlobalCompositeOperation(this)),s._applyShadow(this),u.call(this,s,this),s.restore()):(n||(s._applyOpacity(this),s._applyGlobalCompositeOperation(this)),u.call(this,s,this))}return s.restore(),this},drawHit:function(t,e,n){var r=this.getLayer(),o=t||r.hitCanvas,i=o.getContext(),a=this.hitFunc()||this.sceneFunc(),l=this._cache.canvas,s=l&&l.hit;if(!this.shouldDrawHit(o)&&!n)return this;if(r&&r.clearHitCache(),s)return i.save(),r._applyTransform(this,i,e),this._drawCachedHitCanvas(i),i.restore(),this;if(!a)return this;if(i.save(),i._applyLineJoin(this),!n)if(r)r._applyTransform(this,i,e);else{var c=this.getAbsoluteTransform(e).getMatrix();i.transform(c[0],c[1],c[2],c[3],c[4],c[5])}return a.call(this,i,this),i.restore(),this},drawHitFromCache:function(e){var n,r,o,i,a,l=e||0,s=this._cache.canvas,c=this._getCachedSceneCanvas(),u=s.hit,d=u.getContext(),f=u.getWidth(),h=u.getHeight();d.clear(),d.drawImage(c._canvas,0,0,f,h);try{for(o=(r=(n=d.getImageData(0,0,f,h)).data).length,i=t.Util._hexToRgb(this.colorKey),a=0;a<o;a+=4)r[a+3]>l?(r[a]=i.r,r[a+1]=i.g,r[a+2]=i.b,r[a+3]=255):r[a+3]=0;d.putImageData(n,0,0)}catch(e){t.Util.error("Unable to draw hit graph from cached scene canvas. "+e.message)}return this}}),t.Util.extend(t.Shape,t.Node),t.Factory.addGetterSetter(t.Shape,"stroke",void 0,t.Validators.getStringValidator()),t.Factory.addGetterSetter(t.Shape,"strokeWidth",2,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Shape,"strokeHitEnabled",!0,t.Validators.getBooleanValidator()),t.Factory.addGetterSetter(t.Shape,"perfectDrawEnabled",!0,t.Validators.getBooleanValidator()),t.Factory.addGetterSetter(t.Shape,"shadowForStrokeEnabled",!0,t.Validators.getBooleanValidator()),t.Factory.addGetterSetter(t.Shape,"lineJoin"),t.Factory.addGetterSetter(t.Shape,"lineCap"),t.Factory.addGetterSetter(t.Shape,"sceneFunc"),t.Factory.addGetterSetter(t.Shape,"hitFunc"),t.Factory.addGetterSetter(t.Shape,"dash"),t.Factory.addGetterSetter(t.Shape,"dashOffset",0,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Shape,"shadowColor",void 0,t.Validators.getStringValidator()),t.Factory.addGetterSetter(t.Shape,"shadowBlur",0,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Shape,"shadowOpacity",1,t.Validators.getNumberValidator()),t.Factory.addComponentsGetterSetter(t.Shape,"shadowOffset",["x","y"]),t.Factory.addGetterSetter(t.Shape,"shadowOffsetX",0,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Shape,"shadowOffsetY",0,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Shape,"fillPatternImage"),t.Factory.addGetterSetter(t.Shape,"fill",void 0,t.Validators.getStringValidator()),t.Factory.addGetterSetter(t.Shape,"fillPatternX",0,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Shape,"fillPatternY",0,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Shape,"fillLinearGradientColorStops"),t.Factory.addGetterSetter(t.Shape,"strokeLinearGradientColorStops"),t.Factory.addGetterSetter(t.Shape,"fillRadialGradientStartRadius",0),t.Factory.addGetterSetter(t.Shape,"fillRadialGradientEndRadius",0),t.Factory.addGetterSetter(t.Shape,"fillRadialGradientColorStops"),t.Factory.addGetterSetter(t.Shape,"fillPatternRepeat","repeat"),t.Factory.addGetterSetter(t.Shape,"fillEnabled",!0),t.Factory.addGetterSetter(t.Shape,"strokeEnabled",!0),t.Factory.addGetterSetter(t.Shape,"shadowEnabled",!0),t.Factory.addGetterSetter(t.Shape,"dashEnabled",!0),t.Factory.addGetterSetter(t.Shape,"strokeScaleEnabled",!0),t.Factory.addGetterSetter(t.Shape,"fillPriority","color"),t.Factory.addComponentsGetterSetter(t.Shape,"fillPatternOffset",["x","y"]),t.Factory.addGetterSetter(t.Shape,"fillPatternOffsetX",0,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Shape,"fillPatternOffsetY",0,t.Validators.getNumberValidator()),t.Factory.addComponentsGetterSetter(t.Shape,"fillPatternScale",["x","y"]),t.Factory.addGetterSetter(t.Shape,"fillPatternScaleX",1,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Shape,"fillPatternScaleY",1,t.Validators.getNumberValidator()),t.Factory.addComponentsGetterSetter(t.Shape,"fillLinearGradientStartPoint",["x","y"]),t.Factory.addComponentsGetterSetter(t.Shape,"strokeLinearGradientStartPoint",["x","y"]),t.Factory.addGetterSetter(t.Shape,"fillLinearGradientStartPointX",0),t.Factory.addGetterSetter(t.Shape,"strokeLinearGradientStartPointX",0),t.Factory.addGetterSetter(t.Shape,"fillLinearGradientStartPointY",0),t.Factory.addGetterSetter(t.Shape,"strokeLinearGradientStartPointY",0),t.Factory.addComponentsGetterSetter(t.Shape,"fillLinearGradientEndPoint",["x","y"]),t.Factory.addComponentsGetterSetter(t.Shape,"strokeLinearGradientEndPoint",["x","y"]),t.Factory.addGetterSetter(t.Shape,"fillLinearGradientEndPointX",0),t.Factory.addGetterSetter(t.Shape,"strokeLinearGradientEndPointX",0),t.Factory.addGetterSetter(t.Shape,"fillLinearGradientEndPointY",0),t.Factory.addGetterSetter(t.Shape,"strokeLinearGradientEndPointY",0),t.Factory.addComponentsGetterSetter(t.Shape,"fillRadialGradientStartPoint",["x","y"]),t.Factory.addGetterSetter(t.Shape,"fillRadialGradientStartPointX",0),t.Factory.addGetterSetter(t.Shape,"fillRadialGradientStartPointY",0),t.Factory.addComponentsGetterSetter(t.Shape,"fillRadialGradientEndPoint",["x","y"]),t.Factory.addGetterSetter(t.Shape,"fillRadialGradientEndPointX",0),t.Factory.addGetterSetter(t.Shape,"fillRadialGradientEndPointY",0),t.Factory.addGetterSetter(t.Shape,"fillPatternRotation",0),t.Factory.backCompat(t.Shape,{dashArray:"dash",getDashArray:"getDash",setDashArray:"getDash",drawFunc:"sceneFunc",getDrawFunc:"getSceneFunc",setDrawFunc:"setSceneFunc",drawHitFunc:"hitFunc",getDrawHitFunc:"getHitFunc",setDrawHitFunc:"setHitFunc"}),t.Collection.mapMethods(t.Shape)}(Konva),function(){"use strict";var t="_",e=["mousedown","mousemove","mouseup","mouseout","touchstart","touchmove","touchend","mouseover","wheel","contextmenu"],n=e.length;function r(e,n){e.content.addEventListener(n,function(r){e[t+n](r)},!1)}Konva.Stage=function(t){this.___init(t)},Konva.Util.addMethods(Konva.Stage,{___init:function(t){this.nodeType="Stage",Konva.Container.call(this,t),this._id=Konva.idCounter++,this._buildDOM(),this._bindContentEvents(),this._enableNestedTransforms=!1,Konva.stages.push(this)},_validateAdd:function(t){"Layer"!==t.getType()&&Konva.Util.throw("You may only add layers to the stage.")},setContainer:function(t){if("string"==typeof t){if("."===t.charAt(0)){var e=t.slice(1);t=Konva.document.getElementsByClassName(e)[0]}else{var n;n="#"!==t.charAt(0)?t:t.slice(1),t=Konva.document.getElementById(n)}if(!t)throw"Can not find container in document with id "+n}return this._setAttr("container",t),this},shouldDrawHit:function(){return!0},draw:function(){return Konva.Node.prototype.draw.call(this),this},setHeight:function(t){return Konva.Node.prototype.setHeight.call(this,t),this._resizeDOM(),this},setWidth:function(t){return Konva.Node.prototype.setWidth.call(this,t),this._resizeDOM(),this},clear:function(){var t,e=this.children,n=e.length;for(t=0;t<n;t++)e[t].clear();return this},clone:function(t){return t||(t={}),t.container=Konva.document.createElement("div"),Konva.Container.prototype.clone.call(this,t)},destroy:function(){var t=this.content;Konva.Container.prototype.destroy.call(this),t&&Konva.Util._isInDocument(t)&&this.getContainer().removeChild(t);var e=Konva.stages.indexOf(this);return e>-1&&Konva.stages.splice(e,1),this},getPointerPosition:function(){return this.pointerPos},getStage:function(){return this},getContent:function(){return this.content},_toKonvaCanvas:function(t){var e=(t=t||{}).x||0,n=t.y||0,r=new Konva.SceneCanvas({width:t.width||this.getWidth(),height:t.height||this.getHeight(),pixelRatio:t.pixelRatio||1}),o=r.getContext()._context,i=this.children;return(e||n)&&o.translate(-1*e,-1*n),i.each(function(r){if(r.isVisible()){var i=r._toKonvaCanvas(t);o.drawImage(i._canvas,e,n,i.getWidth()/i.getPixelRatio(),i.getHeight()/i.getPixelRatio())}}),r},toImage:function(t){var e=t.callback;t.callback=function(t){Konva.Util._getImage(t,function(t){e(t)})},this.toDataURL(t)},getIntersection:function(t,e){var n,r,o=this.getChildren();for(n=o.length-1;n>=0;n--)if(r=o[n].getIntersection(t,e))return r;return null},_resizeDOM:function(){if(this.content){var t,e,n=this.getWidth(),r=this.getHeight(),o=this.getChildren(),i=o.length;for(this.content.style.width=n+"px",this.content.style.height=r+"px",this.bufferCanvas.setSize(n,r),this.bufferHitCanvas.setSize(n,r),t=0;t<i;t++)(e=o[t]).setSize(n,r),e.draw()}},add:function(t){if(arguments.length>1){for(var e=0;e<arguments.length;e++)this.add(arguments[e]);return this}return Konva.Container.prototype.add.call(this,t),t._setCanvasSize(this.width(),this.height()),t.draw(),Konva.isBrowser&&this.content.appendChild(t.canvas._canvas),this},getParent:function(){return null},getLayer:function(){return null},getLayers:function(){return this.getChildren()},_bindContentEvents:function(){if(Konva.isBrowser)for(var t=0;t<n;t++)r(this,e[t])},_mouseover:function(t){Konva.UA.mobile||(this._setPointerPosition(t),this._fire("contentMouseover",{evt:t}))},_mouseout:function(t){if(!Konva.UA.mobile){this._setPointerPosition(t);var e=this.targetShape;e&&!Konva.isDragging()&&(e._fireAndBubble("mouseout",{evt:t}),e._fireAndBubble("mouseleave",{evt:t}),this.targetShape=null),this.pointerPos=void 0,this._fire("contentMouseout",{evt:t})}},_mousemove:function(t){return Konva.UA.ieMobile?this._touchmove(t):void 0===t.movementX&&void 0===t.movementY||0!==t.movementY||0!==t.movementX?Konva.UA.mobile?null:(this._setPointerPosition(t),Konva.isDragging()||((e=this.getIntersection(this.getPointerPosition()))&&e.isListening()?Konva.isDragging()||this.targetShape&&this.targetShape._id===e._id?e._fireAndBubble("mousemove",{evt:t}):(this.targetShape&&(this.targetShape._fireAndBubble("mouseout",{evt:t},e),this.targetShape._fireAndBubble("mouseleave",{evt:t},e)),e._fireAndBubble("mouseover",{evt:t},this.targetShape),e._fireAndBubble("mouseenter",{evt:t},this.targetShape),this.targetShape=e):(this.targetShape&&!Konva.isDragging()&&(this.targetShape._fireAndBubble("mouseout",{evt:t}),this.targetShape._fireAndBubble("mouseleave",{evt:t}),this.targetShape=null),this._fire("mousemove",{evt:t,target:this,currentTarget:this})),this._fire("contentMousemove",{evt:t})),void(t.cancelable&&t.preventDefault())):null;var e},_mousedown:function(t){if(Konva.UA.ieMobile)return this._touchstart(t);if(!Konva.UA.mobile){this._setPointerPosition(t);var e=this.getIntersection(this.getPointerPosition());Konva.listenClickTap=!0,e&&e.isListening()?(this.clickStartShape=e,e._fireAndBubble("mousedown",{evt:t})):this._fire("mousedown",{evt:t,target:this,currentTarget:this}),this._fire("contentMousedown",{evt:t})}},_mouseup:function(t){if(Konva.UA.ieMobile)return this._touchend(t);if(!Konva.UA.mobile){this._setPointerPosition(t);var e=this.getIntersection(this.getPointerPosition()),n=this.clickStartShape,r=this.clickEndShape,o=!1,i=Konva.DD;Konva.inDblClickWindow?(o=!0,clearTimeout(this.dblTimeout)):i&&i.justDragged?i&&(i.justDragged=!1):(Konva.inDblClickWindow=!0,clearTimeout(this.dblTimeout)),this.dblTimeout=setTimeout(function(){Konva.inDblClickWindow=!1},Konva.dblClickWindow),e&&e.isListening()?(this.clickEndShape=e,e._fireAndBubble("mouseup",{evt:t}),Konva.listenClickTap&&n&&n._id===e._id&&(e._fireAndBubble("click",{evt:t}),o&&r&&r._id===e._id&&e._fireAndBubble("dblclick",{evt:t}))):(this._fire("mouseup",{evt:t,target:this,currentTarget:this}),Konva.listenClickTap&&this._fire("click",{evt:t,target:this,currentTarget:this}),o&&this._fire("dblclick",{evt:t,target:this,currentTarget:this})),this._fire("contentMouseup",{evt:t}),Konva.listenClickTap&&(this._fire("contentClick",{evt:t}),o&&this._fire("contentDblclick",{evt:t})),Konva.listenClickTap=!1}t.cancelable&&t.preventDefault()},_contextmenu:function(t){this._setPointerPosition(t);var e=this.getIntersection(this.getPointerPosition());e&&e.isListening()?e._fireAndBubble("contextmenu",{evt:t}):this._fire("contextmenu",{evt:t,target:this,currentTarget:this}),this._fire("contentContextmenu",{evt:t})},_touchstart:function(t){this._setPointerPosition(t);var e=this.getIntersection(this.getPointerPosition());Konva.listenClickTap=!0,e&&e.isListening()?(this.tapStartShape=e,e._fireAndBubble("touchstart",{evt:t}),e.isListening()&&e.preventDefault()&&t.cancelable&&t.preventDefault()):this._fire("touchstart",{evt:t,target:this,currentTarget:this}),this._fire("contentTouchstart",{evt:t})},_touchend:function(t){this._setPointerPosition(t);var e=this.getIntersection(this.getPointerPosition()),n=!1;Konva.inDblClickWindow?(n=!0,clearTimeout(this.dblTimeout)):(Konva.inDblClickWindow=!0,clearTimeout(this.dblTimeout)),this.dblTimeout=setTimeout(function(){Konva.inDblClickWindow=!1},Konva.dblClickWindow),e&&e.isListening()?(e._fireAndBubble("touchend",{evt:t}),Konva.listenClickTap&&this.tapStartShape&&e._id===this.tapStartShape._id&&(e._fireAndBubble("tap",{evt:t}),n&&e._fireAndBubble("dbltap",{evt:t})),e.isListening()&&e.preventDefault()&&t.cancelable&&t.preventDefault()):(this._fire("touchend",{evt:t,target:this,currentTarget:this}),Konva.listenClickTap&&this._fire("tap",{evt:t,target:this,currentTarget:this}),n&&this._fire("dbltap",{evt:t,target:this,currentTarget:this})),this._fire("contentTouchend",{evt:t}),Konva.listenClickTap&&(this._fire("contentTap",{evt:t}),n&&this._fire("contentDbltap",{evt:t})),Konva.listenClickTap=!1},_touchmove:function(t){this._setPointerPosition(t);var e,n=Konva.DD;Konva.isDragging()||((e=this.getIntersection(this.getPointerPosition()))&&e.isListening()?(e._fireAndBubble("touchmove",{evt:t}),e.isListening()&&e.preventDefault()&&t.cancelable&&t.preventDefault()):this._fire("touchmove",{evt:t,target:this,currentTarget:this}),this._fire("contentTouchmove",{evt:t})),n&&Konva.isDragging()&&Konva.DD.node.preventDefault()&&t.cancelable&&t.preventDefault()},_wheel:function(t){this._setPointerPosition(t);var e=this.getIntersection(this.getPointerPosition());e&&e.isListening()?e._fireAndBubble("wheel",{evt:t}):this._fire("wheel",{evt:t,target:this,currentTarget:this}),this._fire("contentWheel",{evt:t})},_setPointerPosition:function(t){var e=this._getContentPosition(),n=null,r=null;if(void 0!==(t=t||window.event).touches){if(t.touches.length>0){var o=t.touches[0];n=o.clientX-e.left,r=o.clientY-e.top}}else n=t.clientX-e.left,r=t.clientY-e.top;null!==n&&null!==r&&(this.pointerPos={x:n,y:r})},_getContentPosition:function(){var t=this.content.getBoundingClientRect?this.content.getBoundingClientRect():{top:0,left:0};return{top:t.top,left:t.left}},_buildDOM:function(){if(this.bufferCanvas=new Konva.SceneCanvas,this.bufferHitCanvas=new Konva.HitCanvas({pixelRatio:1}),Konva.isBrowser){var t=this.getContainer();if(!t)throw"Stage has no container. A container is required.";t.innerHTML="",this.content=Konva.document.createElement("div"),this.content.style.position="relative",this.content.style.userSelect="none",this.content.className="konvajs-content",this.content.setAttribute("role","presentation"),t.appendChild(this.content),this._resizeDOM()}},_onContent:function(t,e){var n,r,o=t.split(" "),i=o.length;for(n=0;n<i;n++)r=o[n],this.content.addEventListener(r,e,!1)},cache:function(){Konva.Util.warn("Cache function is not allowed for stage. You may use cache only for layers, groups and shapes.")},clearCache:function(){}}),Konva.Util.extend(Konva.Stage,Konva.Container),Konva.Factory.addGetter(Konva.Stage,"container"),Konva.Factory.addOverloadedGetterSetter(Konva.Stage,"container")}(),function(t){"use strict";t.BaseLayer=function(t){this.___init(t)},t.Util.addMethods(t.BaseLayer,{___init:function(e){this.nodeType="Layer",t.Container.call(this,e)},createPNGStream:function(){return this.canvas._canvas.createPNGStream()},getCanvas:function(){return this.canvas},getHitCanvas:function(){return this.hitCanvas},getContext:function(){return this.getCanvas().getContext()},clear:function(t){return this.getContext().clear(t),this},clearHitCache:function(){this._hitImageData=void 0},setZIndex:function(e){t.Node.prototype.setZIndex.call(this,e);var n=this.getStage();return n&&(n.content.removeChild(this.getCanvas()._canvas),e<n.getChildren().length-1?n.content.insertBefore(this.getCanvas()._canvas,n.getChildren()[e+1].getCanvas()._canvas):n.content.appendChild(this.getCanvas()._canvas)),this},moveToTop:function(){t.Node.prototype.moveToTop.call(this);var e=this.getStage();return e&&(e.content.removeChild(this.getCanvas()._canvas),e.content.appendChild(this.getCanvas()._canvas)),this},moveUp:function(){if(!t.Node.prototype.moveUp.call(this))return this;var e=this.getStage();return e?(e.content.removeChild(this.getCanvas()._canvas),this.index<e.getChildren().length-1?e.content.insertBefore(this.getCanvas()._canvas,e.getChildren()[this.index+1].getCanvas()._canvas):e.content.appendChild(this.getCanvas()._canvas),this):this},moveDown:function(){if(t.Node.prototype.moveDown.call(this)){var e=this.getStage();if(e){var n=e.getChildren();e.content.removeChild(this.getCanvas()._canvas),e.content.insertBefore(this.getCanvas()._canvas,n[this.index+1].getCanvas()._canvas)}}return this},moveToBottom:function(){if(t.Node.prototype.moveToBottom.call(this)){var e=this.getStage();if(e){var n=e.getChildren();e.content.removeChild(this.getCanvas()._canvas),e.content.insertBefore(this.getCanvas()._canvas,n[1].getCanvas()._canvas)}}return this},getLayer:function(){return this},remove:function(){var e=this.getCanvas()._canvas;return t.Node.prototype.remove.call(this),e&&e.parentNode&&t.Util._isInDocument(e)&&e.parentNode.removeChild(e),this},getStage:function(){return this.parent},setSize:function(t,e){return this.canvas.setSize(t,e),this},_toKonvaCanvas:function(e){return(e=e||{}).width=e.width||this.getWidth(),e.height=e.height||this.getHeight(),e.x=void 0!==e.x?e.x:this.getX(),e.y=void 0!==e.y?e.y:this.getY(),t.Node.prototype._toKonvaCanvas.call(this,e)},getWidth:function(){if(this.parent)return this.parent.getWidth()},setWidth:function(){t.Util.warn('Can not change width of layer. Use "stage.width(value)" function instead.')},getHeight:function(){if(this.parent)return this.parent.getHeight()},setHeight:function(){t.Util.warn('Can not change height of layer. Use "stage.height(value)" function instead.')},_applyTransform:function(t,e,n){var r=t.getAbsoluteTransform(n).getMatrix();e.transform(r[0],r[1],r[2],r[3],r[4],r[5])}}),t.Util.extend(t.BaseLayer,t.Container),t.Factory.addGetterSetter(t.BaseLayer,"clearBeforeDraw",!0),t.Collection.mapMethods(t.BaseLayer)}(Konva),function(){"use strict";var t=[{x:0,y:0},{x:-1,y:-1},{x:1,y:-1},{x:1,y:1},{x:-1,y:1}],e=t.length;Konva.Layer=function(t){this.____init(t)},Konva.Util.addMethods(Konva.Layer,{____init:function(t){this.nodeType="Layer",this.canvas=new Konva.SceneCanvas,this.hitCanvas=new Konva.HitCanvas({pixelRatio:1}),Konva.BaseLayer.call(this,t)},_setCanvasSize:function(t,e){this.canvas.setSize(t,e),this.hitCanvas.setSize(t,e)},_validateAdd:function(t){var e=t.getType();"Group"!==e&&"Shape"!==e&&Konva.Util.throw("You may only add groups and shapes to a layer.")},getIntersection:function(n,r){var o,i,a,l;if(!this.hitGraphEnabled()||!this.isVisible())return null;for(var s=1,c=!1;;){for(i=0;i<e;i++){if(a=t[i],(l=(o=this._getIntersection({x:n.x+a.x*s,y:n.y+a.y*s})).shape)&&r)return l.findAncestor(r,!0);if(l)return l;if(c=!!o.antialiased,!o.antialiased)break}if(!c)return null;s+=1}},_getImageData:function(t,e){var n=this.hitCanvas.width||1,r=this.hitCanvas.height||1,o=Math.round(e)*n+Math.round(t);return this._hitImageData||(this._hitImageData=this.hitCanvas.context.getImageData(0,0,n,r)),[this._hitImageData.data[4*o+0],this._hitImageData.data[4*o+1],this._hitImageData.data[4*o+2],this._hitImageData.data[4*o+3]]},_getIntersection:function(t){var e,n,r=this.hitCanvas.pixelRatio,o=this.hitCanvas.context.getImageData(Math.round(t.x*r),Math.round(t.y*r),1,1).data,i=o[3];return 255===i?(e=Konva.Util._rgbToHex(o[0],o[1],o[2]),(n=Konva.shapes["#"+e])?{shape:n}:{antialiased:!0}):i>0?{antialiased:!0}:{}},drawScene:function(t,e){var n=this.getLayer(),r=t||n&&n.getCanvas();return this._fire("beforeDraw",{node:this}),this.getClearBeforeDraw()&&r.getContext().clear(),Konva.Container.prototype.drawScene.call(this,r,e),this._fire("draw",{node:this}),this},drawHit:function(t,e){var n=this.getLayer(),r=t||n&&n.hitCanvas;return n&&n.getClearBeforeDraw()&&n.getHitCanvas().getContext().clear(),Konva.Container.prototype.drawHit.call(this,r,e),this.imageData=null,this},clear:function(t){return Konva.BaseLayer.prototype.clear.call(this,t),this.getHitCanvas().getContext().clear(t),this.imageData=null,this},setVisible:function(t){return Konva.Node.prototype.setVisible.call(this,t),t?(this.getCanvas()._canvas.style.display="block",this.hitCanvas._canvas.style.display="block"):(this.getCanvas()._canvas.style.display="none",this.hitCanvas._canvas.style.display="none"),this},enableHitGraph:function(){return this.setHitGraphEnabled(!0),this},disableHitGraph:function(){return this.setHitGraphEnabled(!1),this},setSize:function(t,e){return Konva.BaseLayer.prototype.setSize.call(this,t,e),this.hitCanvas.setSize(t,e),this}}),Konva.Util.extend(Konva.Layer,Konva.BaseLayer),Konva.Factory.addGetterSetter(Konva.Layer,"hitGraphEnabled",!0),Konva.Collection.mapMethods(Konva.Layer)}(),function(){"use strict";Konva.FastLayer=function(t){this.____init(t)},Konva.Util.addMethods(Konva.FastLayer,{____init:function(t){this.nodeType="Layer",this.canvas=new Konva.SceneCanvas,Konva.BaseLayer.call(this,t)},_validateAdd:function(t){"Shape"!==t.getType()&&Konva.Util.throw("You may only add shapes to a fast layer.")},_setCanvasSize:function(t,e){this.canvas.setSize(t,e)},hitGraphEnabled:function(){return!1},getIntersection:function(){return null},drawScene:function(t){var e=this.getLayer(),n=t||e&&e.getCanvas();return this.getClearBeforeDraw()&&n.getContext().clear(),Konva.Container.prototype.drawScene.call(this,n),this},draw:function(){return this.drawScene(),this},setVisible:function(t){return Konva.Node.prototype.setVisible.call(this,t),this.getCanvas()._canvas.style.display=t?"block":"none",this}}),Konva.Util.extend(Konva.FastLayer,Konva.BaseLayer),Konva.Collection.mapMethods(Konva.FastLayer)}(),function(){"use strict";Konva.Group=function(t){this.___init(t)},Konva.Util.addMethods(Konva.Group,{___init:function(t){this.nodeType="Group",Konva.Container.call(this,t)},_validateAdd:function(t){var e=t.getType();"Group"!==e&&"Shape"!==e&&Konva.Util.throw("You may only add groups and shapes to groups.")}}),Konva.Util.extend(Konva.Group,Konva.Container),Konva.Collection.mapMethods(Konva.Group)}(),function(t){"use strict";var e=t.global.performance&&t.global.performance.now?function(){return t.global.performance.now()}:function(){return(new Date).getTime()};function n(t){setTimeout(t,1e3/60)}var r=t.global.requestAnimationFrame||t.global.webkitRequestAnimationFrame||t.global.mozRequestAnimationFrame||t.global.oRequestAnimationFrame||t.global.msRequestAnimationFrame||n;function o(){return r.apply(t.global,arguments)}t.Animation=function(n,r){var o=t.Animation;this.func=n,this.setLayers(r),this.id=o.animIdCounter++,this.frame={time:0,timeDiff:0,lastTime:e()}},t.Animation.prototype={setLayers:function(t){var e=[];return e=t?t.length>0?t:[t]:[],this.layers=e,this},getLayers:function(){return this.layers},addLayer:function(t){var e,n=this.layers,r=n.length;for(e=0;e<r;e++)if(n[e]._id===t._id)return!1;return this.layers.push(t),!0},isRunning:function(){var e,n=t.Animation.animations,r=n.length;for(e=0;e<r;e++)if(n[e].id===this.id)return!0;return!1},start:function(){var n=t.Animation;return this.stop(),this.frame.timeDiff=0,this.frame.lastTime=e(),n._addAnimation(this),this},stop:function(){return t.Animation._removeAnimation(this),this},_updateFrameObject:function(t){this.frame.timeDiff=t-this.frame.lastTime,this.frame.lastTime=t,this.frame.time+=this.frame.timeDiff,this.frame.frameRate=1e3/this.frame.timeDiff}},t.Animation.animations=[],t.Animation.animIdCounter=0,t.Animation.animRunning=!1,t.Animation._addAnimation=function(t){this.animations.push(t),this._handleAnimation()},t.Animation._removeAnimation=function(t){var e,n=t.id,r=this.animations,o=r.length;for(e=0;e<o;e++)if(r[e].id===n){this.animations.splice(e,1);break}},t.Animation._runFrames=function(){var t,n,r,o,i,a,l,s,c={},u=this.animations;for(o=0;o<u.length;o++)if(n=(t=u[o]).layers,r=t.func,t._updateFrameObject(e()),a=n.length,!r||!1!==r.call(t,t.frame))for(i=0;i<a;i++)void 0!==(l=n[i])._id&&(c[l._id]=l);for(s in c)c.hasOwnProperty(s)&&c[s].draw()},t.Animation._animationLoop=function(){var e=t.Animation;e.animations.length?(e._runFrames(),o(e._animationLoop)):e.animRunning=!1},t.Animation._handleAnimation=function(){this.animRunning||(this.animRunning=!0,o(this._animationLoop))},t.BaseLayer.prototype.batchDraw=function(){var e=this,n=t.Animation;return this.batchAnim||(this.batchAnim=new n(function(){e.batchAnim.stop()},this)),this.batchAnim.isRunning()||this.batchAnim.start(),this},t.Stage.prototype.batchDraw=function(){return this.getChildren().each(function(t){t.batchDraw()}),this}}(Konva),function(){"use strict";var t={node:1,duration:1,easing:1,onFinish:1,yoyo:1},e=0,n=["fill","stroke","shadowColor"],r=function(t,e,n,r,o,i,a){this.prop=t,this.propFunc=e,this.begin=r,this._pos=r,this.duration=i,this._change=0,this.prevPos=0,this.yoyo=a,this._time=0,this._position=0,this._startTime=0,this._finish=0,this.func=n,this._change=o-this.begin,this.pause()};r.prototype={fire:function(t){var e=this[t];e&&e()},setTime:function(t){t>this.duration?this.yoyo?(this._time=this.duration,this.reverse()):this.finish():t<0?this.yoyo?(this._time=0,this.play()):this.reset():(this._time=t,this.update())},getTime:function(){return this._time},setPosition:function(t){this.prevPos=this._pos,this.propFunc(t),this._pos=t},getPosition:function(t){return void 0===t&&(t=this._time),this.func(t,this.begin,this._change,this.duration)},play:function(){this.state=2,this._startTime=this.getTimer()-this._time,this.onEnterFrame(),this.fire("onPlay")},reverse:function(){this.state=3,this._time=this.duration-this._time,this._startTime=this.getTimer()-this._time,this.onEnterFrame(),this.fire("onReverse")},seek:function(t){this.pause(),this._time=t,this.update(),this.fire("onSeek")},reset:function(){this.pause(),this._time=0,this.update(),this.fire("onReset")},finish:function(){this.pause(),this._time=this.duration,this.update(),this.fire("onFinish")},update:function(){this.setPosition(this.getPosition(this._time))},onEnterFrame:function(){var t=this.getTimer()-this._startTime;2===this.state?this.setTime(t):3===this.state&&this.setTime(this.duration-t)},pause:function(){this.state=1,this.fire("onPause")},getTimer:function(){return(new Date).getTime()}},Konva.Tween=function(n){var o,i,a=this,l=n.node,s=l._id,c=n.easing||Konva.Easings.Linear,u=!!n.yoyo;o=void 0===n.duration?.3:0===n.duration?.001:n.duration,this.node=l,this._id=e++;var d=l.getLayer()||(l instanceof Konva.Stage?l.getLayers():null);for(i in d||Konva.Util.error("Tween constructor have `node` that is not in a layer. Please add node into layer first."),this.anim=new Konva.Animation(function(){a.tween.onEnterFrame()},d),this.tween=new r(i,function(t){a._tweenFunc(t)},c,0,1,1e3*o,u),this._addListeners(),Konva.Tween.attrs[s]||(Konva.Tween.attrs[s]={}),Konva.Tween.attrs[s][this._id]||(Konva.Tween.attrs[s][this._id]={}),Konva.Tween.tweens[s]||(Konva.Tween.tweens[s]={}),n)void 0===t[i]&&this._addAttr(i,n[i]);this.reset(),this.onFinish=n.onFinish,this.onReset=n.onReset},Konva.Tween.attrs={},Konva.Tween.tweens={},Konva.Tween.prototype={_addAttr:function(t,e){var r,o,i,a,l,s,c,u,d=this.node,f=d._id;if((i=Konva.Tween.tweens[f][t])&&delete Konva.Tween.attrs[f][i][t],r=d.getAttr(t),Konva.Util._isArray(e))if(o=[],l=Math.max(e.length,r.length),"points"===t&&e.length!==r.length&&(e.length>r.length?(c=r,r=Konva.Util._prepareArrayForTween(r,e,d.closed())):(s=e,e=Konva.Util._prepareArrayForTween(e,r,d.closed()))),0===t.indexOf("fill"))for(a=0;a<l;a++)if(a%2==0)o.push(e[a]-r[a]);else{var h=Konva.Util.colorToRGBA(r[a]);u=Konva.Util.colorToRGBA(e[a]),r[a]=h,o.push({r:u.r-h.r,g:u.g-h.g,b:u.b-h.b,a:u.a-h.a})}else for(a=0;a<l;a++)o.push(e[a]-r[a]);else-1!==n.indexOf(t)?(r=Konva.Util.colorToRGBA(r),o={r:(u=Konva.Util.colorToRGBA(e)).r-r.r,g:u.g-r.g,b:u.b-r.b,a:u.a-r.a}):o=e-r;Konva.Tween.attrs[f][this._id][t]={start:r,diff:o,end:e,trueEnd:s,trueStart:c},Konva.Tween.tweens[f][t]=this._id},_tweenFunc:function(t){var e,r,o,i,a,l,s,c,u=this.node,d=Konva.Tween.attrs[u._id][this._id];for(e in d){if(o=(r=d[e]).start,i=r.diff,c=r.end,Konva.Util._isArray(o))if(a=[],s=Math.max(o.length,c.length),0===e.indexOf("fill"))for(l=0;l<s;l++)l%2==0?a.push((o[l]||0)+i[l]*t):a.push("rgba("+Math.round(o[l].r+i[l].r*t)+","+Math.round(o[l].g+i[l].g*t)+","+Math.round(o[l].b+i[l].b*t)+","+(o[l].a+i[l].a*t)+")");else for(l=0;l<s;l++)a.push((o[l]||0)+i[l]*t);else a=-1!==n.indexOf(e)?"rgba("+Math.round(o.r+i.r*t)+","+Math.round(o.g+i.g*t)+","+Math.round(o.b+i.b*t)+","+(o.a+i.a*t)+")":o+i*t;u.setAttr(e,a)}},_addListeners:function(){var t=this;this.tween.onPlay=function(){t.anim.start()},this.tween.onReverse=function(){t.anim.start()},this.tween.onPause=function(){t.anim.stop()},this.tween.onFinish=function(){var e=t.node,n=Konva.Tween.attrs[e._id][t._id];n.points&&n.points.trueEnd&&e.points(n.points.trueEnd),t.onFinish&&t.onFinish.call(t)},this.tween.onReset=function(){var e=t.node,n=Konva.Tween.attrs[e._id][t._id];n.points&&n.points.trueStart&&e.points(n.points.trueStart),t.onReset&&t.onReset()}},play:function(){return this.tween.play(),this},reverse:function(){return this.tween.reverse(),this},reset:function(){return this.tween.reset(),this},seek:function(t){return this.tween.seek(1e3*t),this},pause:function(){return this.tween.pause(),this},finish:function(){return this.tween.finish(),this},destroy:function(){var t,e=this.node._id,n=this._id,r=Konva.Tween.tweens[e];for(t in this.pause(),r)delete Konva.Tween.tweens[e][t];delete Konva.Tween.attrs[e][n]}},Konva.Node.prototype.to=function(t){var e=t.onFinish;t.node=this,t.onFinish=function(){this.destroy(),e&&e()},new Konva.Tween(t).play()},Konva.Easings={BackEaseIn:function(t,e,n,r){var o=1.70158;return n*(t/=r)*t*((o+1)*t-o)+e},BackEaseOut:function(t,e,n,r){var o=1.70158;return n*((t=t/r-1)*t*((o+1)*t+o)+1)+e},BackEaseInOut:function(t,e,n,r){var o=1.70158;return(t/=r/2)<1?n/2*(t*t*((1+(o*=1.525))*t-o))+e:n/2*((t-=2)*t*((1+(o*=1.525))*t+o)+2)+e},ElasticEaseIn:function(t,e,n,r,o,i){var a=0;return 0===t?e:1==(t/=r)?e+n:(i||(i=.3*r),!o||o<Math.abs(n)?(o=n,a=i/4):a=i/(2*Math.PI)*Math.asin(n/o),-o*Math.pow(2,10*(t-=1))*Math.sin((t*r-a)*(2*Math.PI)/i)+e)},ElasticEaseOut:function(t,e,n,r,o,i){var a=0;return 0===t?e:1==(t/=r)?e+n:(i||(i=.3*r),!o||o<Math.abs(n)?(o=n,a=i/4):a=i/(2*Math.PI)*Math.asin(n/o),o*Math.pow(2,-10*t)*Math.sin((t*r-a)*(2*Math.PI)/i)+n+e)},ElasticEaseInOut:function(t,e,n,r,o,i){var a=0;return 0===t?e:2==(t/=r/2)?e+n:(i||(i=r*(.3*1.5)),!o||o<Math.abs(n)?(o=n,a=i/4):a=i/(2*Math.PI)*Math.asin(n/o),t<1?o*Math.pow(2,10*(t-=1))*Math.sin((t*r-a)*(2*Math.PI)/i)*-.5+e:o*Math.pow(2,-10*(t-=1))*Math.sin((t*r-a)*(2*Math.PI)/i)*.5+n+e)},BounceEaseOut:function(t,e,n,r){return(t/=r)<1/2.75?n*(7.5625*t*t)+e:t<2/2.75?n*(7.5625*(t-=1.5/2.75)*t+.75)+e:t<2.5/2.75?n*(7.5625*(t-=2.25/2.75)*t+.9375)+e:n*(7.5625*(t-=2.625/2.75)*t+.984375)+e},BounceEaseIn:function(t,e,n,r){return n-Konva.Easings.BounceEaseOut(r-t,0,n,r)+e},BounceEaseInOut:function(t,e,n,r){return t<r/2?.5*Konva.Easings.BounceEaseIn(2*t,0,n,r)+e:.5*Konva.Easings.BounceEaseOut(2*t-r,0,n,r)+.5*n+e},EaseIn:function(t,e,n,r){return n*(t/=r)*t+e},EaseOut:function(t,e,n,r){return-n*(t/=r)*(t-2)+e},EaseInOut:function(t,e,n,r){return(t/=r/2)<1?n/2*t*t+e:-n/2*(--t*(t-2)-1)+e},StrongEaseIn:function(t,e,n,r){return n*(t/=r)*t*t*t*t+e},StrongEaseOut:function(t,e,n,r){return n*((t=t/r-1)*t*t*t*t+1)+e},StrongEaseInOut:function(t,e,n,r){return(t/=r/2)<1?n/2*t*t*t*t*t+e:n/2*((t-=2)*t*t*t*t+2)+e},Linear:function(t,e,n,r){return n*t/r+e}}}(),function(){"use strict";Konva.DD={anim:new Konva.Animation(function(){var t=this.dirty;return this.dirty=!1,t}),isDragging:!1,justDragged:!1,offset:{x:0,y:0},node:null,_drag:function(t){var e=Konva.DD,n=e.node;if(n){if(!e.isDragging){var r=n.getStage().getPointerPosition();r||(n.getStage()._setPointerPosition(t),r=n.getStage().getPointerPosition());var o=n.dragDistance();if(Math.max(Math.abs(r.x-e.startPointerPos.x),Math.abs(r.y-e.startPointerPos.y))<o)return}if(n.getStage()._setPointerPosition(t),!e.isDragging&&(e.isDragging=!0,n.fire("dragstart",{type:"dragstart",target:n,evt:t},!0),!n.isDragging()))return;n._setDragPosition(t),n.fire("dragmove",{type:"dragmove",target:n,evt:t},!0)}},_endDragBefore:function(t){var e,n=Konva.DD,r=n.node;r&&(e=r.getLayer(),n.anim.stop(),n.isDragging&&(n.isDragging=!1,n.justDragged=!0,Konva.listenClickTap=!1,t&&(t.dragEndNode=r)),delete n.node,(r.getLayer()||e||r instanceof Konva.Stage)&&(e||r).draw())},_endDragAfter:function(t){var e=(t=t||{}).dragEndNode;t&&e&&e.fire("dragend",{type:"dragend",target:e,evt:t},!0)}},Konva.Node.prototype.startDrag=function(){var t=Konva.DD,e=this.getStage(),n=this.getLayer(),r=e.getPointerPosition(),o=this.getAbsolutePosition();r&&(t.node&&t.node.stopDrag(),t.node=this,t.startPointerPos=r,t.offset.x=r.x-o.x,t.offset.y=r.y-o.y,t.anim.setLayers(n||this.getLayers()),t.anim.start(),this._setDragPosition())},Konva.Node.prototype._setDragPosition=function(t){var e=Konva.DD,n=this.getStage().getPointerPosition(),r=this.getDragBoundFunc();if(n){var o={x:n.x-e.offset.x,y:n.y-e.offset.y};void 0!==r&&(o=r.call(this,o,t)),this.setAbsolutePosition(o),this._lastPos&&this._lastPos.x===o.x&&this._lastPos.y===o.y||(e.anim.dirty=!0),this._lastPos=o}},Konva.Node.prototype.stopDrag=function(){var t=Konva.DD,e={};t._endDragBefore(e),t._endDragAfter(e)},Konva.Node.prototype.setDraggable=function(t){this._setAttr("draggable",t),this._dragChange()};var t=Konva.Node.prototype.remove;Konva.Node.prototype.__originalRemove=t,Konva.Node.prototype.remove=function(){var e=Konva.DD;e.node&&e.node._id===this._id&&this.stopDrag(),t.call(this)},Konva.Node.prototype.isDragging=function(){var t=Konva.DD;return!(!t.node||t.node._id!==this._id||!t.isDragging)},Konva.Node.prototype._listenDrag=function(){var t=this;this._dragCleanup(),"Stage"===this.getClassName()?this.on("contentMousedown.konva contentTouchstart.konva",function(e){Konva.DD.node||t.startDrag(e)}):this.on("mousedown.konva touchstart.konva",function(e){1!==e.evt.button&&2!==e.evt.button&&(Konva.DD.node||t.startDrag(e))})},Konva.Node.prototype._dragChange=function(){if(this.attrs.draggable)this._listenDrag();else{this._dragCleanup();var t=this.getStage(),e=Konva.DD;t&&e.node&&e.node._id===this._id&&e.node.stopDrag()}},Konva.Node.prototype._dragCleanup=function(){"Stage"===this.getClassName()?(this.off("contentMousedown.konva"),this.off("contentTouchstart.konva")):(this.off("mousedown.konva"),this.off("touchstart.konva"))},Konva.Factory.addGetterSetter(Konva.Node,"dragBoundFunc"),Konva.Factory.addGetter(Konva.Node,"draggable",!1),Konva.Factory.addOverloadedGetterSetter(Konva.Node,"draggable"),Konva.isBrowser&&(window.addEventListener("mouseup",Konva.DD._endDragBefore,!0),window.addEventListener("touchend",Konva.DD._endDragBefore,!0),window.addEventListener("mousemove",Konva.DD._drag),window.addEventListener("touchmove",Konva.DD._drag),window.addEventListener("mouseup",Konva.DD._endDragAfter,!1),window.addEventListener("touchend",Konva.DD._endDragAfter,!1))}(),function(){"use strict";Konva.Rect=function(t){this.___init(t)},Konva.Rect.prototype={___init:function(t){Konva.Shape.call(this,t),this.className="Rect",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){var e=this.getCornerRadius(),n=this.getWidth(),r=this.getHeight();t.beginPath(),e?(e=Math.min(e,n/2,r/2),t.moveTo(e,0),t.lineTo(n-e,0),t.arc(n-e,e,e,3*Math.PI/2,0,!1),t.lineTo(n,r-e),t.arc(n-e,r-e,e,0,Math.PI/2,!1),t.lineTo(e,r),t.arc(e,r-e,e,Math.PI/2,Math.PI,!1),t.lineTo(0,e),t.arc(e,e,e,Math.PI,3*Math.PI/2,!1)):t.rect(0,0,n,r),t.closePath(),t.fillStrokeShape(this)}},Konva.Util.extend(Konva.Rect,Konva.Shape),Konva.Factory.addGetterSetter(Konva.Rect,"cornerRadius",0,Konva.Validators.getNumberValidator()),Konva.Collection.mapMethods(Konva.Rect)}(),function(t){"use strict";var e=2*Math.PI-1e-4;t.Circle=function(t){this.___init(t)},t.Circle.prototype={_centroid:!0,___init:function(e){t.Shape.call(this,e),this.className="Circle",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){t.beginPath(),t.arc(0,0,this.getRadius(),0,e,!1),t.closePath(),t.fillStrokeShape(this)},getWidth:function(){return 2*this.getRadius()},getHeight:function(){return 2*this.getRadius()},setWidth:function(e){t.Node.prototype.setWidth.call(this,e),this.radius()!==e/2&&this.setRadius(e/2)},setHeight:function(e){t.Node.prototype.setHeight.call(this,e),this.radius()!==e/2&&this.setRadius(e/2)}},t.Util.extend(t.Circle,t.Shape),t.Factory.addGetterSetter(t.Circle,"radius",0,t.Validators.getNumberValidator()),t.Factory.addOverloadedGetterSetter(t.Circle,"radius"),t.Collection.mapMethods(t.Circle)}(Konva),function(){"use strict";var t=2*Math.PI-1e-4;Konva.Ellipse=function(t){this.___init(t)},Konva.Ellipse.prototype={_centroid:!0,___init:function(t){Konva.Shape.call(this,t),this.className="Ellipse",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(e){var n=this.getRadiusX(),r=this.getRadiusY();e.beginPath(),e.save(),n!==r&&e.scale(1,r/n),e.arc(0,0,n,0,t,!1),e.restore(),e.closePath(),e.fillStrokeShape(this)},getWidth:function(){return 2*this.getRadiusX()},getHeight:function(){return 2*this.getRadiusY()},setWidth:function(t){Konva.Node.prototype.setWidth.call(this,t),this.setRadius({x:t/2})},setHeight:function(t){Konva.Node.prototype.setHeight.call(this,t),this.setRadius({y:t/2})}},Konva.Util.extend(Konva.Ellipse,Konva.Shape),Konva.Factory.addComponentsGetterSetter(Konva.Ellipse,"radius",["x","y"]),Konva.Factory.addGetterSetter(Konva.Ellipse,"radiusX",0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Ellipse,"radiusY",0,Konva.Validators.getNumberValidator()),Konva.Collection.mapMethods(Konva.Ellipse)}(),function(){"use strict";var t=2*Math.PI-1e-4;Konva.Ring=function(t){this.___init(t)},Konva.Ring.prototype={_centroid:!0,___init:function(t){Konva.Shape.call(this,t),this.className="Ring",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(e){e.beginPath(),e.arc(0,0,this.getInnerRadius(),0,t,!1),e.moveTo(this.getOuterRadius(),0),e.arc(0,0,this.getOuterRadius(),t,0,!0),e.closePath(),e.fillStrokeShape(this)},getWidth:function(){return 2*this.getOuterRadius()},getHeight:function(){return 2*this.getOuterRadius()},setWidth:function(t){Konva.Node.prototype.setWidth.call(this,t),this.outerRadius()!==t/2&&this.setOuterRadius(t/2)},setHeight:function(t){Konva.Node.prototype.setHeight.call(this,t),this.outerRadius()!==t/2&&this.setOuterRadius(t/2)},setOuterRadius:function(t){this._setAttr("outerRadius",t),this.setWidth(2*t),this.setHeight(2*t)}},Konva.Util.extend(Konva.Ring,Konva.Shape),Konva.Factory.addGetterSetter(Konva.Ring,"innerRadius",0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetter(Konva.Ring,"outerRadius",0,Konva.Validators.getNumberValidator()),Konva.Factory.addOverloadedGetterSetter(Konva.Ring,"outerRadius"),Konva.Collection.mapMethods(Konva.Ring)}(),function(){"use strict";Konva.Wedge=function(t){this.___init(t)},Konva.Wedge.prototype={_centroid:!0,___init:function(t){Konva.Shape.call(this,t),this.className="Wedge",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){t.beginPath(),t.arc(0,0,this.getRadius(),0,Konva.getAngle(this.getAngle()),this.getClockwise()),t.lineTo(0,0),t.closePath(),t.fillStrokeShape(this)},getWidth:function(){return 2*this.getRadius()},getHeight:function(){return 2*this.getRadius()},setWidth:function(t){Konva.Node.prototype.setWidth.call(this,t),this.radius()!==t/2&&this.setRadius(t/2)},setHeight:function(t){Konva.Node.prototype.setHeight.call(this,t),this.radius()!==t/2&&this.setRadius(t/2)}},Konva.Util.extend(Konva.Wedge,Konva.Shape),Konva.Factory.addGetterSetter(Konva.Wedge,"radius",0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Wedge,"angle",0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Wedge,"clockwise",!1),Konva.Factory.backCompat(Konva.Wedge,{angleDeg:"angle",getAngleDeg:"getAngle",setAngleDeg:"setAngle"}),Konva.Collection.mapMethods(Konva.Wedge)}(),function(t){"use strict";t.Arc=function(t){this.___init(t)},t.Arc.prototype={_centroid:!0,___init:function(e){t.Shape.call(this,e),this.className="Arc",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(e){var n=t.getAngle(this.angle()),r=this.clockwise();e.beginPath(),e.arc(0,0,this.getOuterRadius(),0,n,r),e.arc(0,0,this.getInnerRadius(),n,0,!r),e.closePath(),e.fillStrokeShape(this)},getWidth:function(){return 2*this.getOuterRadius()},getHeight:function(){return 2*this.getOuterRadius()},setWidth:function(e){t.Node.prototype.setWidth.call(this,e),this.getOuterRadius()!==e/2&&this.setOuterRadius(e/2)},setHeight:function(e){t.Node.prototype.setHeight.call(this,e),this.getOuterRadius()!==e/2&&this.setOuterRadius(e/2)}},t.Util.extend(t.Arc,t.Shape),t.Factory.addGetterSetter(t.Arc,"innerRadius",0,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Arc,"outerRadius",0,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Arc,"angle",0,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Arc,"clockwise",!1),t.Collection.mapMethods(t.Arc)}(Konva),function(){"use strict";Konva.Image=function(t){this.___init(t)},Konva.Image.prototype={___init:function(t){Konva.Shape.call(this,t),this.className="Image",this.sceneFunc(this._sceneFunc),this.hitFunc(this._hitFunc)},_useBufferCanvas:function(){return(this.hasShadow()||1!==this.getAbsoluteOpacity())&&this.hasStroke()&&this.getStage()},_sceneFunc:function(t){var e,n,r,o=this.getWidth(),i=this.getHeight(),a=this.getImage();a&&(e=this.getCropWidth(),n=this.getCropHeight(),r=e&&n?[a,this.getCropX(),this.getCropY(),e,n,0,0,o,i]:[a,0,0,o,i]),(this.hasFill()||this.hasStroke())&&(t.beginPath(),t.rect(0,0,o,i),t.closePath(),t.fillStrokeShape(this)),a&&t.drawImage.apply(t,r)},_hitFunc:function(t){var e=this.getWidth(),n=this.getHeight();t.beginPath(),t.rect(0,0,e,n),t.closePath(),t.fillStrokeShape(this)},getWidth:function(){var t=this.getImage();return this.attrs.width||(t?t.width:0)},getHeight:function(){var t=this.getImage();return this.attrs.height||(t?t.height:0)}},Konva.Util.extend(Konva.Image,Konva.Shape),Konva.Factory.addGetterSetter(Konva.Image,"image"),Konva.Factory.addComponentsGetterSetter(Konva.Image,"crop",["x","y","width","height"]),Konva.Factory.addGetterSetter(Konva.Image,"cropX",0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Image,"cropY",0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Image,"cropWidth",0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Image,"cropHeight",0,Konva.Validators.getNumberValidator()),Konva.Collection.mapMethods(Konva.Image),Konva.Image.fromURL=function(t,e){var n=new Image;n.onload=function(){var t=new Konva.Image({image:n});e(t)},n.crossOrigin="Anonymous",n.src=t}}(),function(){"use strict";var t,e="2d",n=["fontFamily","fontSize","fontStyle","fontVariant","padding","align","verticalAlign","lineHeight","text","width","height","wrap","ellipsis","letterSpacing"],r=n.length;function o(){return t||(t=Konva.Util.createCanvasElement().getContext(e))}function i(t){t.fillText(this.partialText,0,0)}function a(t){t.strokeText(this.partialText,0,0)}Konva.Text=function(t){this.___init(t)},Konva.Text.prototype={___init:function(t){(t=t||{}).fillLinearGradientColorStops||t.fillRadialGradientColorStops||(t.fill=t.fill||"black"),Konva.Shape.call(this,t),this._fillFunc=i,this._strokeFunc=a,this.className="Text";for(var e=0;e<r;e++)this.on(n[e]+"Change.konva",this._setTextData);this._setTextData(),this.sceneFunc(this._sceneFunc),this.hitFunc(this._hitFunc)},_sceneFunc:function(t){var e,n=this.getPadding(),r=this.getTextHeight(),o=this.getLineHeight()*r,i=this.textArr,a=i.length,l=this.getVerticalAlign(),s=0,c=this.getAlign(),u=this.getWidth(),d=this.getLetterSpacing(),f=this.textDecoration(),h=this.fill(),p=this.fontSize();for(t.setAttr("font",this._getContextFont()),t.setAttr("textBaseline","middle"),t.setAttr("textAlign","left"),"middle"===l?s=(this.getHeight()-a*o-2*n)/2:"bottom"===l&&(s=this.getHeight()-a*o-2*n),n?(t.translate(n,0),t.translate(0,s+n+o/2)):t.translate(0,s+o/2),e=0;e<a;e++){var v,y,g,m=i[e],b=m.text,_=m.width,x=e!==a-1;if(t.save(),"right"===c?t.translate(u-_-2*n,0):"center"===c&&t.translate((u-_-2*n)/2,0),-1!==f.indexOf("underline")&&(t.save(),t.beginPath(),t.moveTo(0,Math.round(o/2)),y=0===(v=b.split(" ").length-1),g="justify"===c&&x&&!y?u-2*n:_,t.lineTo(Math.round(g),Math.round(o/2)),t.lineWidth=p/15,t.strokeStyle=h,t.stroke(),t.restore()),-1!==f.indexOf("line-through")&&(t.save(),t.beginPath(),t.moveTo(0,0),y=0===(v=b.split(" ").length-1),g="justify"===c&&x&&!y?u-2*n:_,t.lineTo(Math.round(g),0),t.lineWidth=p/15,t.strokeStyle=h,t.stroke(),t.restore()),0!==d||"justify"===c){v=b.split(" ").length-1;for(var w=0;w<b.length;w++){var S=b[w];" "===S&&e!==a-1&&"justify"===c&&t.translate(Math.floor((u-2*n-_)/v),0),this.partialText=S,t.fillStrokeShape(this),t.translate(Math.round(this._getTextSize(S).width)+d,0)}}else this.partialText=b,t.fillStrokeShape(this);t.restore(),a>1&&t.translate(0,o)}},_hitFunc:function(t){var e=this.getWidth(),n=this.getHeight();t.beginPath(),t.rect(0,0,e,n),t.closePath(),t.fillStrokeShape(this)},setText:function(t){var e=Konva.Util._isString(t)?t:(t||"").toString();return this._setAttr("text",e),this},getWidth:function(){return"auto"===this.attrs.width||void 0===this.attrs.width?this.getTextWidth()+2*this.getPadding():this.attrs.width},getHeight:function(){return"auto"===this.attrs.height||void 0===this.attrs.height?this.getTextHeight()*this.textArr.length*this.getLineHeight()+2*this.getPadding():this.attrs.height},getTextWidth:function(){return this.textWidth},getTextHeight:function(){return this.textHeight},_getTextSize:function(t){var e,n=o(),r=this.getFontSize();return n.save(),n.font=this._getContextFont(),e=n.measureText(t),n.restore(),{width:e.width,height:parseInt(r,10)}},_getContextFont:function(){return Konva.UA.isIE?this.getFontStyle()+" "+this.getFontSize()+"px "+this.getFontFamily():this.getFontStyle()+" "+this.getFontVariant()+" "+this.getFontSize()+"px "+this.getFontFamily()},_addTextLine:function(t){"justify"===this.align()&&(t=t.trim());var e=this._getTextWidth(t);return this.textArr.push({text:t,width:e})},_getTextWidth:function(t){var e=this.getLetterSpacing(),n=t.length;return o().measureText(t).width+(n?e*(n-1):0)},_setTextData:function(){var t=this.getText().split("\n"),e=+this.getFontSize(),n=0,r=this.getLineHeight()*e,i=this.attrs.width,a=this.attrs.height,l="auto"!==i,s="auto"!==a,c=this.getPadding(),u=i-2*c,d=a-2*c,f=0,h=this.getWrap(),p="none"!==h,v="char"!==h&&p,y=this.getEllipsis()&&!p;this.textArr=[],o().font=this._getContextFont();for(var g=0,m=t.length;g<m;++g){var b=t[g],_=y?this._getTextWidth("…"):0,x=this._getTextWidth(b);if(l&&x>u)for(;b.length>0;){for(var w=0,S=b.length,C="",T=0;w<S;){var F=w+S>>>1,O=b.slice(0,F+1),P=this._getTextWidth(O)+_;P<=u?(w=F+1,C=O+(y?"…":""),T=P):S=F}if(!C)break;if(v){var E,j=b[C.length];(E=(" "===j||"-"===j)&&T<=u?C.length:Math.max(C.lastIndexOf(" "),C.lastIndexOf("-"))+1)>0&&(w=E,C=C.slice(0,w),T=this._getTextWidth(C))}if(C=Konva.Util.trimRight(C),this._addTextLine(C),n=Math.max(n,T),f+=r,!p||s&&f+r>d)break;if(b=b.slice(w),(b=Konva.Util.trimLeft(b)).length>0&&(x=this._getTextWidth(b))<=u){this._addTextLine(b),f+=r,n=Math.max(n,x);break}}else this._addTextLine(b),f+=r,n=Math.max(n,x);if(s&&f+r>d)break}this.textHeight=e,this.textWidth=n}},Konva.Util.extend(Konva.Text,Konva.Shape),Konva.Factory.addSetter(Konva.Node,"width",Konva.Validators.getNumberOrAutoValidator()),Konva.Factory.addSetter(Konva.Node,"height",Konva.Validators.getNumberOrAutoValidator()),Konva.Factory.addGetterSetter(Konva.Text,"fontFamily","Arial"),Konva.Factory.addGetterSetter(Konva.Text,"fontSize",12,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Text,"fontStyle","normal"),Konva.Factory.addGetterSetter(Konva.Text,"fontVariant","normal"),Konva.Factory.addGetterSetter(Konva.Text,"padding",0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Text,"align","left"),Konva.Factory.addGetterSetter(Konva.Text,"verticalAlign","top"),Konva.Factory.addGetterSetter(Konva.Text,"lineHeight",1,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Text,"wrap","word"),Konva.Factory.addGetterSetter(Konva.Text,"ellipsis",!1),Konva.Factory.addGetterSetter(Konva.Text,"letterSpacing",0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetter(Konva.Text,"text",""),Konva.Factory.addOverloadedGetterSetter(Konva.Text,"text"),Konva.Factory.addGetterSetter(Konva.Text,"textDecoration",""),Konva.Collection.mapMethods(Konva.Text)}(),function(){"use strict";Konva.Line=function(t){this.___init(t)},Konva.Line.prototype={___init:function(t){Konva.Shape.call(this,t),this.className="Line",this.on("pointsChange.konva tensionChange.konva closedChange.konva bezierChange.konva",function(){this._clearCache("tensionPoints")}),this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){var e,n,r,o=this.getPoints(),i=o.length,a=this.getTension(),l=this.getClosed(),s=this.getBezier();if(i){if(t.beginPath(),t.moveTo(o[0],o[1]),0!==a&&i>4){for(n=(e=this.getTensionPoints()).length,r=l?0:4,l||t.quadraticCurveTo(e[0],e[1],e[2],e[3]);r<n-2;)t.bezierCurveTo(e[r++],e[r++],e[r++],e[r++],e[r++],e[r++]);l||t.quadraticCurveTo(e[n-2],e[n-1],o[i-2],o[i-1])}else if(s)for(r=2;r<i;)t.bezierCurveTo(o[r++],o[r++],o[r++],o[r++],o[r++],o[r++]);else for(r=2;r<i;r+=2)t.lineTo(o[r],o[r+1]);l?(t.closePath(),t.fillStrokeShape(this)):t.strokeShape(this)}},getTensionPoints:function(){return this._getCache("tensionPoints",this._getTensionPoints)},_getTensionPoints:function(){return this.getClosed()?this._getTensionPointsClosed():Konva.Util._expandPoints(this.getPoints(),this.getTension())},_getTensionPointsClosed:function(){var t=this.getPoints(),e=t.length,n=this.getTension(),r=Konva.Util,o=r._getControlPoints(t[e-2],t[e-1],t[0],t[1],t[2],t[3],n),i=r._getControlPoints(t[e-4],t[e-3],t[e-2],t[e-1],t[0],t[1],n),a=Konva.Util._expandPoints(t,n);return[o[2],o[3]].concat(a).concat([i[0],i[1],t[e-2],t[e-1],i[2],i[3],o[0],o[1],t[0],t[1]])},getWidth:function(){return this.getSelfRect().width},getHeight:function(){return this.getSelfRect().height},getSelfRect:function(){for(var t,e,n,r=(t=0!==this.getTension()?this._getTensionPoints():this.getPoints())[0],o=t[0],i=t[1],a=t[1],l=0;l<t.length/2;l++)e=t[2*l],n=t[2*l+1],r=Math.min(r,e),o=Math.max(o,e),i=Math.min(i,n),a=Math.max(a,n);return{x:Math.round(r),y:Math.round(i),width:Math.round(o-r),height:Math.round(a-i)}}},Konva.Util.extend(Konva.Line,Konva.Shape),Konva.Factory.addGetterSetter(Konva.Line,"closed",!1),Konva.Factory.addGetterSetter(Konva.Line,"bezier",!1),Konva.Factory.addGetterSetter(Konva.Line,"tension",0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Line,"points",[],Konva.Validators.getNumberArrayValidator()),Konva.Collection.mapMethods(Konva.Line)}(),function(){"use strict";Konva.Sprite=function(t){this.___init(t)},Konva.Sprite.prototype={___init:function(t){Konva.Shape.call(this,t),this.className="Sprite",this._updated=!0;var e=this;this.anim=new Konva.Animation(function(){var t=e._updated;return e._updated=!1,t}),this.on("animationChange.konva",function(){this.frameIndex(0)}),this.on("frameIndexChange.konva",function(){this._updated=!0}),this.on("frameRateChange.konva",function(){this.anim.isRunning()&&(clearInterval(this.interval),this._setInterval())}),this.sceneFunc(this._sceneFunc),this.hitFunc(this._hitFunc)},_sceneFunc:function(t){var e=this.getAnimation(),n=this.frameIndex(),r=4*n,o=this.getAnimations()[e],i=this.frameOffsets(),a=o[r+0],l=o[r+1],s=o[r+2],c=o[r+3],u=this.getImage();if((this.hasFill()||this.hasStroke())&&(t.beginPath(),t.rect(0,0,s,c),t.closePath(),t.fillStrokeShape(this)),u)if(i){var d=i[e],f=2*n;t.drawImage(u,a,l,s,c,d[f+0],d[f+1],s,c)}else t.drawImage(u,a,l,s,c,0,0,s,c)},_hitFunc:function(t){var e=this.getAnimation(),n=this.frameIndex(),r=4*n,o=this.getAnimations()[e],i=this.frameOffsets(),a=o[r+2],l=o[r+3];if(t.beginPath(),i){var s=i[e],c=2*n;t.rect(s[c+0],s[c+1],a,l)}else t.rect(0,0,a,l);t.closePath(),t.fillShape(this)},_useBufferCanvas:function(){return(this.hasShadow()||1!==this.getAbsoluteOpacity())&&this.hasStroke()},_setInterval:function(){var t=this;this.interval=setInterval(function(){t._updateIndex()},1e3/this.getFrameRate())},start:function(){if(!this.isRunning()){var t=this.getLayer();this.anim.setLayers(t),this._setInterval(),this.anim.start()}},stop:function(){this.anim.stop(),clearInterval(this.interval)},isRunning:function(){return this.anim.isRunning()},_updateIndex:function(){var t=this.frameIndex(),e=this.getAnimation();t<this.getAnimations()[e].length/4-1?this.frameIndex(t+1):this.frameIndex(0)}},Konva.Util.extend(Konva.Sprite,Konva.Shape),Konva.Factory.addGetterSetter(Konva.Sprite,"animation"),Konva.Factory.addGetterSetter(Konva.Sprite,"animations"),Konva.Factory.addGetterSetter(Konva.Sprite,"frameOffsets"),Konva.Factory.addGetterSetter(Konva.Sprite,"image"),Konva.Factory.addGetterSetter(Konva.Sprite,"frameIndex",0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Sprite,"frameRate",17,Konva.Validators.getNumberValidator()),Konva.Factory.backCompat(Konva.Sprite,{index:"frameIndex",getIndex:"getFrameIndex",setIndex:"setFrameIndex"}),Konva.Collection.mapMethods(Konva.Sprite)}(),function(){"use strict";Konva.Path=function(t){this.___init(t)},Konva.Path.prototype={___init:function(t){this.dataArray=[];var e=this;Konva.Shape.call(this,t),this.className="Path",this.dataArray=Konva.Path.parsePathData(this.getData()),this.pathLength=0;for(var n=0;n<this.dataArray.length;++n)this.pathLength+=this.dataArray[n].pathLength;this.on("dataChange.konva",function(){e.dataArray=Konva.Path.parsePathData(this.getData()),this.pathLength=0;for(var t=0;t<this.dataArray.length;++t)this.pathLength+=this.dataArray[t].pathLength}),this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){var e=this.dataArray;t.beginPath();for(var n=0;n<e.length;n++){var r=e[n].command,o=e[n].points;switch(r){case"L":t.lineTo(o[0],o[1]);break;case"M":t.moveTo(o[0],o[1]);break;case"C":t.bezierCurveTo(o[0],o[1],o[2],o[3],o[4],o[5]);break;case"Q":t.quadraticCurveTo(o[0],o[1],o[2],o[3]);break;case"A":var i=o[0],a=o[1],l=o[2],s=o[3],c=o[4],u=o[5],d=o[6],f=o[7],h=l>s?l:s,p=l>s?1:l/s,v=l>s?s/l:1;t.translate(i,a),t.rotate(d),t.scale(p,v),t.arc(0,0,h,c,c+u,1-f),t.scale(1/p,1/v),t.rotate(-d),t.translate(-i,-a);break;case"z":t.closePath()}}t.fillStrokeShape(this)},getSelfRect:function(){var t=[];this.dataArray.forEach(function(e){t=t.concat(e.points)});for(var e,n,r=t[0],o=t[0],i=t[1],a=t[1],l=0;l<t.length/2;l++)e=t[2*l],n=t[2*l+1],isNaN(e)||(r=Math.min(r,e),o=Math.max(o,e)),isNaN(n)||(i=Math.min(i,n),a=Math.max(a,n));return{x:Math.round(r),y:Math.round(i),width:Math.round(o-r),height:Math.round(a-i)}},getLength:function(){return this.pathLength},getPointAtLength:function(t){var e,n=0,r=this.dataArray.length;if(!r)return null;for(;n<r&&t>this.dataArray[n].pathLength;)t-=this.dataArray[n].pathLength,++n;if(n===r)return{x:(e=this.dataArray[n-1].points.slice(-2))[0],y:e[1]};if(t<.01)return{x:(e=this.dataArray[n].points.slice(0,2))[0],y:e[1]};var o=this.dataArray[n],i=o.points;switch(o.command){case"L":return Konva.Path.getPointOnLine(t,o.start.x,o.start.y,i[0],i[1]);case"C":return Konva.Path.getPointOnCubicBezier(t/o.pathLength,o.start.x,o.start.y,i[0],i[1],i[2],i[3],i[4],i[5]);case"Q":return Konva.Path.getPointOnQuadraticBezier(t/o.pathLength,o.start.x,o.start.y,i[0],i[1],i[2],i[3]);case"A":var a=i[0],l=i[1],s=i[2],c=i[3],u=i[4],d=i[5],f=i[6];return u+=d*t/o.pathLength,Konva.Path.getPointOnEllipticalArc(a,l,s,c,u,f)}return null}},Konva.Util.extend(Konva.Path,Konva.Shape),Konva.Path.getLineLength=function(t,e,n,r){return Math.sqrt((n-t)*(n-t)+(r-e)*(r-e))},Konva.Path.getPointOnLine=function(t,e,n,r,o,i,a){void 0===i&&(i=e),void 0===a&&(a=n);var l=(o-n)/(r-e+1e-8),s=Math.sqrt(t*t/(1+l*l));r<e&&(s*=-1);var c,u=l*s;if(r===e)c={x:i,y:a+u};else if((a-n)/(i-e+1e-8)===l)c={x:i+s,y:a+u};else{var d,f,h=this.getLineLength(e,n,r,o);if(h<1e-8)return;var p=(i-e)*(r-e)+(a-n)*(o-n);d=e+(p/=h*h)*(r-e),f=n+p*(o-n);var v=this.getLineLength(i,a,d,f),y=Math.sqrt(t*t-v*v);s=Math.sqrt(y*y/(1+l*l)),r<e&&(s*=-1),c={x:d+s,y:f+(u=l*s)}}return c},Konva.Path.getPointOnCubicBezier=function(t,e,n,r,o,i,a,l,s){function c(t){return t*t*t}function u(t){return 3*t*t*(1-t)}function d(t){return 3*t*(1-t)*(1-t)}function f(t){return(1-t)*(1-t)*(1-t)}return{x:l*c(t)+i*u(t)+r*d(t)+e*f(t),y:s*c(t)+a*u(t)+o*d(t)+n*f(t)}},Konva.Path.getPointOnQuadraticBezier=function(t,e,n,r,o,i,a){function l(t){return t*t}function s(t){return 2*t*(1-t)}function c(t){return(1-t)*(1-t)}return{x:i*l(t)+r*s(t)+e*c(t),y:a*l(t)+o*s(t)+n*c(t)}},Konva.Path.getPointOnEllipticalArc=function(t,e,n,r,o,i){var a=Math.cos(i),l=Math.sin(i),s=n*Math.cos(o),c=r*Math.sin(o);return{x:t+(s*a-c*l),y:e+(s*l+c*a)}},Konva.Path.parsePathData=function(t){if(!t)return[];var e=t,n=["m","M","l","L","v","V","h","H","z","Z","c","C","q","Q","t","T","s","S","a","A"];e=e.replace(new RegExp(" ","g"),",");for(var r=0;r<n.length;r++)e=e.replace(new RegExp(n[r],"g"),"|"+n[r]);var o,i=e.split("|"),a=[],l=[],s=0,c=0,u=/([-+]?((\d+\.\d+)|((\d+)|(\.\d+)))(?:e[-+]?\d+)?)/gi;for(r=1;r<i.length;r++){var d=i[r],f=d.charAt(0);for(d=d.slice(1),l.length=0;o=u.exec(d);)l.push(o[0]);for(var h=[],p=0,v=l.length;p<v;p++){var y=parseFloat(l[p]);isNaN(y)?h.push(0):h.push(y)}for(;h.length>0&&!isNaN(h[0]);){var g,m,b,_,x,w,S,C,T,F,O=null,P=[],E=s,j=c;switch(f){case"l":s+=h.shift(),c+=h.shift(),O="L",P.push(s,c);break;case"L":s=h.shift(),c=h.shift(),P.push(s,c);break;case"m":var I=h.shift(),k=h.shift();if(s+=I,c+=k,O="M",a.length>2&&"z"===a[a.length-1].command)for(var L=a.length-2;L>=0;L--)if("M"===a[L].command){s=a[L].points[0]+I,c=a[L].points[1]+k;break}P.push(s,c),f="l";break;case"M":s=h.shift(),c=h.shift(),O="M",P.push(s,c),f="L";break;case"h":s+=h.shift(),O="L",P.push(s,c);break;case"H":s=h.shift(),O="L",P.push(s,c);break;case"v":c+=h.shift(),O="L",P.push(s,c);break;case"V":c=h.shift(),O="L",P.push(s,c);break;case"C":P.push(h.shift(),h.shift(),h.shift(),h.shift()),s=h.shift(),c=h.shift(),P.push(s,c);break;case"c":P.push(s+h.shift(),c+h.shift(),s+h.shift(),c+h.shift()),s+=h.shift(),c+=h.shift(),O="C",P.push(s,c);break;case"S":m=s,b=c,"C"===(g=a[a.length-1]).command&&(m=s+(s-g.points[2]),b=c+(c-g.points[3])),P.push(m,b,h.shift(),h.shift()),s=h.shift(),c=h.shift(),O="C",P.push(s,c);break;case"s":m=s,b=c,"C"===(g=a[a.length-1]).command&&(m=s+(s-g.points[2]),b=c+(c-g.points[3])),P.push(m,b,s+h.shift(),c+h.shift()),s+=h.shift(),c+=h.shift(),O="C",P.push(s,c);break;case"Q":P.push(h.shift(),h.shift()),s=h.shift(),c=h.shift(),P.push(s,c);break;case"q":P.push(s+h.shift(),c+h.shift()),s+=h.shift(),c+=h.shift(),O="Q",P.push(s,c);break;case"T":m=s,b=c,"Q"===(g=a[a.length-1]).command&&(m=s+(s-g.points[0]),b=c+(c-g.points[1])),s=h.shift(),c=h.shift(),O="Q",P.push(m,b,s,c);break;case"t":m=s,b=c,"Q"===(g=a[a.length-1]).command&&(m=s+(s-g.points[0]),b=c+(c-g.points[1])),s+=h.shift(),c+=h.shift(),O="Q",P.push(m,b,s,c);break;case"A":_=h.shift(),x=h.shift(),w=h.shift(),S=h.shift(),C=h.shift(),T=s,F=c,s=h.shift(),c=h.shift(),O="A",P=this.convertEndpointToCenterParameterization(T,F,s,c,S,C,_,x,w);break;case"a":_=h.shift(),x=h.shift(),w=h.shift(),S=h.shift(),C=h.shift(),T=s,F=c,s+=h.shift(),c+=h.shift(),O="A",P=this.convertEndpointToCenterParameterization(T,F,s,c,S,C,_,x,w)}a.push({command:O||f,points:P,start:{x:E,y:j},pathLength:this.calcLength(E,j,O||f,P)})}"z"!==f&&"Z"!==f||a.push({command:"z",points:[],start:void 0,pathLength:0})}return a},Konva.Path.calcLength=function(t,e,n,r){var o,i,a,l,s=Konva.Path;switch(n){case"L":return s.getLineLength(t,e,r[0],r[1]);case"C":for(o=0,i=s.getPointOnCubicBezier(0,t,e,r[0],r[1],r[2],r[3],r[4],r[5]),l=.01;l<=1;l+=.01)a=s.getPointOnCubicBezier(l,t,e,r[0],r[1],r[2],r[3],r[4],r[5]),o+=s.getLineLength(i.x,i.y,a.x,a.y),i=a;return o;case"Q":for(o=0,i=s.getPointOnQuadraticBezier(0,t,e,r[0],r[1],r[2],r[3]),l=.01;l<=1;l+=.01)a=s.getPointOnQuadraticBezier(l,t,e,r[0],r[1],r[2],r[3]),o+=s.getLineLength(i.x,i.y,a.x,a.y),i=a;return o;case"A":o=0;var c=r[4],u=r[5],d=r[4]+u,f=Math.PI/180;if(Math.abs(c-d)<f&&(f=Math.abs(c-d)),i=s.getPointOnEllipticalArc(r[0],r[1],r[2],r[3],c,0),u<0)for(l=c-f;l>d;l-=f)a=s.getPointOnEllipticalArc(r[0],r[1],r[2],r[3],l,0),o+=s.getLineLength(i.x,i.y,a.x,a.y),i=a;else for(l=c+f;l<d;l+=f)a=s.getPointOnEllipticalArc(r[0],r[1],r[2],r[3],l,0),o+=s.getLineLength(i.x,i.y,a.x,a.y),i=a;return a=s.getPointOnEllipticalArc(r[0],r[1],r[2],r[3],d,0),o+=s.getLineLength(i.x,i.y,a.x,a.y)}return 0},Konva.Path.convertEndpointToCenterParameterization=function(t,e,n,r,o,i,a,l,s){var c=s*(Math.PI/180),u=Math.cos(c)*(t-n)/2+Math.sin(c)*(e-r)/2,d=-1*Math.sin(c)*(t-n)/2+Math.cos(c)*(e-r)/2,f=u*u/(a*a)+d*d/(l*l);f>1&&(a*=Math.sqrt(f),l*=Math.sqrt(f));var h=Math.sqrt((a*a*(l*l)-a*a*(d*d)-l*l*(u*u))/(a*a*(d*d)+l*l*(u*u)));o===i&&(h*=-1),isNaN(h)&&(h=0);var p=h*a*d/l,v=h*-l*u/a,y=(t+n)/2+Math.cos(c)*p-Math.sin(c)*v,g=(e+r)/2+Math.sin(c)*p+Math.cos(c)*v,m=function(t){return Math.sqrt(t[0]*t[0]+t[1]*t[1])},b=function(t,e){return(t[0]*e[0]+t[1]*e[1])/(m(t)*m(e))},_=function(t,e){return(t[0]*e[1]<t[1]*e[0]?-1:1)*Math.acos(b(t,e))},x=_([1,0],[(u-p)/a,(d-v)/l]),w=[(u-p)/a,(d-v)/l],S=[(-1*u-p)/a,(-1*d-v)/l],C=_(w,S);return b(w,S)<=-1&&(C=Math.PI),b(w,S)>=1&&(C=0),0===i&&C>0&&(C-=2*Math.PI),1===i&&C<0&&(C+=2*Math.PI),[y,g,a,l,x,C,c,i]},Konva.Factory.addGetterSetter(Konva.Path,"data"),Konva.Collection.mapMethods(Konva.Path)}(),function(){"use strict";function t(t){t.fillText(this.partialText,0,0)}function e(t){t.strokeText(this.partialText,0,0)}Konva.TextPath=function(t){this.___init(t)},Konva.TextPath.prototype={___init:function(n){var r=this;this.dummyCanvas=Konva.Util.createCanvasElement(),this.dataArray=[],Konva.Shape.call(this,n),this._fillFunc=t,this._strokeFunc=e,this._fillFuncHit=t,this._strokeFuncHit=e,this.className="TextPath",this.dataArray=Konva.Path.parsePathData(this.attrs.data),this.on("dataChange.konva",function(){r.dataArray=Konva.Path.parsePathData(this.attrs.data),r._setTextData()}),this.on("textChange.konva alignChange.konva letterSpacingChange.konva kerningFuncChange.konva",r._setTextData),n&&n.getKerning&&(Konva.Util.warn('getKerning TextPath API is deprecated. Please use "kerningFunc" instead.'),this.setKerningFunc(n.getKerning)),r._setTextData(),this.sceneFunc(this._sceneFunc),this.hitFunc(this._hitFunc)},_sceneFunc:function(t){t.setAttr("font",this._getContextFont()),t.setAttr("textBaseline",this.getTextBaseline()),t.setAttr("textAlign","left"),t.save();var e=this.textDecoration(),n=this.fill(),r=this.fontSize(),o=this.glyphInfo;"underline"===e&&t.beginPath();for(var i=0;i<o.length;i++){t.save();var a=o[i].p0;t.translate(a.x,a.y),t.rotate(o[i].rotation),this.partialText=o[i].text,t.fillStrokeShape(this),"underline"===e&&(0===i&&t.moveTo(0,r/2+1),t.lineTo(r,r/2+1)),t.restore()}"underline"===e&&(t.strokeStyle=n,t.lineWidth=r/20,t.stroke()),t.restore()},_hitFunc:function(t){t.beginPath();var e=this.glyphInfo;if(e.length>=1){var n=e[0].p0;t.moveTo(n.x,n.y)}for(var r=0;r<e.length;r++){var o=e[r].p1;t.lineTo(o.x,o.y)}t.setAttr("lineWidth",this.getFontSize()),t.setAttr("strokeStyle",this.colorKey),t.stroke()},getTextWidth:function(){return this.textWidth},getTextHeight:function(){return this.textHeight},setText:function(t){Konva.Text.prototype.setText.call(this,t)},_getTextSize:function(t){var e=this.dummyCanvas.getContext("2d");e.save(),e.font=this._getContextFont();var n=e.measureText(t);return e.restore(),{width:n.width,height:parseInt(this.attrs.fontSize,10)}},_setTextData:function(){var t=this,e=this._getTextSize(this.attrs.text),n=this.getLetterSpacing(),r=this.align(),o=this.getKerningFunc();this.textWidth=e.width,this.textHeight=e.height;var i=Math.max(this.textWidth+((this.attrs.text||"").length-1)*n,0);this.glyphInfo=[];for(var a=0,l=0;l<t.dataArray.length;l++)t.dataArray[l].pathLength>0&&(a+=t.dataArray[l].pathLength);var s=0;"center"===r&&(s=Math.max(0,a/2-i/2)),"right"===r&&(s=Math.max(0,a-i));for(var c,u,d,f=this.getText().split(""),h=this.getText().split(" ").length-1,p=-1,v=0,y=function(){v=0;for(var e=t.dataArray,n=p+1;n<e.length;n++){if(e[n].pathLength>0)return p=n,e[n];"M"===e[n].command&&(c={x:e[n].points[0],y:e[n].points[1]})}return{}},g=function(e){var o=t._getTextSize(e).width+n;" "===e&&"justify"===r&&(o+=(a-i)/h);var l=0,s=0;for(u=void 0;Math.abs(o-l)/o>.01&&s<25;){s++;for(var f=l;void 0===d;)(d=y())&&f+d.pathLength<o&&(f+=d.pathLength,d=void 0);if(d==={}||void 0===c)return;var p=!1;switch(d.command){case"L":Konva.Path.getLineLength(c.x,c.y,d.points[0],d.points[1])>o?u=Konva.Path.getPointOnLine(o,c.x,c.y,d.points[0],d.points[1],c.x,c.y):d=void 0;break;case"A":var g=d.points[4],m=d.points[5],b=d.points[4]+m;0===v?v=g+1e-8:o>l?v+=Math.PI/180*m/Math.abs(m):v-=Math.PI/360*m/Math.abs(m),(m<0&&v<b||m>=0&&v>b)&&(v=b,p=!0),u=Konva.Path.getPointOnEllipticalArc(d.points[0],d.points[1],d.points[2],d.points[3],v,d.points[6]);break;case"C":0===v?v=o>d.pathLength?1e-8:o/d.pathLength:o>l?v+=(o-l)/d.pathLength:v-=(l-o)/d.pathLength,v>1&&(v=1,p=!0),u=Konva.Path.getPointOnCubicBezier(v,d.start.x,d.start.y,d.points[0],d.points[1],d.points[2],d.points[3],d.points[4],d.points[5]);break;case"Q":0===v?v=o/d.pathLength:o>l?v+=(o-l)/d.pathLength:v-=(l-o)/d.pathLength,v>1&&(v=1,p=!0),u=Konva.Path.getPointOnQuadraticBezier(v,d.start.x,d.start.y,d.points[0],d.points[1],d.points[2],d.points[3])}void 0!==u&&(l=Konva.Path.getLineLength(c.x,c.y,u.x,u.y)),p&&(p=!1,d=void 0)}},m=t._getTextSize("C").width+n,b=0;b<s/m&&(g("C"),void 0!==c&&void 0!==u);b++)c=u;for(var _=0;_<f.length&&(g(f[_]),void 0!==c&&void 0!==u);_++){var x=Konva.Path.getLineLength(c.x,c.y,u.x,u.y),w=0;if(o)try{w=o(f[_-1],f[_])*this.fontSize()}catch(t){w=0}c.x+=w,u.x+=w,this.textWidth+=w;var S=Konva.Path.getPointOnLine(w+x/2,c.x,c.y,u.x,u.y),C=Math.atan2(u.y-c.y,u.x-c.x);this.glyphInfo.push({transposeX:S.x,transposeY:S.y,text:f[_],rotation:C,p0:c,p1:u}),c=u}},getSelfRect:function(){var t=[];this.glyphInfo.forEach(function(e){t.push(e.p0.x),t.push(e.p0.y),t.push(e.p1.x),t.push(e.p1.y)});for(var e,n,r=t[0],o=t[0],i=t[0],a=t[0],l=0;l<t.length/2;l++)e=t[2*l],n=t[2*l+1],r=Math.min(r,e),o=Math.max(o,e),i=Math.min(i,n),a=Math.max(a,n);var s=this.fontSize();return{x:Math.round(r)-s/2,y:Math.round(i)-s/2,width:Math.round(o-r)+s,height:Math.round(a-i)+s}}},Konva.TextPath.prototype._getContextFont=Konva.Text.prototype._getContextFont,Konva.Util.extend(Konva.TextPath,Konva.Shape),Konva.Factory.addGetterSetter(Konva.TextPath,"data"),Konva.Factory.addGetterSetter(Konva.TextPath,"fontFamily","Arial"),Konva.Factory.addGetterSetter(Konva.TextPath,"fontSize",12,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.TextPath,"fontStyle","normal"),Konva.Factory.addGetterSetter(Konva.TextPath,"align","left"),Konva.Factory.addGetterSetter(Konva.TextPath,"letterSpacing",0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.TextPath,"textBaseline","middle"),Konva.Factory.addGetterSetter(Konva.TextPath,"fontVariant","normal"),Konva.Factory.addGetter(Konva.TextPath,"text",""),Konva.Factory.addGetterSetter(Konva.TextPath,"textDecoration",null),Konva.Factory.addGetterSetter(Konva.TextPath,"kerningFunc",null),Konva.Collection.mapMethods(Konva.TextPath)}(),function(){"use strict";Konva.RegularPolygon=function(t){this.___init(t)},Konva.RegularPolygon.prototype={_centroid:!0,___init:function(t){Konva.Shape.call(this,t),this.className="RegularPolygon",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){var e,n,r,o=this.attrs.sides,i=this.attrs.radius;for(t.beginPath(),t.moveTo(0,0-i),e=1;e<o;e++)n=i*Math.sin(2*e*Math.PI/o),r=-1*i*Math.cos(2*e*Math.PI/o),t.lineTo(n,r);t.closePath(),t.fillStrokeShape(this)},getWidth:function(){return 2*this.getRadius()},getHeight:function(){return 2*this.getRadius()},setWidth:function(t){Konva.Node.prototype.setWidth.call(this,t),this.radius()!==t/2&&this.setRadius(t/2)},setHeight:function(t){Konva.Node.prototype.setHeight.call(this,t),this.radius()!==t/2&&this.setRadius(t/2)}},Konva.Util.extend(Konva.RegularPolygon,Konva.Shape),Konva.Factory.addGetterSetter(Konva.RegularPolygon,"radius",0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.RegularPolygon,"sides",0,Konva.Validators.getNumberValidator()),Konva.Collection.mapMethods(Konva.RegularPolygon)}(),function(){"use strict";Konva.Star=function(t){this.___init(t)},Konva.Star.prototype={_centroid:!0,___init:function(t){Konva.Shape.call(this,t),this.className="Star",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){var e=this.innerRadius(),n=this.outerRadius(),r=this.numPoints();t.beginPath(),t.moveTo(0,0-n);for(var o=1;o<2*r;o++){var i=o%2==0?n:e,a=i*Math.sin(o*Math.PI/r),l=-1*i*Math.cos(o*Math.PI/r);t.lineTo(a,l)}t.closePath(),t.fillStrokeShape(this)},getWidth:function(){return 2*this.getOuterRadius()},getHeight:function(){return 2*this.getOuterRadius()},setWidth:function(t){Konva.Node.prototype.setWidth.call(this,t),this.outerRadius()!==t/2&&this.setOuterRadius(t/2)},setHeight:function(t){Konva.Node.prototype.setHeight.call(this,t),this.outerRadius()!==t/2&&this.setOuterRadius(t/2)}},Konva.Util.extend(Konva.Star,Konva.Shape),Konva.Factory.addGetterSetter(Konva.Star,"numPoints",5,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Star,"innerRadius",0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Star,"outerRadius",0,Konva.Validators.getNumberValidator()),Konva.Collection.mapMethods(Konva.Star)}(),function(){"use strict";var t=["fontFamily","fontSize","fontStyle","padding","lineHeight","text","width"],e=t.length;Konva.Label=function(t){this.____init(t)},Konva.Label.prototype={____init:function(t){var e=this;Konva.Group.call(this,t),this.className="Label",this.on("add.konva",function(t){e._addListeners(t.child),e._sync()})},getText:function(){return this.find("Text")[0]},getTag:function(){return this.find("Tag")[0]},_addListeners:function(n){var r,o=this,i=function(){o._sync()};for(r=0;r<e;r++)n.on(t[r]+"Change.konva",i)},getWidth:function(){return this.getText().getWidth()},getHeight:function(){return this.getText().getHeight()},_sync:function(){var t,e,n,r,o,i,a,l=this.getText(),s=this.getTag();if(l&&s){switch(t=l.getWidth(),e=l.getHeight(),n=s.getPointerDirection(),r=s.getPointerWidth(),a=s.getPointerHeight(),o=0,i=0,n){case"up":o=t/2,i=-1*a;break;case"right":o=t+r,i=e/2;break;case"down":o=t/2,i=e+a;break;case"left":o=-1*r,i=e/2}s.setAttrs({x:-1*o,y:-1*i,width:t,height:e}),l.setAttrs({x:-1*o,y:-1*i})}}},Konva.Util.extend(Konva.Label,Konva.Group),Konva.Collection.mapMethods(Konva.Label),Konva.Tag=function(t){this.___init(t)},Konva.Tag.prototype={___init:function(t){Konva.Shape.call(this,t),this.className="Tag",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){var e=this.getWidth(),n=this.getHeight(),r=this.getPointerDirection(),o=this.getPointerWidth(),i=this.getPointerHeight(),a=Math.min(this.getCornerRadius(),e/2,n/2);t.beginPath(),a?t.moveTo(a,0):t.moveTo(0,0),"up"===r&&(t.lineTo((e-o)/2,0),t.lineTo(e/2,-1*i),t.lineTo((e+o)/2,0)),a?(t.lineTo(e-a,0),t.arc(e-a,a,a,3*Math.PI/2,0,!1)):t.lineTo(e,0),"right"===r&&(t.lineTo(e,(n-i)/2),t.lineTo(e+o,n/2),t.lineTo(e,(n+i)/2)),a?(t.lineTo(e,n-a),t.arc(e-a,n-a,a,0,Math.PI/2,!1)):t.lineTo(e,n),"down"===r&&(t.lineTo((e+o)/2,n),t.lineTo(e/2,n+i),t.lineTo((e-o)/2,n)),a?(t.lineTo(a,n),t.arc(a,n-a,a,Math.PI/2,Math.PI,!1)):t.lineTo(0,n),"left"===r&&(t.lineTo(0,(n+i)/2),t.lineTo(-1*o,n/2),t.lineTo(0,(n-i)/2)),a&&(t.lineTo(0,a),t.arc(a,a,a,Math.PI,3*Math.PI/2,!1)),t.closePath(),t.fillStrokeShape(this)},getSelfRect:function(){var t=0,e=0,n=this.getPointerWidth(),r=this.getPointerHeight(),o=this.pointerDirection(),i=this.getWidth(),a=this.getHeight();return"up"===o?(e-=r,a+=r):"down"===o?a+=r:"left"===o?(t-=1.5*n,i+=n):"right"===o&&(i+=1.5*n),{x:t,y:e,width:i,height:a}}},Konva.Util.extend(Konva.Tag,Konva.Shape),Konva.Factory.addGetterSetter(Konva.Tag,"pointerDirection","none"),Konva.Factory.addGetterSetter(Konva.Tag,"pointerWidth",0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Tag,"pointerHeight",0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Tag,"cornerRadius",0,Konva.Validators.getNumberValidator()),Konva.Collection.mapMethods(Konva.Tag)}(),function(t){"use strict";t.Arrow=function(t){this.____init(t)},t.Arrow.prototype={____init:function(e){t.Line.call(this,e),this.className="Arrow"},_sceneFunc:function(e){t.Line.prototype._sceneFunc.apply(this,arguments);var n=2*Math.PI,r=this.points(),o=r,i=0!==this.getTension()&&r.length>4;i&&(o=this.getTensionPoints());var a,l,s=r.length;i?(a=r[s-2]-o[s-2],l=r[s-1]-o[s-1]):(a=r[s-2]-r[s-4],l=r[s-1]-r[s-3]);var c=(Math.atan2(l,a)+n)%n,u=this.pointerLength(),d=this.pointerWidth();e.save(),e.beginPath(),e.translate(r[s-2],r[s-1]),e.rotate(c),e.moveTo(0,0),e.lineTo(-u,d/2),e.lineTo(-u,-d/2),e.closePath(),e.restore(),this.pointerAtBeginning()&&(e.save(),e.translate(r[0],r[1]),i?(a=o[0]-r[0],l=o[1]-r[1]):(a=r[2]-r[0],l=r[3]-r[1]),e.rotate((Math.atan2(-l,-a)+n)%n),e.moveTo(0,0),e.lineTo(-u,d/2),e.lineTo(-u,-d/2),e.closePath(),e.restore());var f=this.dashEnabled();f&&(this.attrs.dashEnabled=!1,e.setLineDash([])),e.fillStrokeShape(this),f&&(this.attrs.dashEnabled=!0)}},t.Util.extend(t.Arrow,t.Line),t.Factory.addGetterSetter(t.Arrow,"pointerLength",10,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Arrow,"pointerWidth",10,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Arrow,"pointerAtBeginning",!1),t.Collection.mapMethods(t.Arrow)}(Konva),function(t){"use strict";var e=["resizeEnabledChange","rotateAnchorOffsetChange","rotateEnabledChange","enabledAnchorsChange","anchorSizeChange","borderEnabledChange","borderStrokeChange","borderStrokeWidthChange","borderDashChange","anchorStrokeChange","anchorStrokeWidthChange","anchorFillChange","anchorCornerRadiusChange","ignoreStrokeChange"].join(" "),n=["xChange.resizer","yChange.resizer","widthChange.resizer","heightChange.resizer","scaleXChange.resizer","scaleYChange.resizer","skewXChange.resizer","skewYChange.resizer","rotationChange.resizer","offsetXChange.resizer","offsetYChange.resizer","transformsEnabledChange.resizer"].join(" "),r=["widthChange.resizer","heightChange.resizer","scaleXChange.resizer","scaleYChange.resizer","skewXChange.resizer","skewYChange.resizer","rotationChange.resizer","offsetXChange.resizer","offsetYChange.resizer"].join(" "),o={"top-left":-45,"top-center":0,"top-right":45,"middle-right":-90,"middle-left":90,"bottom-left":-135,"bottom-center":180,"bottom-right":135};t.Transformer=function(t){this.____init(t)};var i=["top-left","top-center","top-right","middle-right","middle-left","bottom-left","bottom-center","bottom-right"];t.Transformer.prototype={_centroid:!1,____init:function(n){t.Group.call(this,n),this.className="Transformer",this._createElements(),this._handleMouseMove=this._handleMouseMove.bind(this),this._handleMouseUp=this._handleMouseUp.bind(this),this.update=this.update.bind(this),this.on(e,this.update),this.getNode()&&this.update()},attachTo:function(t){this.setNode(t)},setNode:function(t){return this._node&&this.detach(),this._node=t,this._resetTransformCache(),t.on(n,this._resetTransformCache.bind(this)),t.on(r,function(){this._transforming||this.update()}.bind(this)),!!this.findOne(".top-left")&&this.update(),this},getNode:function(){return this._node},detach:function(){this.getNode()&&(this.getNode().off(".resizer"),this._node=void 0),this._resetTransformCache()},_resetTransformCache:function(){this._clearCache("nodeRect"),this._clearCache("transform"),this._clearSelfAndDescendantCache("absoluteTransform")},_getNodeRect:function(){return this._getCache("nodeRect",this.__getNodeRect)},__getNodeRect:function(){var e=this.getNode();if(!e)return{x:-Number.MAX_SAFE_INTEGER,y:-Number.MAX_SAFE_INTEGER,width:0,height:0,rotation:0};var n=e.getClientRect({skipTransform:!0,skipShadow:!0,skipStroke:this.ignoreStroke()}),r=t.getAngle(e.rotation()),o=n.x*e.scaleX()-e.offsetX()*e.scaleX(),i=n.y*e.scaleY()-e.offsetY()*e.scaleY();return{x:e.x()+o*Math.cos(r)+i*Math.sin(-r),y:e.y()+i*Math.cos(r)+o*Math.sin(r),width:n.width*e.scaleX(),height:n.height*e.scaleY(),rotation:e.rotation()}},getX:function(){return this._getNodeRect().x},getY:function(){return this._getNodeRect().y},getRotation:function(){return this._getNodeRect().rotation},getWidth:function(){return this._getNodeRect().width},getHeight:function(){return this._getNodeRect().height},_createElements:function(){this._createBack(),i.forEach(function(t){this._createAnchor(t)}.bind(this)),this._createAnchor("rotater")},_createAnchor:function(e){var n=new t.Rect({stroke:"rgb(0, 161, 255)",fill:"white",strokeWidth:1,name:e+" _anchor",dragDistance:0,draggable:!0}),r=this;n.on("mousedown touchstart",function(t){r._handleMouseDown(t)}),n.on("dragstart",function(t){t.cancelBubble=!0}),n.on("dragmove",function(t){t.cancelBubble=!0}),n.on("dragend",function(t){t.cancelBubble=!0}),n.on("mouseenter",function(){var r=this.getParent(),i=t.getAngle(r.rotation()),a=r.getNode().getAbsoluteScale(),l=a.y*a.x<0,s=function(e,n,r){if("rotater"===e)return"crosshair";n+=t.Util._degToRad(o[e]||0),r&&(n*=-1);var i=(t.Util._radToDeg(n)%360+360)%360;return t.Util._inRange(i,337.5,360)||t.Util._inRange(i,0,22.5)?"ns-resize":t.Util._inRange(i,22.5,67.5)?"nesw-resize":t.Util._inRange(i,67.5,112.5)?"ew-resize":t.Util._inRange(i,112.5,157.5)?"nwse-resize":t.Util._inRange(i,157.5,202.5)?"ns-resize":t.Util._inRange(i,202.5,247.5)?"nesw-resize":t.Util._inRange(i,247.5,292.5)?"ew-resize":t.Util._inRange(i,292.5,337.5)?"nwse-resize":(t.Util.error("Transformer has unknown angle for cursor detection: "+i),"pointer")}(e,i,l);n.getStage().content.style.cursor=s,r._cursorChange=!0}),n.on("mouseout",function(){n.getStage()&&this.getParent()&&(n.getStage().content.style.cursor="",this.getParent()._cursorChange=!1)}),this.add(n)},_createBack:function(){var e=new t.Shape({name:"back",width:0,height:0,listening:!1,sceneFunc:function(e){var n=this.getParent(),r=n.getPadding();e.beginPath(),e.rect(-r,-r,this.width()+2*r,this.height()+2*r),e.moveTo(this.width()/2,-r),n.rotateEnabled()&&e.lineTo(this.width()/2,-n.rotateAnchorOffset()*t.Util._sign(this.height())),e.fillStrokeShape(this)}});this.add(e)},_handleMouseDown:function(t){this.movingResizer=t.target.name().split(" ")[0];var e=this._getNodeRect(),n=e.width,r=e.height,o=Math.sqrt(Math.pow(n,2)+Math.pow(r,2));this.sin=r/o,this.cos=n/o,window.addEventListener("mousemove",this._handleMouseMove),window.addEventListener("touchmove",this._handleMouseMove),window.addEventListener("mouseup",this._handleMouseUp,!0),window.addEventListener("touchend",this._handleMouseUp,!0),this._transforming=!0,this._fire("transformstart",{evt:t}),this.getNode()._fire("transformstart",{evt:t})},_handleMouseMove:function(e){var n,r,o,i=this.findOne("."+this.movingResizer),a=i.getStage().getContent().getBoundingClientRect(),l=a.left,s=a.top,c={x:(void 0!==e.clientX?e.clientX:e.touches[0].clientX)-l,y:(void 0!==e.clientX?e.clientY:e.touches[0].clientY)-s};i.setAbsolutePosition(c);var u=this.keepRatio()||e.shiftKey;if("top-left"===this.movingResizer)u&&(n=(o=Math.sqrt(Math.pow(this.findOne(".bottom-right").x()-i.x(),2)+Math.pow(this.findOne(".bottom-right").y()-i.y(),2)))*this.cos,r=o*this.sin,this.findOne(".top-left").x(this.findOne(".bottom-right").x()-n),this.findOne(".top-left").y(this.findOne(".bottom-right").y()-r));else if("top-center"===this.movingResizer)this.findOne(".top-left").y(i.y());else if("top-right"===this.movingResizer){u&&(n=(o=Math.sqrt(Math.pow(this.findOne(".bottom-left").x()-i.x(),2)+Math.pow(this.findOne(".bottom-left").y()-i.y(),2)))*this.cos,r=o*this.sin,this.findOne(".top-right").x(n),this.findOne(".top-right").y(this.findOne(".bottom-left").y()-r));var d=i.position();this.findOne(".top-left").y(d.y),this.findOne(".bottom-right").x(d.x)}else if("middle-left"===this.movingResizer)this.findOne(".top-left").x(i.x());else if("middle-right"===this.movingResizer)this.findOne(".bottom-right").x(i.x());else if("bottom-left"===this.movingResizer)u&&(n=(o=Math.sqrt(Math.pow(this.findOne(".top-right").x()-i.x(),2)+Math.pow(this.findOne(".top-right").y()-i.y(),2)))*this.cos,r=o*this.sin,this.findOne(".bottom-left").x(this.findOne(".top-right").x()-n),this.findOne(".bottom-left").y(r)),d=i.position(),this.findOne(".top-left").x(d.x),this.findOne(".bottom-right").y(d.y);else if("bottom-center"===this.movingResizer)this.findOne(".bottom-right").y(i.y());else if("bottom-right"===this.movingResizer)u&&(n=(o=Math.sqrt(Math.pow(this.findOne(".bottom-right").x(),2)+Math.pow(this.findOne(".bottom-right").y(),2)))*this.cos,r=o*this.sin,this.findOne(".bottom-right").x(n),this.findOne(".bottom-right").y(r));else if("rotater"===this.movingResizer){var f=this.getPadding(),h=this._getNodeRect();n=i.x()-h.width/2,r=-i.y()+h.height/2;var p=Math.atan2(-r,n)+Math.PI/2;h.height<0&&(p-=Math.PI);for(var v=t.getAngle(this.rotation()),y=t.Util._radToDeg(v)+t.Util._radToDeg(p),g=t.getAngle(this.getNode().rotation()),m=t.Util._degToRad(y),b=this.rotationSnaps(),_=0;_<b.length;_++){var x=t.getAngle(b[_]);Math.abs(x-t.Util._degToRad(y))%(2*Math.PI)<.1&&(y=t.Util._radToDeg(x),m=t.Util._degToRad(y))}var w=f,S=f;this._fitNodeInto({rotation:t.angleDeg?y:t.Util._degToRad(y),x:h.x+(h.width/2+f)*(Math.cos(g)-Math.cos(m))+(h.height/2+f)*(Math.sin(-g)-Math.sin(-m))-(w*Math.cos(v)+S*Math.sin(-v)),y:h.y+(h.height/2+f)*(Math.cos(g)-Math.cos(m))+(h.width/2+f)*(Math.sin(g)-Math.sin(m))-(S*Math.cos(v)+w*Math.sin(v)),width:h.width+2*f,height:h.height+2*f},e)}else console.error(new Error("Wrong position argument of selection resizer: ",this.movingResizer));if("rotater"!==this.movingResizer){var C=this.findOne(".top-left").getAbsolutePosition(this.getParent());if(this.getCenteredScaling()||e.altKey){var T=this.findOne(".top-left"),F=this.findOne(".bottom-right"),O=T.x(),P=T.y(),E=this.getWidth()-F.x(),j=this.getHeight()-F.y();F.move({x:-O,y:-P}),T.move({x:E,y:j}),C=T.getAbsolutePosition(this.getParent())}n=C.x,r=C.y;var I=this.findOne(".bottom-right").x()-this.findOne(".top-left").x(),k=this.findOne(".bottom-right").y()-this.findOne(".top-left").y();this._fitNodeInto({x:n+this.offsetX(),y:r+this.offsetY(),width:I,height:k},e)}},_handleMouseUp:function(t){this._removeEvents(t)},_removeEvents:function(t){if(this._transforming){this._transforming=!1,window.removeEventListener("mousemove",this._handleMouseMove),window.removeEventListener("touchmove",this._handleMouseMove),window.removeEventListener("mouseup",this._handleMouseUp,!0),window.removeEventListener("touchend",this._handleMouseUp,!0),this._fire("transformend",{evt:t});var e=this.getNode();e&&e.fire("transformend",{evt:t})}},_fitNodeInto:function(e,n){var r=this.getBoundBoxFunc();if(r){var o=this._getNodeRect();e=r.call(this,o,e)}this._settings=!0;var i=this.getNode();void 0!==e.rotation&&this.getNode().rotation(e.rotation);var a=i.getClientRect({skipTransform:!0,skipShadow:!0,skipStroke:this.ignoreStroke()}),l=this.getPadding(),s=(e.width-2*l)/a.width,c=(e.height-2*l)/a.height,u=t.getAngle(i.getRotation()),d=a.x*s-l-i.offsetX()*s,f=a.y*c-l-i.offsetY()*c;this.getNode().setAttrs({scaleX:s,scaleY:c,x:e.x-(d*Math.cos(u)+f*Math.sin(-u)),y:e.y-(f*Math.cos(u)+d*Math.sin(u))}),this._settings=!1,this._fire("transform",{evt:n}),this.getNode()._fire("transform",{evt:n}),this.update(),this.getLayer().batchDraw()},forceUpdate:function(){this._resetTransformCache(),this.update()},update:function(){var e=this._getNodeRect(),n=this.getNode(),r={x:1,y:1};n&&n.getParent()&&(r=n.getParent().getAbsoluteScale());var o={x:1/r.x,y:1/r.y},i=e.width,a=e.height,l=this.enabledAnchors(),s=this.resizeEnabled(),c=this.getPadding(),u=this.getAnchorSize();this.find("._anchor").setAttrs({width:u,height:u,offsetX:u/2,offsetY:u/2,stroke:this.getAnchorStroke(),strokeWidth:this.getAnchorStrokeWidth(),fill:this.getAnchorFill(),cornerRadius:this.getAnchorCornerRadius()}),this.findOne(".top-left").setAttrs({x:-c,y:-c,scale:o,visible:s&&l.indexOf("top-left")>=0}),this.findOne(".top-center").setAttrs({x:i/2,y:-c,scale:o,visible:s&&l.indexOf("top-center")>=0}),this.findOne(".top-right").setAttrs({x:i+c,y:-c,scale:o,visible:s&&l.indexOf("top-right")>=0}),this.findOne(".middle-left").setAttrs({x:-c,y:a/2,scale:o,visible:s&&l.indexOf("middle-left")>=0}),this.findOne(".middle-right").setAttrs({x:i+c,y:a/2,scale:o,visible:s&&l.indexOf("middle-right")>=0}),this.findOne(".bottom-left").setAttrs({x:-c,y:a+c,scale:o,visible:s&&l.indexOf("bottom-left")>=0}),this.findOne(".bottom-center").setAttrs({x:i/2,y:a+c,scale:o,visible:s&&l.indexOf("bottom-center")>=0}),this.findOne(".bottom-right").setAttrs({x:i+c,y:a+c,scale:o,visible:s&&l.indexOf("bottom-right")>=0});var d=-this.rotateAnchorOffset()*Math.abs(o.y);this.findOne(".rotater").setAttrs({x:i/2,y:d*t.Util._sign(a),scale:o,visible:this.rotateEnabled()}),this.findOne(".back").setAttrs({width:i*r.x,height:a*r.y,scale:o,visible:this.borderEnabled(),stroke:this.getBorderStroke(),strokeWidth:this.getBorderStrokeWidth(),dash:this.getBorderDash()})},isTransforming:function(){return this._transforming},stopTransform:function(){if(this._transforming){this._removeEvents();var t=this.findOne("."+this.movingResizer);t&&t.stopDrag()}},destroy:function(){this.getStage()&&this._cursorChange&&(this.getStage().content.style.cursor=""),t.Group.prototype.destroy.call(this),this.detach(),this._removeEvents()},toObject:function(){return t.Node.prototype.toObject.call(this)}},t.Util.extend(t.Transformer,t.Group),t.Factory.addGetterSetter(t.Transformer,"enabledAnchors",i,function(e){return e instanceof Array||t.Util.warn("enabledAnchors value should be an array"),e instanceof Array&&e.forEach(function(e){-1===i.indexOf(e)&&t.Util.warn("Unknown anchor name: "+e+". Available names are: "+i.join(", "))}),e||[]}),t.Factory.addGetterSetter(t.Transformer,"resizeEnabled",!0),t.Factory.addGetterSetter(t.Transformer,"anchorSize",10,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Transformer,"rotateEnabled",!0),t.Factory.addGetterSetter(t.Transformer,"rotationSnaps",[]),t.Factory.addGetterSetter(t.Transformer,"rotateAnchorOffset",50,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Transformer,"borderEnabled",!0),t.Factory.addGetterSetter(t.Transformer,"anchorStroke","rgb(0, 161, 255)"),t.Factory.addGetterSetter(t.Transformer,"anchorStrokeWidth",1,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Transformer,"anchorFill","white"),t.Factory.addGetterSetter(t.Transformer,"anchorCornerRadius",0,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Transformer,"borderStroke","rgb(0, 161, 255)"),t.Factory.addGetterSetter(t.Transformer,"borderStrokeWidth",1,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Transformer,"borderDash"),t.Factory.addGetterSetter(t.Transformer,"keepRatio",!0),t.Factory.addGetterSetter(t.Transformer,"centeredScaling",!1),t.Factory.addGetterSetter(t.Transformer,"ignoreStroke",!1),t.Factory.addGetterSetter(t.Transformer,"padding",0,t.Validators.getNumberValidator()),t.Factory.addOverloadedGetterSetter(t.Transformer,"node"),t.Factory.addGetterSetter(t.Transformer,"boundBoxFunc"),t.Factory.backCompat(t.Transformer,{lineEnabled:"borderEnabled",rotateHandlerOffset:"rotateAnchorOffset",enabledHandlers:"enabledAnchors"}),t.Collection.mapMethods(t.Transformer)}(Konva)}).call(this,n(14))},function(t,e,n){"use strict";e.__esModule=!0,e.toggleStrictMode=function(t){s=t},e.applyNodeProps=function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(!o&&"id"in e){var u='ReactKonva: You are using "id" attribute for a Konva node. In some very rare cases it may produce bugs. Currently we recommend not to use it and use "name" attribute instead.\nYou are using id = "'+e.id+'".\nFor more info see: https://github.com/konvajs/react-konva/issues/119';console.warn(u),o=!0}if(!i&&"zIndex"in e){console.warn('ReactKonva: You are using "zIndex" attribute for a Konva node.\nreact-konva may get confused with ordering. Just define correct order of elements in your render function of a component.\nFor more info see: https://github.com/konvajs/react-konva/issues/194\n'),i=!0}if(!a&&e.draggable){var d=void 0!==e.x||void 0!==e.y,f=e.onDragEnd||e.onDragMove;if(d&&!f){console.warn("ReactKonva: You have a Konva node with draggable = true and position defined but no onDragMove or onDragEnd events are handled.\nPosition of a node will be changed during drag&drop, so you should update state of the react app as well.\nConsider to add onDragMove or onDragEnd events.\nFor more info see: https://github.com/konvajs/react-konva/issues/256\n"),a=!0}}for(var h in n)if(!r[h]){var p="on"===h.slice(0,2),v=n[h]!==e[h];if(p&&v){var y=h.substr(2).toLowerCase();"content"===y.substr(0,7)&&(y="content"+y.substr(7,1).toUpperCase()+y.substr(8)),t.off(y,n[h])}var g=!e.hasOwnProperty(h);g&&t.setAttr(h,void 0)}var m=s||e._useStrictMode,b={},_=!1;for(var h in e)if(!r[h]){var p="on"===h.slice(0,2),x=n[h]!==e[h];if(p&&x){var y=h.substr(2).toLowerCase();"content"===y.substr(0,7)&&(y="content"+y.substr(7,1).toUpperCase()+y.substr(8)),e[h]&&t.on(y+l,e[h])}!p&&(e[h]!==n[h]||m&&e[h]!==t.getAttr(h))&&(_=!0,b[h]=e[h])}_&&(t.setAttrs(b),c(t))},e.updatePicture=c;var r={children:!0,ref:!0,key:!0,style:!0,forwardedRef:!0,unstable_applyCache:!0,unstable_applyDrawHitFromCache:!0},o=!1,i=!1,a=!1,l=e.EVENTS_NAMESPACE=".react-konva-event",s=!1;function c(t){var e=t.getLayer()||t.getStage();e&&e.batchDraw()}},function(t,e,n){var r=n(26),o=n(82),i=n(83),a=Object.defineProperty;e.f=n(20)?Object.defineProperty:function(t,e,n){if(r(t),e=i(e,!0),r(n),o)try{return a(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},function(t,e,n){var r=n(27),o=n(19).document,i=r(o)&&r(o.createElement);t.exports=function(t){return i?o.createElement(t):{}}},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){var r=n(87);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,e){t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},function(t,e,n){var r=n(91)("keys"),o=n(93);t.exports=function(t){return r[t]||(r[t]=o(t))}},function(t,e){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,e){e.f={}.propertyIsEnumerable},function(t,e,n){var r=n(41);t.exports=function(t){return Object(r(t))}},function(t,e,n){(function(e){var n=e&&e.pid?e.pid.toString(36):"";function r(){var t=Date.now(),e=r.last||t;return r.last=t>e?t:e+1}t.exports=t.exports.default=function(t){return(t||"")+""+n+r().toString(36)},t.exports.process=function(t){return(t||"")+n+r().toString(36)},t.exports.time=function(t){return(t||"")+r().toString(36)}}).call(this,n(115))},function(t,e){var n="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);if(n){var r=new Uint8Array(16);t.exports=function(){return n(r),r}}else{var o=new Array(16);t.exports=function(){for(var t,e=0;e<16;e++)0==(3&e)&&(t=4294967296*Math.random()),o[e]=t>>>((3&e)<<3)&255;return o}}},function(t,e){for(var n=[],r=0;r<256;++r)n[r]=(r+256).toString(16).substr(1);t.exports=function(t,e){var r=e||0,o=n;return[o[t[r++]],o[t[r++]],o[t[r++]],o[t[r++]],"-",o[t[r++]],o[t[r++]],"-",o[t[r++]],o[t[r++]],"-",o[t[r++]],o[t[r++]],"-",o[t[r++]],o[t[r++]],o[t[r++]],o[t[r++]],o[t[r++]],o[t[r++]]].join("")}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r,o=(r=n(12))&&r.__esModule?r:{default:r},i=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)if(Object.prototype.hasOwnProperty.call(t,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(t,n):{};r.get||r.set?Object.defineProperty(e,n,r):e[n]=t[n]}return e.default=t,e}(n(0));function a(t){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function l(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function s(t,e){return!e||"object"!==a(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function c(t){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function u(t,e){return(u=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var d=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),s(this,c(e).apply(this,arguments))}var n,r,a;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&u(t,e)}(e,i.Component),n=e,(r=[{key:"render",value:function(){var t=this.props,e=t.children,n=t.className,r=t.duration,a=t.easing,l=t.expanded,s=t.maxHeight,c=t.overflow,u=t.rootTag,d=t.uuid,f={maxHeight:s,overflow:c,transition:"max-height ".concat(r,"ms ").concat(a)};return i.default.createElement(u,{"aria-hidden":!l,"aria-labelledby":"react-sanfona-item-title-".concat(d),className:(0,o.default)("react-sanfona-item-body",n),id:"react-sanfona-item-body-".concat(d),style:f},i.default.createElement("div",{className:"react-sanfona-item-body-wrapper"},e))}}])&&l(n.prototype,r),a&&l(n,a),e}();e.default=d,d.defaultProps={rootTag:"div"}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=l;var r=i(n(12)),o=i(n(0));function i(t){return t&&t.__esModule?t:{default:t}}function a(t){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function l(t){var e=t.className,n=t.expanded,i=t.onClick,l=t.onMouseOver,s=t.rootTag,c=t.title,u=t.uuid;return"object"===a(c)?o.default.cloneElement(c,{onClick:i,id:"react-sanfona-item-title-".concat(u),"aria-controls":"react-sanfona-item-body-".concat(u)}):o.default.createElement(s,{"aria-controls":"react-sanfona-item-body-".concat(u),"aria-expanded":n,className:(0,r.default)("react-sanfona-item-title",e),id:"react-sanfona-item-title-".concat(u),onClick:i,onMouseOver:l,style:{cursor:"pointer",margin:0}},c)}l.defaultProps={rootTag:"h3"}},function(t,e,n){"use strict";var r=n(1).compose;e.__esModule=!0,e.composeWithDevTools="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:function(){if(0!==arguments.length)return"object"==typeof arguments[0]?r:r.apply(null,arguments)},e.devToolsEnhancer="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION__?window.__REDUX_DEVTOOLS_EXTENSION__:function(){return function(t){return t}}},function(t,e,n){"use strict";function r(t){var e,n=t.Symbol;return"function"==typeof n?n.observable?e=n.observable:(e=n("observable"),n.observable=e):e="@@observable",e}n.d(e,"a",function(){return r})},function(t,e,n){t.exports=n(77)},function(t,e,n){t.exports=n(95)},function(t,e,n){t.exports=n(98)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return function(e,n,r,o,i){var a=r||"<<anonymous>>",l=i||n;if(null==e[n])return new Error("The "+o+" `"+l+"` is required to make `"+a+"` accessible for users of assistive technologies such as screen readers.");for(var s=arguments.length,c=Array(s>5?s-5:0),u=5;u<s;u++)c[u-5]=arguments[u];return t.apply(void 0,[e,n,r,o,i].concat(c))}},t.exports=e.default},function(t,e,n){"use strict";
/** @license React v16.8.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(24),o="function"==typeof Symbol&&Symbol.for,i=o?Symbol.for("react.element"):60103,a=o?Symbol.for("react.portal"):60106,l=o?Symbol.for("react.fragment"):60107,s=o?Symbol.for("react.strict_mode"):60108,c=o?Symbol.for("react.profiler"):60114,u=o?Symbol.for("react.provider"):60109,d=o?Symbol.for("react.context"):60110,f=o?Symbol.for("react.concurrent_mode"):60111,h=o?Symbol.for("react.forward_ref"):60112,p=o?Symbol.for("react.suspense"):60113,v=o?Symbol.for("react.memo"):60115,y=o?Symbol.for("react.lazy"):60116,g="function"==typeof Symbol&&Symbol.iterator;function m(t){for(var e=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+t,r=0;r<e;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(t,e,n,r,o,i,a,l){if(!t){if(t=void 0,void 0===e)t=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[n,r,o,i,a,l],c=0;(t=Error(e.replace(/%s/g,function(){return s[c++]}))).name="Invariant Violation"}throw t.framesToPop=1,t}}(!1,"Minified React error #"+t+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var b={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},_={};function x(t,e,n){this.props=t,this.context=e,this.refs=_,this.updater=n||b}function w(){}function S(t,e,n){this.props=t,this.context=e,this.refs=_,this.updater=n||b}x.prototype.isReactComponent={},x.prototype.setState=function(t,e){"object"!=typeof t&&"function"!=typeof t&&null!=t&&m("85"),this.updater.enqueueSetState(this,t,e,"setState")},x.prototype.forceUpdate=function(t){this.updater.enqueueForceUpdate(this,t,"forceUpdate")},w.prototype=x.prototype;var C=S.prototype=new w;C.constructor=S,r(C,x.prototype),C.isPureReactComponent=!0;var T={current:null},F={current:null},O=Object.prototype.hasOwnProperty,P={key:!0,ref:!0,__self:!0,__source:!0};function E(t,e,n){var r=void 0,o={},a=null,l=null;if(null!=e)for(r in void 0!==e.ref&&(l=e.ref),void 0!==e.key&&(a=""+e.key),e)O.call(e,r)&&!P.hasOwnProperty(r)&&(o[r]=e[r]);var s=arguments.length-2;if(1===s)o.children=n;else if(1<s){for(var c=Array(s),u=0;u<s;u++)c[u]=arguments[u+2];o.children=c}if(t&&t.defaultProps)for(r in s=t.defaultProps)void 0===o[r]&&(o[r]=s[r]);return{$$typeof:i,type:t,key:a,ref:l,props:o,_owner:F.current}}function j(t){return"object"==typeof t&&null!==t&&t.$$typeof===i}var I=/\/+/g,k=[];function L(t,e,n,r){if(k.length){var o=k.pop();return o.result=t,o.keyPrefix=e,o.func=n,o.context=r,o.count=0,o}return{result:t,keyPrefix:e,func:n,context:r,count:0}}function M(t){t.result=null,t.keyPrefix=null,t.func=null,t.context=null,t.count=0,10>k.length&&k.push(t)}function N(t,e,n){return null==t?0:function t(e,n,r,o){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var s=!1;if(null===e)s=!0;else switch(l){case"string":case"number":s=!0;break;case"object":switch(e.$$typeof){case i:case a:s=!0}}if(s)return r(o,e,""===n?"."+D(e,0):n),1;if(s=0,n=""===n?".":n+":",Array.isArray(e))for(var c=0;c<e.length;c++){var u=n+D(l=e[c],c);s+=t(l,u,r,o)}else if(u=null===e||"object"!=typeof e?null:"function"==typeof(u=g&&e[g]||e["@@iterator"])?u:null,"function"==typeof u)for(e=u.call(e),c=0;!(l=e.next()).done;)s+=t(l=l.value,u=n+D(l,c++),r,o);else"object"===l&&m("31","[object Object]"==(r=""+e)?"object with keys {"+Object.keys(e).join(", ")+"}":r,"");return s}(t,"",e,n)}function D(t,e){return"object"==typeof t&&null!==t&&null!=t.key?function(t){var e={"=":"=0",":":"=2"};return"$"+(""+t).replace(/[=:]/g,function(t){return e[t]})}(t.key):e.toString(36)}function K(t,e){t.func.call(t.context,e,t.count++)}function U(t,e,n){var r=t.result,o=t.keyPrefix;t=t.func.call(t.context,e,t.count++),Array.isArray(t)?A(t,r,n,function(t){return t}):null!=t&&(j(t)&&(t=function(t,e){return{$$typeof:i,type:t.type,key:e,ref:t.ref,props:t.props,_owner:t._owner}}(t,o+(!t.key||e&&e.key===t.key?"":(""+t.key).replace(I,"$&/")+"/")+n)),r.push(t))}function A(t,e,n,r,o){var i="";null!=n&&(i=(""+n).replace(I,"$&/")+"/"),N(t,U,e=L(e,i,r,o)),M(e)}function z(){var t=T.current;return null===t&&m("307"),t}var R={Children:{map:function(t,e,n){if(null==t)return t;var r=[];return A(t,r,null,e,n),r},forEach:function(t,e,n){if(null==t)return t;N(t,K,e=L(null,null,e,n)),M(e)},count:function(t){return N(t,function(){return null},null)},toArray:function(t){var e=[];return A(t,e,null,function(t){return t}),e},only:function(t){return j(t)||m("143"),t}},createRef:function(){return{current:null}},Component:x,PureComponent:S,createContext:function(t,e){return void 0===e&&(e=null),(t={$$typeof:d,_calculateChangedBits:e,_currentValue:t,_currentValue2:t,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:u,_context:t},t.Consumer=t},forwardRef:function(t){return{$$typeof:h,render:t}},lazy:function(t){return{$$typeof:y,_ctor:t,_status:-1,_result:null}},memo:function(t,e){return{$$typeof:v,type:t,compare:void 0===e?null:e}},useCallback:function(t,e){return z().useCallback(t,e)},useContext:function(t,e){return z().useContext(t,e)},useEffect:function(t,e){return z().useEffect(t,e)},useImperativeHandle:function(t,e,n){return z().useImperativeHandle(t,e,n)},useDebugValue:function(){},useLayoutEffect:function(t,e){return z().useLayoutEffect(t,e)},useMemo:function(t,e){return z().useMemo(t,e)},useReducer:function(t,e,n){return z().useReducer(t,e,n)},useRef:function(t){return z().useRef(t)},useState:function(t){return z().useState(t)},Fragment:l,StrictMode:s,Suspense:p,createElement:E,cloneElement:function(t,e,n){null==t&&m("267",t);var o=void 0,a=r({},t.props),l=t.key,s=t.ref,c=t._owner;if(null!=e){void 0!==e.ref&&(s=e.ref,c=F.current),void 0!==e.key&&(l=""+e.key);var u=void 0;for(o in t.type&&t.type.defaultProps&&(u=t.type.defaultProps),e)O.call(e,o)&&!P.hasOwnProperty(o)&&(a[o]=void 0===e[o]&&void 0!==u?u[o]:e[o])}if(1===(o=arguments.length-2))a.children=n;else if(1<o){u=Array(o);for(var d=0;d<o;d++)u[d]=arguments[d+2];a.children=u}return{$$typeof:i,type:t.type,key:l,ref:s,props:a,_owner:c}},createFactory:function(t){var e=E.bind(null,t);return e.type=t,e},isValidElement:j,version:"16.8.1",unstable_ConcurrentMode:f,unstable_Profiler:c,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:T,ReactCurrentOwner:F,assign:r}},W={default:R},B=W&&R||W;t.exports=B.default||B},function(t,e,n){"use strict";
/** @license React v16.8.1
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),o=n(24),i=n(34);function a(t){for(var e=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+t,r=0;r<e;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(t,e,n,r,o,i,a,l){if(!t){if(t=void 0,void 0===e)t=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[n,r,o,i,a,l],c=0;(t=Error(e.replace(/%s/g,function(){return s[c++]}))).name="Invariant Violation"}throw t.framesToPop=1,t}}(!1,"Minified React error #"+t+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}r||a("227");var l=!1,s=null,c=!1,u=null,d={onError:function(t){l=!0,s=t}};function f(t,e,n,r,o,i,a,c,u){l=!1,s=null,function(t,e,n,r,o,i,a,l,s){var c=Array.prototype.slice.call(arguments,3);try{e.apply(n,c)}catch(t){this.onError(t)}}.apply(d,arguments)}var h=null,p={};function v(){if(h)for(var t in p){var e=p[t],n=h.indexOf(t);if(-1<n||a("96",t),!g[n])for(var r in e.extractEvents||a("97",t),g[n]=e,n=e.eventTypes){var o=void 0,i=n[r],l=e,s=r;m.hasOwnProperty(s)&&a("99",s),m[s]=i;var c=i.phasedRegistrationNames;if(c){for(o in c)c.hasOwnProperty(o)&&y(c[o],l,s);o=!0}else i.registrationName?(y(i.registrationName,l,s),o=!0):o=!1;o||a("98",r,t)}}}function y(t,e,n){b[t]&&a("100",t),b[t]=e,_[t]=e.eventTypes[n].dependencies}var g=[],m={},b={},_={},x=null,w=null,S=null;function C(t,e,n){var r=t.type||"unknown-event";t.currentTarget=S(n),function(t,e,n,r,o,i,d,h,p){if(f.apply(this,arguments),l){if(l){var v=s;l=!1,s=null}else a("198"),v=void 0;c||(c=!0,u=v)}}(r,e,void 0,t),t.currentTarget=null}function T(t,e){return null==e&&a("30"),null==t?e:Array.isArray(t)?Array.isArray(e)?(t.push.apply(t,e),t):(t.push(e),t):Array.isArray(e)?[t].concat(e):[t,e]}function F(t,e,n){Array.isArray(t)?t.forEach(e,n):t&&e.call(n,t)}var O=null;function P(t){if(t){var e=t._dispatchListeners,n=t._dispatchInstances;if(Array.isArray(e))for(var r=0;r<e.length&&!t.isPropagationStopped();r++)C(t,e[r],n[r]);else e&&C(t,e,n);t._dispatchListeners=null,t._dispatchInstances=null,t.isPersistent()||t.constructor.release(t)}}var E={injectEventPluginOrder:function(t){h&&a("101"),h=Array.prototype.slice.call(t),v()},injectEventPluginsByName:function(t){var e,n=!1;for(e in t)if(t.hasOwnProperty(e)){var r=t[e];p.hasOwnProperty(e)&&p[e]===r||(p[e]&&a("102",e),p[e]=r,n=!0)}n&&v()}};function j(t,e){var n=t.stateNode;if(!n)return null;var r=x(n);if(!r)return null;n=r[e];t:switch(e){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(t=t.type)||"input"===t||"select"===t||"textarea"===t)),t=!r;break t;default:t=!1}return t?null:(n&&"function"!=typeof n&&a("231",e,typeof n),n)}function I(t){if(null!==t&&(O=T(O,t)),t=O,O=null,t&&(F(t,P),O&&a("95"),c))throw t=u,c=!1,u=null,t}var k=Math.random().toString(36).slice(2),L="__reactInternalInstance$"+k,M="__reactEventHandlers$"+k;function N(t){if(t[L])return t[L];for(;!t[L];){if(!t.parentNode)return null;t=t.parentNode}return 5===(t=t[L]).tag||6===t.tag?t:null}function D(t){return!(t=t[L])||5!==t.tag&&6!==t.tag?null:t}function K(t){if(5===t.tag||6===t.tag)return t.stateNode;a("33")}function U(t){return t[M]||null}function A(t){do{t=t.return}while(t&&5!==t.tag);return t||null}function z(t,e,n){(e=j(t,n.dispatchConfig.phasedRegistrationNames[e]))&&(n._dispatchListeners=T(n._dispatchListeners,e),n._dispatchInstances=T(n._dispatchInstances,t))}function R(t){if(t&&t.dispatchConfig.phasedRegistrationNames){for(var e=t._targetInst,n=[];e;)n.push(e),e=A(e);for(e=n.length;0<e--;)z(n[e],"captured",t);for(e=0;e<n.length;e++)z(n[e],"bubbled",t)}}function W(t,e,n){t&&n&&n.dispatchConfig.registrationName&&(e=j(t,n.dispatchConfig.registrationName))&&(n._dispatchListeners=T(n._dispatchListeners,e),n._dispatchInstances=T(n._dispatchInstances,t))}function B(t){t&&t.dispatchConfig.registrationName&&W(t._targetInst,null,t)}function G(t){F(t,R)}var V=!("undefined"==typeof window||!window.document||!window.document.createElement);function Y(t,e){var n={};return n[t.toLowerCase()]=e.toLowerCase(),n["Webkit"+t]="webkit"+e,n["Moz"+t]="moz"+e,n}var $={animationend:Y("Animation","AnimationEnd"),animationiteration:Y("Animation","AnimationIteration"),animationstart:Y("Animation","AnimationStart"),transitionend:Y("Transition","TransitionEnd")},Q={},X={};function Z(t){if(Q[t])return Q[t];if(!$[t])return t;var e,n=$[t];for(e in n)if(n.hasOwnProperty(e)&&e in X)return Q[t]=n[e];return t}V&&(X=document.createElement("div").style,"AnimationEvent"in window||(delete $.animationend.animation,delete $.animationiteration.animation,delete $.animationstart.animation),"TransitionEvent"in window||delete $.transitionend.transition);var J=Z("animationend"),H=Z("animationiteration"),q=Z("animationstart"),tt=Z("transitionend"),et="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),nt=null,rt=null,ot=null;function it(){if(ot)return ot;var t,e,n=rt,r=n.length,o="value"in nt?nt.value:nt.textContent,i=o.length;for(t=0;t<r&&n[t]===o[t];t++);var a=r-t;for(e=1;e<=a&&n[r-e]===o[i-e];e++);return ot=o.slice(t,1<e?1-e:void 0)}function at(){return!0}function lt(){return!1}function st(t,e,n,r){for(var o in this.dispatchConfig=t,this._targetInst=e,this.nativeEvent=n,t=this.constructor.Interface)t.hasOwnProperty(o)&&((e=t[o])?this[o]=e(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?at:lt,this.isPropagationStopped=lt,this}function ct(t,e,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,t,e,n,r),o}return new this(t,e,n,r)}function ut(t){t instanceof this||a("279"),t.destructor(),10>this.eventPool.length&&this.eventPool.push(t)}function dt(t){t.eventPool=[],t.getPooled=ct,t.release=ut}o(st.prototype,{preventDefault:function(){this.defaultPrevented=!0;var t=this.nativeEvent;t&&(t.preventDefault?t.preventDefault():"unknown"!=typeof t.returnValue&&(t.returnValue=!1),this.isDefaultPrevented=at)},stopPropagation:function(){var t=this.nativeEvent;t&&(t.stopPropagation?t.stopPropagation():"unknown"!=typeof t.cancelBubble&&(t.cancelBubble=!0),this.isPropagationStopped=at)},persist:function(){this.isPersistent=at},isPersistent:lt,destructor:function(){var t,e=this.constructor.Interface;for(t in e)this[t]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=lt,this._dispatchInstances=this._dispatchListeners=null}}),st.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(t){return t.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},st.extend=function(t){function e(){}function n(){return r.apply(this,arguments)}var r=this;e.prototype=r.prototype;var i=new e;return o(i,n.prototype),n.prototype=i,n.prototype.constructor=n,n.Interface=o({},r.Interface,t),n.extend=r.extend,dt(n),n},dt(st);var ft=st.extend({data:null}),ht=st.extend({data:null}),pt=[9,13,27,32],vt=V&&"CompositionEvent"in window,yt=null;V&&"documentMode"in document&&(yt=document.documentMode);var gt=V&&"TextEvent"in window&&!yt,mt=V&&(!vt||yt&&8<yt&&11>=yt),bt=String.fromCharCode(32),_t={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},xt=!1;function wt(t,e){switch(t){case"keyup":return-1!==pt.indexOf(e.keyCode);case"keydown":return 229!==e.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function St(t){return"object"==typeof(t=t.detail)&&"data"in t?t.data:null}var Ct=!1;var Tt={eventTypes:_t,extractEvents:function(t,e,n,r){var o=void 0,i=void 0;if(vt)t:{switch(t){case"compositionstart":o=_t.compositionStart;break t;case"compositionend":o=_t.compositionEnd;break t;case"compositionupdate":o=_t.compositionUpdate;break t}o=void 0}else Ct?wt(t,n)&&(o=_t.compositionEnd):"keydown"===t&&229===n.keyCode&&(o=_t.compositionStart);return o?(mt&&"ko"!==n.locale&&(Ct||o!==_t.compositionStart?o===_t.compositionEnd&&Ct&&(i=it()):(rt="value"in(nt=r)?nt.value:nt.textContent,Ct=!0)),o=ft.getPooled(o,e,n,r),i?o.data=i:null!==(i=St(n))&&(o.data=i),G(o),i=o):i=null,(t=gt?function(t,e){switch(t){case"compositionend":return St(e);case"keypress":return 32!==e.which?null:(xt=!0,bt);case"textInput":return(t=e.data)===bt&&xt?null:t;default:return null}}(t,n):function(t,e){if(Ct)return"compositionend"===t||!vt&&wt(t,e)?(t=it(),ot=rt=nt=null,Ct=!1,t):null;switch(t){case"paste":return null;case"keypress":if(!(e.ctrlKey||e.altKey||e.metaKey)||e.ctrlKey&&e.altKey){if(e.char&&1<e.char.length)return e.char;if(e.which)return String.fromCharCode(e.which)}return null;case"compositionend":return mt&&"ko"!==e.locale?null:e.data;default:return null}}(t,n))?((e=ht.getPooled(_t.beforeInput,e,n,r)).data=t,G(e)):e=null,null===i?e:null===e?i:[i,e]}},Ft=null,Ot=null,Pt=null;function Et(t){if(t=w(t)){"function"!=typeof Ft&&a("280");var e=x(t.stateNode);Ft(t.stateNode,t.type,e)}}function jt(t){Ot?Pt?Pt.push(t):Pt=[t]:Ot=t}function It(){if(Ot){var t=Ot,e=Pt;if(Pt=Ot=null,Et(t),e)for(t=0;t<e.length;t++)Et(e[t])}}function kt(t,e){return t(e)}function Lt(t,e,n){return t(e,n)}function Mt(){}var Nt=!1;function Dt(t,e){if(Nt)return t(e);Nt=!0;try{return kt(t,e)}finally{Nt=!1,(null!==Ot||null!==Pt)&&(Mt(),It())}}var Kt={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Ut(t){var e=t&&t.nodeName&&t.nodeName.toLowerCase();return"input"===e?!!Kt[t.type]:"textarea"===e}function At(t){return(t=t.target||t.srcElement||window).correspondingUseElement&&(t=t.correspondingUseElement),3===t.nodeType?t.parentNode:t}function zt(t){if(!V)return!1;var e=(t="on"+t)in document;return e||((e=document.createElement("div")).setAttribute(t,"return;"),e="function"==typeof e[t]),e}function Rt(t){var e=t.type;return(t=t.nodeName)&&"input"===t.toLowerCase()&&("checkbox"===e||"radio"===e)}function Wt(t){t._valueTracker||(t._valueTracker=function(t){var e=Rt(t)?"checked":"value",n=Object.getOwnPropertyDescriptor(t.constructor.prototype,e),r=""+t[e];if(!t.hasOwnProperty(e)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(t,e,{configurable:!0,get:function(){return o.call(this)},set:function(t){r=""+t,i.call(this,t)}}),Object.defineProperty(t,e,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(t){r=""+t},stopTracking:function(){t._valueTracker=null,delete t[e]}}}}(t))}function Bt(t){if(!t)return!1;var e=t._valueTracker;if(!e)return!0;var n=e.getValue(),r="";return t&&(r=Rt(t)?t.checked?"true":"false":t.value),(t=r)!==n&&(e.setValue(t),!0)}var Gt=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;Gt.hasOwnProperty("ReactCurrentDispatcher")||(Gt.ReactCurrentDispatcher={current:null});var Vt=/^(.*)[\\\/]/,Yt="function"==typeof Symbol&&Symbol.for,$t=Yt?Symbol.for("react.element"):60103,Qt=Yt?Symbol.for("react.portal"):60106,Xt=Yt?Symbol.for("react.fragment"):60107,Zt=Yt?Symbol.for("react.strict_mode"):60108,Jt=Yt?Symbol.for("react.profiler"):60114,Ht=Yt?Symbol.for("react.provider"):60109,qt=Yt?Symbol.for("react.context"):60110,te=Yt?Symbol.for("react.concurrent_mode"):60111,ee=Yt?Symbol.for("react.forward_ref"):60112,ne=Yt?Symbol.for("react.suspense"):60113,re=Yt?Symbol.for("react.memo"):60115,oe=Yt?Symbol.for("react.lazy"):60116,ie="function"==typeof Symbol&&Symbol.iterator;function ae(t){return null===t||"object"!=typeof t?null:"function"==typeof(t=ie&&t[ie]||t["@@iterator"])?t:null}function le(t){if(null==t)return null;if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t;switch(t){case te:return"ConcurrentMode";case Xt:return"Fragment";case Qt:return"Portal";case Jt:return"Profiler";case Zt:return"StrictMode";case ne:return"Suspense"}if("object"==typeof t)switch(t.$$typeof){case qt:return"Context.Consumer";case Ht:return"Context.Provider";case ee:var e=t.render;return e=e.displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case re:return le(t.type);case oe:if(t=1===t._status?t._result:null)return le(t)}return null}function se(t){var e="";do{t:switch(t.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break t;default:var r=t._debugOwner,o=t._debugSource,i=le(t.type);n=null,r&&(n=le(r.type)),r=i,i="",o?i=" (at "+o.fileName.replace(Vt,"")+":"+o.lineNumber+")":n&&(i=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+i}e+=n,t=t.return}while(t);return e}var ce=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,ue=Object.prototype.hasOwnProperty,de={},fe={};function he(t,e,n,r,o){this.acceptsBooleans=2===e||3===e||4===e,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=t,this.type=e}var pe={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(t){pe[t]=new he(t,0,!1,t,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(t){var e=t[0];pe[e]=new he(e,1,!1,t[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(t){pe[t]=new he(t,2,!1,t.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(t){pe[t]=new he(t,2,!1,t,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(t){pe[t]=new he(t,3,!1,t.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(t){pe[t]=new he(t,3,!0,t,null)}),["capture","download"].forEach(function(t){pe[t]=new he(t,4,!1,t,null)}),["cols","rows","size","span"].forEach(function(t){pe[t]=new he(t,6,!1,t,null)}),["rowSpan","start"].forEach(function(t){pe[t]=new he(t,5,!1,t.toLowerCase(),null)});var ve=/[\-:]([a-z])/g;function ye(t){return t[1].toUpperCase()}function ge(t,e,n,r){var o=pe.hasOwnProperty(e)?pe[e]:null;(null!==o?0===o.type:!r&&(2<e.length&&("o"===e[0]||"O"===e[0])&&("n"===e[1]||"N"===e[1])))||(function(t,e,n,r){if(null==e||function(t,e,n,r){if(null!==n&&0===n.type)return!1;switch(typeof e){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(t=t.toLowerCase().slice(0,5))&&"aria-"!==t);default:return!1}}(t,e,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!e;case 4:return!1===e;case 5:return isNaN(e);case 6:return isNaN(e)||1>e}return!1}(e,n,o,r)&&(n=null),r||null===o?function(t){return!!ue.call(fe,t)||!ue.call(de,t)&&(ce.test(t)?fe[t]=!0:(de[t]=!0,!1))}(e)&&(null===n?t.removeAttribute(e):t.setAttribute(e,""+n)):o.mustUseProperty?t[o.propertyName]=null===n?3!==o.type&&"":n:(e=o.attributeName,r=o.attributeNamespace,null===n?t.removeAttribute(e):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?t.setAttributeNS(r,e,n):t.setAttribute(e,n))))}function me(t){switch(typeof t){case"boolean":case"number":case"object":case"string":case"undefined":return t;default:return""}}function be(t,e){var n=e.checked;return o({},e,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:t._wrapperState.initialChecked})}function _e(t,e){var n=null==e.defaultValue?"":e.defaultValue,r=null!=e.checked?e.checked:e.defaultChecked;n=me(null!=e.value?e.value:n),t._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===e.type||"radio"===e.type?null!=e.checked:null!=e.value}}function xe(t,e){null!=(e=e.checked)&&ge(t,"checked",e,!1)}function we(t,e){xe(t,e);var n=me(e.value),r=e.type;if(null!=n)"number"===r?(0===n&&""===t.value||t.value!=n)&&(t.value=""+n):t.value!==""+n&&(t.value=""+n);else if("submit"===r||"reset"===r)return void t.removeAttribute("value");e.hasOwnProperty("value")?Ce(t,e.type,n):e.hasOwnProperty("defaultValue")&&Ce(t,e.type,me(e.defaultValue)),null==e.checked&&null!=e.defaultChecked&&(t.defaultChecked=!!e.defaultChecked)}function Se(t,e,n){if(e.hasOwnProperty("value")||e.hasOwnProperty("defaultValue")){var r=e.type;if(!("submit"!==r&&"reset"!==r||void 0!==e.value&&null!==e.value))return;e=""+t._wrapperState.initialValue,n||e===t.value||(t.value=e),t.defaultValue=e}""!==(n=t.name)&&(t.name=""),t.defaultChecked=!t.defaultChecked,t.defaultChecked=!!t._wrapperState.initialChecked,""!==n&&(t.name=n)}function Ce(t,e,n){"number"===e&&t.ownerDocument.activeElement===t||(null==n?t.defaultValue=""+t._wrapperState.initialValue:t.defaultValue!==""+n&&(t.defaultValue=""+n))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(t){var e=t.replace(ve,ye);pe[e]=new he(e,1,!1,t,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(t){var e=t.replace(ve,ye);pe[e]=new he(e,1,!1,t,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(t){var e=t.replace(ve,ye);pe[e]=new he(e,1,!1,t,"http://www.w3.org/XML/1998/namespace")}),pe.tabIndex=new he("tabIndex",1,!1,"tabindex",null);var Te={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Fe(t,e,n){return(t=st.getPooled(Te.change,t,e,n)).type="change",jt(n),G(t),t}var Oe=null,Pe=null;function Ee(t){I(t)}function je(t){if(Bt(K(t)))return t}function Ie(t,e){if("change"===t)return e}var ke=!1;function Le(){Oe&&(Oe.detachEvent("onpropertychange",Me),Pe=Oe=null)}function Me(t){"value"===t.propertyName&&je(Pe)&&Dt(Ee,t=Fe(Pe,t,At(t)))}function Ne(t,e,n){"focus"===t?(Le(),Pe=n,(Oe=e).attachEvent("onpropertychange",Me)):"blur"===t&&Le()}function De(t){if("selectionchange"===t||"keyup"===t||"keydown"===t)return je(Pe)}function Ke(t,e){if("click"===t)return je(e)}function Ue(t,e){if("input"===t||"change"===t)return je(e)}V&&(ke=zt("input")&&(!document.documentMode||9<document.documentMode));var Ae={eventTypes:Te,_isInputEventSupported:ke,extractEvents:function(t,e,n,r){var o=e?K(e):window,i=void 0,a=void 0,l=o.nodeName&&o.nodeName.toLowerCase();if("select"===l||"input"===l&&"file"===o.type?i=Ie:Ut(o)?ke?i=Ue:(i=De,a=Ne):(l=o.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(i=Ke),i&&(i=i(t,e)))return Fe(i,n,r);a&&a(t,o,e),"blur"===t&&(t=o._wrapperState)&&t.controlled&&"number"===o.type&&Ce(o,"number",o.value)}},ze=st.extend({view:null,detail:null}),Re={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function We(t){var e=this.nativeEvent;return e.getModifierState?e.getModifierState(t):!!(t=Re[t])&&!!e[t]}function Be(){return We}var Ge=0,Ve=0,Ye=!1,$e=!1,Qe=ze.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Be,button:null,buttons:null,relatedTarget:function(t){return t.relatedTarget||(t.fromElement===t.srcElement?t.toElement:t.fromElement)},movementX:function(t){if("movementX"in t)return t.movementX;var e=Ge;return Ge=t.screenX,Ye?"mousemove"===t.type?t.screenX-e:0:(Ye=!0,0)},movementY:function(t){if("movementY"in t)return t.movementY;var e=Ve;return Ve=t.screenY,$e?"mousemove"===t.type?t.screenY-e:0:($e=!0,0)}}),Xe=Qe.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Ze={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Je={eventTypes:Ze,extractEvents:function(t,e,n,r){var o="mouseover"===t||"pointerover"===t,i="mouseout"===t||"pointerout"===t;if(o&&(n.relatedTarget||n.fromElement)||!i&&!o)return null;if(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,i?(i=e,e=(e=n.relatedTarget||n.toElement)?N(e):null):i=null,i===e)return null;var a=void 0,l=void 0,s=void 0,c=void 0;"mouseout"===t||"mouseover"===t?(a=Qe,l=Ze.mouseLeave,s=Ze.mouseEnter,c="mouse"):"pointerout"!==t&&"pointerover"!==t||(a=Xe,l=Ze.pointerLeave,s=Ze.pointerEnter,c="pointer");var u=null==i?o:K(i);if(o=null==e?o:K(e),(t=a.getPooled(l,i,n,r)).type=c+"leave",t.target=u,t.relatedTarget=o,(n=a.getPooled(s,e,n,r)).type=c+"enter",n.target=o,n.relatedTarget=u,r=e,i&&r)t:{for(o=r,c=0,a=e=i;a;a=A(a))c++;for(a=0,s=o;s;s=A(s))a++;for(;0<c-a;)e=A(e),c--;for(;0<a-c;)o=A(o),a--;for(;c--;){if(e===o||e===o.alternate)break t;e=A(e),o=A(o)}e=null}else e=null;for(o=e,e=[];i&&i!==o&&(null===(c=i.alternate)||c!==o);)e.push(i),i=A(i);for(i=[];r&&r!==o&&(null===(c=r.alternate)||c!==o);)i.push(r),r=A(r);for(r=0;r<e.length;r++)W(e[r],"bubbled",t);for(r=i.length;0<r--;)W(i[r],"captured",n);return[t,n]}};function He(t,e){return t===e&&(0!==t||1/t==1/e)||t!=t&&e!=e}var qe=Object.prototype.hasOwnProperty;function tn(t,e){if(He(t,e))return!0;if("object"!=typeof t||null===t||"object"!=typeof e||null===e)return!1;var n=Object.keys(t),r=Object.keys(e);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!qe.call(e,n[r])||!He(t[n[r]],e[n[r]]))return!1;return!0}function en(t){var e=t;if(t.alternate)for(;e.return;)e=e.return;else{if(0!=(2&e.effectTag))return 1;for(;e.return;)if(0!=(2&(e=e.return).effectTag))return 1}return 3===e.tag?2:3}function nn(t){2!==en(t)&&a("188")}function rn(t){if(!(t=function(t){var e=t.alternate;if(!e)return 3===(e=en(t))&&a("188"),1===e?null:t;for(var n=t,r=e;;){var o=n.return,i=o?o.alternate:null;if(!o||!i)break;if(o.child===i.child){for(var l=o.child;l;){if(l===n)return nn(o),t;if(l===r)return nn(o),e;l=l.sibling}a("188")}if(n.return!==r.return)n=o,r=i;else{l=!1;for(var s=o.child;s;){if(s===n){l=!0,n=o,r=i;break}if(s===r){l=!0,r=o,n=i;break}s=s.sibling}if(!l){for(s=i.child;s;){if(s===n){l=!0,n=i,r=o;break}if(s===r){l=!0,r=i,n=o;break}s=s.sibling}l||a("189")}}n.alternate!==r&&a("190")}return 3!==n.tag&&a("188"),n.stateNode.current===n?t:e}(t)))return null;for(var e=t;;){if(5===e.tag||6===e.tag)return e;if(e.child)e.child.return=e,e=e.child;else{if(e===t)break;for(;!e.sibling;){if(!e.return||e.return===t)return null;e=e.return}e.sibling.return=e.return,e=e.sibling}}return null}var on=st.extend({animationName:null,elapsedTime:null,pseudoElement:null}),an=st.extend({clipboardData:function(t){return"clipboardData"in t?t.clipboardData:window.clipboardData}}),ln=ze.extend({relatedTarget:null});function sn(t){var e=t.keyCode;return"charCode"in t?0===(t=t.charCode)&&13===e&&(t=13):t=e,10===t&&(t=13),32<=t||13===t?t:0}var cn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},un={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},dn=ze.extend({key:function(t){if(t.key){var e=cn[t.key]||t.key;if("Unidentified"!==e)return e}return"keypress"===t.type?13===(t=sn(t))?"Enter":String.fromCharCode(t):"keydown"===t.type||"keyup"===t.type?un[t.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Be,charCode:function(t){return"keypress"===t.type?sn(t):0},keyCode:function(t){return"keydown"===t.type||"keyup"===t.type?t.keyCode:0},which:function(t){return"keypress"===t.type?sn(t):"keydown"===t.type||"keyup"===t.type?t.keyCode:0}}),fn=Qe.extend({dataTransfer:null}),hn=ze.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Be}),pn=st.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),vn=Qe.extend({deltaX:function(t){return"deltaX"in t?t.deltaX:"wheelDeltaX"in t?-t.wheelDeltaX:0},deltaY:function(t){return"deltaY"in t?t.deltaY:"wheelDeltaY"in t?-t.wheelDeltaY:"wheelDelta"in t?-t.wheelDelta:0},deltaZ:null,deltaMode:null}),yn=[["abort","abort"],[J,"animationEnd"],[H,"animationIteration"],[q,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[tt,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],gn={},mn={};function bn(t,e){var n=t[0],r="on"+((t=t[1])[0].toUpperCase()+t.slice(1));e={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n],isInteractive:e},gn[t]=e,mn[n]=e}[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["auxclick","auxClick"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],["pointerdown","pointerDown"],["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach(function(t){bn(t,!0)}),yn.forEach(function(t){bn(t,!1)});var _n={eventTypes:gn,isInteractiveTopLevelEventType:function(t){return void 0!==(t=mn[t])&&!0===t.isInteractive},extractEvents:function(t,e,n,r){var o=mn[t];if(!o)return null;switch(t){case"keypress":if(0===sn(n))return null;case"keydown":case"keyup":t=dn;break;case"blur":case"focus":t=ln;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":t=Qe;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":t=fn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":t=hn;break;case J:case H:case q:t=on;break;case tt:t=pn;break;case"scroll":t=ze;break;case"wheel":t=vn;break;case"copy":case"cut":case"paste":t=an;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":t=Xe;break;default:t=st}return G(e=t.getPooled(o,e,n,r)),e}},xn=_n.isInteractiveTopLevelEventType,wn=[];function Sn(t){var e=t.targetInst,n=e;do{if(!n){t.ancestors.push(n);break}var r;for(r=n;r.return;)r=r.return;if(!(r=3!==r.tag?null:r.stateNode.containerInfo))break;t.ancestors.push(n),n=N(r)}while(n);for(n=0;n<t.ancestors.length;n++){e=t.ancestors[n];var o=At(t.nativeEvent);r=t.topLevelType;for(var i=t.nativeEvent,a=null,l=0;l<g.length;l++){var s=g[l];s&&(s=s.extractEvents(r,e,i,o))&&(a=T(a,s))}I(a)}}var Cn=!0;function Tn(t,e){if(!e)return null;var n=(xn(t)?On:Pn).bind(null,t);e.addEventListener(t,n,!1)}function Fn(t,e){if(!e)return null;var n=(xn(t)?On:Pn).bind(null,t);e.addEventListener(t,n,!0)}function On(t,e){Lt(Pn,t,e)}function Pn(t,e){if(Cn){var n=At(e);if(null===(n=N(n))||"number"!=typeof n.tag||2===en(n)||(n=null),wn.length){var r=wn.pop();r.topLevelType=t,r.nativeEvent=e,r.targetInst=n,t=r}else t={topLevelType:t,nativeEvent:e,targetInst:n,ancestors:[]};try{Dt(Sn,t)}finally{t.topLevelType=null,t.nativeEvent=null,t.targetInst=null,t.ancestors.length=0,10>wn.length&&wn.push(t)}}}var En={},jn=0,In="_reactListenersID"+(""+Math.random()).slice(2);function kn(t){return Object.prototype.hasOwnProperty.call(t,In)||(t[In]=jn++,En[t[In]]={}),En[t[In]]}function Ln(t){if(void 0===(t=t||("undefined"!=typeof document?document:void 0)))return null;try{return t.activeElement||t.body}catch(e){return t.body}}function Mn(t){for(;t&&t.firstChild;)t=t.firstChild;return t}function Nn(t,e){var n,r=Mn(t);for(t=0;r;){if(3===r.nodeType){if(n=t+r.textContent.length,t<=e&&n>=e)return{node:r,offset:e-t};t=n}t:{for(;r;){if(r.nextSibling){r=r.nextSibling;break t}r=r.parentNode}r=void 0}r=Mn(r)}}function Dn(){for(var t=window,e=Ln();e instanceof t.HTMLIFrameElement;){try{t=e.contentDocument.defaultView}catch(t){break}e=Ln(t.document)}return e}function Kn(t){var e=t&&t.nodeName&&t.nodeName.toLowerCase();return e&&("input"===e&&("text"===t.type||"search"===t.type||"tel"===t.type||"url"===t.type||"password"===t.type)||"textarea"===e||"true"===t.contentEditable)}var Un=V&&"documentMode"in document&&11>=document.documentMode,An={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},zn=null,Rn=null,Wn=null,Bn=!1;function Gn(t,e){var n=e.window===e?e.document:9===e.nodeType?e:e.ownerDocument;return Bn||null==zn||zn!==Ln(n)?null:("selectionStart"in(n=zn)&&Kn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Wn&&tn(Wn,n)?null:(Wn=n,(t=st.getPooled(An.select,Rn,t,e)).type="select",t.target=zn,G(t),t))}var Vn={eventTypes:An,extractEvents:function(t,e,n,r){var o,i=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!i)){t:{i=kn(i),o=_.onSelect;for(var a=0;a<o.length;a++){var l=o[a];if(!i.hasOwnProperty(l)||!i[l]){i=!1;break t}}i=!0}o=!i}if(o)return null;switch(i=e?K(e):window,t){case"focus":(Ut(i)||"true"===i.contentEditable)&&(zn=i,Rn=e,Wn=null);break;case"blur":Wn=Rn=zn=null;break;case"mousedown":Bn=!0;break;case"contextmenu":case"mouseup":case"dragend":return Bn=!1,Gn(n,r);case"selectionchange":if(Un)break;case"keydown":case"keyup":return Gn(n,r)}return null}};function Yn(t,e){return t=o({children:void 0},e),(e=function(t){var e="";return r.Children.forEach(t,function(t){null!=t&&(e+=t)}),e}(e.children))&&(t.children=e),t}function $n(t,e,n,r){if(t=t.options,e){e={};for(var o=0;o<n.length;o++)e["$"+n[o]]=!0;for(n=0;n<t.length;n++)o=e.hasOwnProperty("$"+t[n].value),t[n].selected!==o&&(t[n].selected=o),o&&r&&(t[n].defaultSelected=!0)}else{for(n=""+me(n),e=null,o=0;o<t.length;o++){if(t[o].value===n)return t[o].selected=!0,void(r&&(t[o].defaultSelected=!0));null!==e||t[o].disabled||(e=t[o])}null!==e&&(e.selected=!0)}}function Qn(t,e){return null!=e.dangerouslySetInnerHTML&&a("91"),o({},e,{value:void 0,defaultValue:void 0,children:""+t._wrapperState.initialValue})}function Xn(t,e){var n=e.value;null==n&&(n=e.defaultValue,null!=(e=e.children)&&(null!=n&&a("92"),Array.isArray(e)&&(1>=e.length||a("93"),e=e[0]),n=e),null==n&&(n="")),t._wrapperState={initialValue:me(n)}}function Zn(t,e){var n=me(e.value),r=me(e.defaultValue);null!=n&&((n=""+n)!==t.value&&(t.value=n),null==e.defaultValue&&t.defaultValue!==n&&(t.defaultValue=n)),null!=r&&(t.defaultValue=""+r)}function Jn(t){var e=t.textContent;e===t._wrapperState.initialValue&&(t.value=e)}E.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),x=U,w=D,S=K,E.injectEventPluginsByName({SimpleEventPlugin:_n,EnterLeaveEventPlugin:Je,ChangeEventPlugin:Ae,SelectEventPlugin:Vn,BeforeInputEventPlugin:Tt});var Hn={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function qn(t){switch(t){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function tr(t,e){return null==t||"http://www.w3.org/1999/xhtml"===t?qn(e):"http://www.w3.org/2000/svg"===t&&"foreignObject"===e?"http://www.w3.org/1999/xhtml":t}var er,nr=void 0,rr=(er=function(t,e){if(t.namespaceURI!==Hn.svg||"innerHTML"in t)t.innerHTML=e;else{for((nr=nr||document.createElement("div")).innerHTML="<svg>"+e+"</svg>",e=nr.firstChild;t.firstChild;)t.removeChild(t.firstChild);for(;e.firstChild;)t.appendChild(e.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,e,n,r){MSApp.execUnsafeLocalFunction(function(){return er(t,e)})}:er);function or(t,e){if(e){var n=t.firstChild;if(n&&n===t.lastChild&&3===n.nodeType)return void(n.nodeValue=e)}t.textContent=e}var ir={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},ar=["Webkit","ms","Moz","O"];function lr(t,e,n){return null==e||"boolean"==typeof e||""===e?"":n||"number"!=typeof e||0===e||ir.hasOwnProperty(t)&&ir[t]?(""+e).trim():e+"px"}function sr(t,e){for(var n in t=t.style,e)if(e.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=lr(n,e[n],r);"float"===n&&(n="cssFloat"),r?t.setProperty(n,o):t[n]=o}}Object.keys(ir).forEach(function(t){ar.forEach(function(e){e=e+t.charAt(0).toUpperCase()+t.substring(1),ir[e]=ir[t]})});var cr=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ur(t,e){e&&(cr[t]&&(null!=e.children||null!=e.dangerouslySetInnerHTML)&&a("137",t,""),null!=e.dangerouslySetInnerHTML&&(null!=e.children&&a("60"),"object"==typeof e.dangerouslySetInnerHTML&&"__html"in e.dangerouslySetInnerHTML||a("61")),null!=e.style&&"object"!=typeof e.style&&a("62",""))}function dr(t,e){if(-1===t.indexOf("-"))return"string"==typeof e.is;switch(t){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function fr(t,e){var n=kn(t=9===t.nodeType||11===t.nodeType?t:t.ownerDocument);e=_[e];for(var r=0;r<e.length;r++){var o=e[r];if(!n.hasOwnProperty(o)||!n[o]){switch(o){case"scroll":Fn("scroll",t);break;case"focus":case"blur":Fn("focus",t),Fn("blur",t),n.blur=!0,n.focus=!0;break;case"cancel":case"close":zt(o)&&Fn(o,t);break;case"invalid":case"submit":case"reset":break;default:-1===et.indexOf(o)&&Tn(o,t)}n[o]=!0}}}function hr(){}var pr=null,vr=null;function yr(t,e){switch(t){case"button":case"input":case"select":case"textarea":return!!e.autoFocus}return!1}function gr(t,e){return"textarea"===t||"option"===t||"noscript"===t||"string"==typeof e.children||"number"==typeof e.children||"object"==typeof e.dangerouslySetInnerHTML&&null!==e.dangerouslySetInnerHTML&&null!=e.dangerouslySetInnerHTML.__html}var mr="function"==typeof setTimeout?setTimeout:void 0,br="function"==typeof clearTimeout?clearTimeout:void 0,_r=i.unstable_scheduleCallback,xr=i.unstable_cancelCallback;function wr(t){for(t=t.nextSibling;t&&1!==t.nodeType&&3!==t.nodeType;)t=t.nextSibling;return t}function Sr(t){for(t=t.firstChild;t&&1!==t.nodeType&&3!==t.nodeType;)t=t.nextSibling;return t}new Set;var Cr=[],Tr=-1;function Fr(t){0>Tr||(t.current=Cr[Tr],Cr[Tr]=null,Tr--)}function Or(t,e){Cr[++Tr]=t.current,t.current=e}var Pr={},Er={current:Pr},jr={current:!1},Ir=Pr;function kr(t,e){var n=t.type.contextTypes;if(!n)return Pr;var r=t.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===e)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=e[o];return r&&((t=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=e,t.__reactInternalMemoizedMaskedChildContext=i),i}function Lr(t){return null!=(t=t.childContextTypes)}function Mr(t){Fr(jr),Fr(Er)}function Nr(t){Fr(jr),Fr(Er)}function Dr(t,e,n){Er.current!==Pr&&a("168"),Or(Er,e),Or(jr,n)}function Kr(t,e,n){var r=t.stateNode;if(t=e.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())i in t||a("108",le(e)||"Unknown",i);return o({},n,r)}function Ur(t){var e=t.stateNode;return e=e&&e.__reactInternalMemoizedMergedChildContext||Pr,Ir=Er.current,Or(Er,e),Or(jr,jr.current),!0}function Ar(t,e,n){var r=t.stateNode;r||a("169"),n?(e=Kr(t,e,Ir),r.__reactInternalMemoizedMergedChildContext=e,Fr(jr),Fr(Er),Or(Er,e)):Fr(jr),Or(jr,n)}var zr=null,Rr=null;function Wr(t){return function(e){try{return t(e)}catch(t){}}}function Br(t,e,n,r){this.tag=t,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=e,this.contextDependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Gr(t,e,n,r){return new Br(t,e,n,r)}function Vr(t){return!(!(t=t.prototype)||!t.isReactComponent)}function Yr(t,e){var n=t.alternate;return null===n?((n=Gr(t.tag,e,t.key,t.mode)).elementType=t.elementType,n.type=t.type,n.stateNode=t.stateNode,n.alternate=t,t.alternate=n):(n.pendingProps=e,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=t.childExpirationTime,n.expirationTime=t.expirationTime,n.child=t.child,n.memoizedProps=t.memoizedProps,n.memoizedState=t.memoizedState,n.updateQueue=t.updateQueue,n.contextDependencies=t.contextDependencies,n.sibling=t.sibling,n.index=t.index,n.ref=t.ref,n}function $r(t,e,n,r,o,i){var l=2;if(r=t,"function"==typeof t)Vr(t)&&(l=1);else if("string"==typeof t)l=5;else t:switch(t){case Xt:return Qr(n.children,o,i,e);case te:return Xr(n,3|o,i,e);case Zt:return Xr(n,2|o,i,e);case Jt:return(t=Gr(12,n,e,4|o)).elementType=Jt,t.type=Jt,t.expirationTime=i,t;case ne:return(t=Gr(13,n,e,o)).elementType=ne,t.type=ne,t.expirationTime=i,t;default:if("object"==typeof t&&null!==t)switch(t.$$typeof){case Ht:l=10;break t;case qt:l=9;break t;case ee:l=11;break t;case re:l=14;break t;case oe:l=16,r=null;break t}a("130",null==t?t:typeof t,"")}return(e=Gr(l,n,e,o)).elementType=t,e.type=r,e.expirationTime=i,e}function Qr(t,e,n,r){return(t=Gr(7,t,r,e)).expirationTime=n,t}function Xr(t,e,n,r){return t=Gr(8,t,r,e),e=0==(1&e)?Zt:te,t.elementType=e,t.type=e,t.expirationTime=n,t}function Zr(t,e,n){return(t=Gr(6,t,null,e)).expirationTime=n,t}function Jr(t,e,n){return(e=Gr(4,null!==t.children?t.children:[],t.key,e)).expirationTime=n,e.stateNode={containerInfo:t.containerInfo,pendingChildren:null,implementation:t.implementation},e}function Hr(t,e){t.didError=!1;var n=t.earliestPendingTime;0===n?t.earliestPendingTime=t.latestPendingTime=e:n<e?t.earliestPendingTime=e:t.latestPendingTime>e&&(t.latestPendingTime=e),eo(e,t)}function qr(t,e){t.didError=!1,t.latestPingedTime>=e&&(t.latestPingedTime=0);var n=t.earliestPendingTime,r=t.latestPendingTime;n===e?t.earliestPendingTime=r===e?t.latestPendingTime=0:r:r===e&&(t.latestPendingTime=n),n=t.earliestSuspendedTime,r=t.latestSuspendedTime,0===n?t.earliestSuspendedTime=t.latestSuspendedTime=e:n<e?t.earliestSuspendedTime=e:r>e&&(t.latestSuspendedTime=e),eo(e,t)}function to(t,e){var n=t.earliestPendingTime;return n>e&&(e=n),(t=t.earliestSuspendedTime)>e&&(e=t),e}function eo(t,e){var n=e.earliestSuspendedTime,r=e.latestSuspendedTime,o=e.earliestPendingTime,i=e.latestPingedTime;0===(o=0!==o?o:i)&&(0===t||r<t)&&(o=r),0!==(t=o)&&n>t&&(t=n),e.nextExpirationTimeToWorkOn=o,e.expirationTime=t}function no(t,e){if(t&&t.defaultProps)for(var n in e=o({},e),t=t.defaultProps)void 0===e[n]&&(e[n]=t[n]);return e}var ro=(new r.Component).refs;function oo(t,e,n,r){n=null==(n=n(r,e=t.memoizedState))?e:o({},e,n),t.memoizedState=n,null!==(r=t.updateQueue)&&0===t.expirationTime&&(r.baseState=n)}var io={isMounted:function(t){return!!(t=t._reactInternalFiber)&&2===en(t)},enqueueSetState:function(t,e,n){t=t._reactInternalFiber;var r=bl(),o=Xi(r=Va(r,t));o.payload=e,null!=n&&(o.callback=n),za(),Ji(t,o),Qa(t,r)},enqueueReplaceState:function(t,e,n){t=t._reactInternalFiber;var r=bl(),o=Xi(r=Va(r,t));o.tag=Bi,o.payload=e,null!=n&&(o.callback=n),za(),Ji(t,o),Qa(t,r)},enqueueForceUpdate:function(t,e){t=t._reactInternalFiber;var n=bl(),r=Xi(n=Va(n,t));r.tag=Gi,null!=e&&(r.callback=e),za(),Ji(t,r),Qa(t,n)}};function ao(t,e,n,r,o,i,a){return"function"==typeof(t=t.stateNode).shouldComponentUpdate?t.shouldComponentUpdate(r,i,a):!e.prototype||!e.prototype.isPureReactComponent||(!tn(n,r)||!tn(o,i))}function lo(t,e,n){var r=!1,o=Pr,i=e.contextType;return"object"==typeof i&&null!==i?i=Ri(i):(o=Lr(e)?Ir:Er.current,i=(r=null!=(r=e.contextTypes))?kr(t,o):Pr),e=new e(n,i),t.memoizedState=null!==e.state&&void 0!==e.state?e.state:null,e.updater=io,t.stateNode=e,e._reactInternalFiber=t,r&&((t=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,t.__reactInternalMemoizedMaskedChildContext=i),e}function so(t,e,n,r){t=e.state,"function"==typeof e.componentWillReceiveProps&&e.componentWillReceiveProps(n,r),"function"==typeof e.UNSAFE_componentWillReceiveProps&&e.UNSAFE_componentWillReceiveProps(n,r),e.state!==t&&io.enqueueReplaceState(e,e.state,null)}function co(t,e,n,r){var o=t.stateNode;o.props=n,o.state=t.memoizedState,o.refs=ro;var i=e.contextType;"object"==typeof i&&null!==i?o.context=Ri(i):(i=Lr(e)?Ir:Er.current,o.context=kr(t,i)),null!==(i=t.updateQueue)&&(ea(t,i,n,o,r),o.state=t.memoizedState),"function"==typeof(i=e.getDerivedStateFromProps)&&(oo(t,e,i,n),o.state=t.memoizedState),"function"==typeof e.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(e=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),e!==o.state&&io.enqueueReplaceState(o,o.state,null),null!==(i=t.updateQueue)&&(ea(t,i,n,o,r),o.state=t.memoizedState)),"function"==typeof o.componentDidMount&&(t.effectTag|=4)}var uo=Array.isArray;function fo(t,e,n){if(null!==(t=n.ref)&&"function"!=typeof t&&"object"!=typeof t){if(n._owner){n=n._owner;var r=void 0;n&&(1!==n.tag&&a("309"),r=n.stateNode),r||a("147",t);var o=""+t;return null!==e&&null!==e.ref&&"function"==typeof e.ref&&e.ref._stringRef===o?e.ref:((e=function(t){var e=r.refs;e===ro&&(e=r.refs={}),null===t?delete e[o]:e[o]=t})._stringRef=o,e)}"string"!=typeof t&&a("284"),n._owner||a("290",t)}return t}function ho(t,e){"textarea"!==t.type&&a("31","[object Object]"===Object.prototype.toString.call(e)?"object with keys {"+Object.keys(e).join(", ")+"}":e,"")}function po(t){function e(e,n){if(t){var r=e.lastEffect;null!==r?(r.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!t)return null;for(;null!==r;)e(n,r),r=r.sibling;return null}function r(t,e){for(t=new Map;null!==e;)null!==e.key?t.set(e.key,e):t.set(e.index,e),e=e.sibling;return t}function o(t,e,n){return(t=Yr(t,e)).index=0,t.sibling=null,t}function i(e,n,r){return e.index=r,t?null!==(r=e.alternate)?(r=r.index)<n?(e.effectTag=2,n):r:(e.effectTag=2,n):n}function l(e){return t&&null===e.alternate&&(e.effectTag=2),e}function s(t,e,n,r){return null===e||6!==e.tag?((e=Zr(n,t.mode,r)).return=t,e):((e=o(e,n)).return=t,e)}function c(t,e,n,r){return null!==e&&e.elementType===n.type?((r=o(e,n.props)).ref=fo(t,e,n),r.return=t,r):((r=$r(n.type,n.key,n.props,null,t.mode,r)).ref=fo(t,e,n),r.return=t,r)}function u(t,e,n,r){return null===e||4!==e.tag||e.stateNode.containerInfo!==n.containerInfo||e.stateNode.implementation!==n.implementation?((e=Jr(n,t.mode,r)).return=t,e):((e=o(e,n.children||[])).return=t,e)}function d(t,e,n,r,i){return null===e||7!==e.tag?((e=Qr(n,t.mode,r,i)).return=t,e):((e=o(e,n)).return=t,e)}function f(t,e,n){if("string"==typeof e||"number"==typeof e)return(e=Zr(""+e,t.mode,n)).return=t,e;if("object"==typeof e&&null!==e){switch(e.$$typeof){case $t:return(n=$r(e.type,e.key,e.props,null,t.mode,n)).ref=fo(t,null,e),n.return=t,n;case Qt:return(e=Jr(e,t.mode,n)).return=t,e}if(uo(e)||ae(e))return(e=Qr(e,t.mode,n,null)).return=t,e;ho(t,e)}return null}function h(t,e,n,r){var o=null!==e?e.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:s(t,e,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case $t:return n.key===o?n.type===Xt?d(t,e,n.props.children,r,o):c(t,e,n,r):null;case Qt:return n.key===o?u(t,e,n,r):null}if(uo(n)||ae(n))return null!==o?null:d(t,e,n,r,null);ho(t,n)}return null}function p(t,e,n,r,o){if("string"==typeof r||"number"==typeof r)return s(e,t=t.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case $t:return t=t.get(null===r.key?n:r.key)||null,r.type===Xt?d(e,t,r.props.children,o,r.key):c(e,t,r,o);case Qt:return u(e,t=t.get(null===r.key?n:r.key)||null,r,o)}if(uo(r)||ae(r))return d(e,t=t.get(n)||null,r,o,null);ho(e,r)}return null}function v(o,a,l,s){for(var c=null,u=null,d=a,v=a=0,y=null;null!==d&&v<l.length;v++){d.index>v?(y=d,d=null):y=d.sibling;var g=h(o,d,l[v],s);if(null===g){null===d&&(d=y);break}t&&d&&null===g.alternate&&e(o,d),a=i(g,a,v),null===u?c=g:u.sibling=g,u=g,d=y}if(v===l.length)return n(o,d),c;if(null===d){for(;v<l.length;v++)(d=f(o,l[v],s))&&(a=i(d,a,v),null===u?c=d:u.sibling=d,u=d);return c}for(d=r(o,d);v<l.length;v++)(y=p(d,o,v,l[v],s))&&(t&&null!==y.alternate&&d.delete(null===y.key?v:y.key),a=i(y,a,v),null===u?c=y:u.sibling=y,u=y);return t&&d.forEach(function(t){return e(o,t)}),c}function y(o,l,s,c){var u=ae(s);"function"!=typeof u&&a("150"),null==(s=u.call(s))&&a("151");for(var d=u=null,v=l,y=l=0,g=null,m=s.next();null!==v&&!m.done;y++,m=s.next()){v.index>y?(g=v,v=null):g=v.sibling;var b=h(o,v,m.value,c);if(null===b){v||(v=g);break}t&&v&&null===b.alternate&&e(o,v),l=i(b,l,y),null===d?u=b:d.sibling=b,d=b,v=g}if(m.done)return n(o,v),u;if(null===v){for(;!m.done;y++,m=s.next())null!==(m=f(o,m.value,c))&&(l=i(m,l,y),null===d?u=m:d.sibling=m,d=m);return u}for(v=r(o,v);!m.done;y++,m=s.next())null!==(m=p(v,o,y,m.value,c))&&(t&&null!==m.alternate&&v.delete(null===m.key?y:m.key),l=i(m,l,y),null===d?u=m:d.sibling=m,d=m);return t&&v.forEach(function(t){return e(o,t)}),u}return function(t,r,i,s){var c="object"==typeof i&&null!==i&&i.type===Xt&&null===i.key;c&&(i=i.props.children);var u="object"==typeof i&&null!==i;if(u)switch(i.$$typeof){case $t:t:{for(u=i.key,c=r;null!==c;){if(c.key===u){if(7===c.tag?i.type===Xt:c.elementType===i.type){n(t,c.sibling),(r=o(c,i.type===Xt?i.props.children:i.props)).ref=fo(t,c,i),r.return=t,t=r;break t}n(t,c);break}e(t,c),c=c.sibling}i.type===Xt?((r=Qr(i.props.children,t.mode,s,i.key)).return=t,t=r):((s=$r(i.type,i.key,i.props,null,t.mode,s)).ref=fo(t,r,i),s.return=t,t=s)}return l(t);case Qt:t:{for(c=i.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(t,r.sibling),(r=o(r,i.children||[])).return=t,t=r;break t}n(t,r);break}e(t,r),r=r.sibling}(r=Jr(i,t.mode,s)).return=t,t=r}return l(t)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(t,r.sibling),(r=o(r,i)).return=t,t=r):(n(t,r),(r=Zr(i,t.mode,s)).return=t,t=r),l(t);if(uo(i))return v(t,r,i,s);if(ae(i))return y(t,r,i,s);if(u&&ho(t,i),void 0===i&&!c)switch(t.tag){case 1:case 0:a("152",(s=t.type).displayName||s.name||"Component")}return n(t,r)}}var vo=po(!0),yo=po(!1),go={},mo={current:go},bo={current:go},_o={current:go};function xo(t){return t===go&&a("174"),t}function wo(t,e){Or(_o,e),Or(bo,t),Or(mo,go);var n=e.nodeType;switch(n){case 9:case 11:e=(e=e.documentElement)?e.namespaceURI:tr(null,"");break;default:e=tr(e=(n=8===n?e.parentNode:e).namespaceURI||null,n=n.tagName)}Fr(mo),Or(mo,e)}function So(t){Fr(mo),Fr(bo),Fr(_o)}function Co(t){xo(_o.current);var e=xo(mo.current),n=tr(e,t.type);e!==n&&(Or(bo,t),Or(mo,n))}function To(t){bo.current===t&&(Fr(mo),Fr(bo))}var Fo=0,Oo=2,Po=4,Eo=8,jo=16,Io=32,ko=64,Lo=128,Mo=Gt.ReactCurrentDispatcher,No=0,Do=null,Ko=null,Uo=null,Ao=null,zo=null,Ro=null,Wo=0,Bo=null,Go=0,Vo=!1,Yo=null,$o=0;function Qo(){a("307")}function Xo(t,e){if(null===e)return!1;for(var n=0;n<e.length&&n<t.length;n++)if(!He(t[n],e[n]))return!1;return!0}function Zo(t,e,n,r,o,i){if(No=i,Do=e,Uo=null!==t?t.memoizedState:null,Mo.current=null===Uo?ci:ui,e=n(r,o),Vo){do{Vo=!1,$o+=1,Uo=null!==t?t.memoizedState:null,Ro=Ao,Bo=zo=Ko=null,Mo.current=ui,e=n(r,o)}while(Vo);Yo=null,$o=0}return Mo.current=si,(t=Do).memoizedState=Ao,t.expirationTime=Wo,t.updateQueue=Bo,t.effectTag|=Go,t=null!==Ko&&null!==Ko.next,No=0,Ro=zo=Ao=Uo=Ko=Do=null,Wo=0,Bo=null,Go=0,t&&a("300"),e}function Jo(){Mo.current=si,No=0,Ro=zo=Ao=Uo=Ko=Do=null,Wo=0,Bo=null,Go=0,Vo=!1,Yo=null,$o=0}function Ho(){var t={memoizedState:null,baseState:null,queue:null,baseUpdate:null,next:null};return null===zo?Ao=zo=t:zo=zo.next=t,zo}function qo(){if(null!==Ro)Ro=(zo=Ro).next,Uo=null!==(Ko=Uo)?Ko.next:null;else{null===Uo&&a("310");var t={memoizedState:(Ko=Uo).memoizedState,baseState:Ko.baseState,queue:Ko.queue,baseUpdate:Ko.baseUpdate,next:null};zo=null===zo?Ao=t:zo.next=t,Uo=Ko.next}return zo}function ti(t,e){return"function"==typeof e?e(t):e}function ei(t){var e=qo(),n=e.queue;if(null===n&&a("311"),0<$o){var r=n.dispatch;if(null!==Yo){var o=Yo.get(n);if(void 0!==o){Yo.delete(n);var i=e.memoizedState;do{i=t(i,o.action),o=o.next}while(null!==o);return He(i,e.memoizedState)||(xi=!0),e.memoizedState=i,e.baseUpdate===n.last&&(e.baseState=i),[i,r]}}return[e.memoizedState,r]}r=n.last;var l=e.baseUpdate;if(i=e.baseState,null!==l?(null!==r&&(r.next=null),r=l.next):r=null!==r?r.next:null,null!==r){var s=o=null,c=r,u=!1;do{var d=c.expirationTime;d<No?(u||(u=!0,s=l,o=i),d>Wo&&(Wo=d)):i=c.eagerReducer===t?c.eagerState:t(i,c.action),l=c,c=c.next}while(null!==c&&c!==r);u||(s=l,o=i),He(i,e.memoizedState)||(xi=!0),e.memoizedState=i,e.baseUpdate=s,e.baseState=o,n.eagerReducer=t,n.eagerState=i}return[e.memoizedState,n.dispatch]}function ni(t,e,n,r){return t={tag:t,create:e,destroy:n,deps:r,next:null},null===Bo?(Bo={lastEffect:null}).lastEffect=t.next=t:null===(e=Bo.lastEffect)?Bo.lastEffect=t.next=t:(n=e.next,e.next=t,t.next=n,Bo.lastEffect=t),t}function ri(t,e,n,r){var o=Ho();Go|=t,o.memoizedState=ni(e,n,void 0,void 0===r?null:r)}function oi(t,e,n,r){var o=qo();r=void 0===r?null:r;var i=void 0;if(null!==Ko){var a=Ko.memoizedState;if(i=a.destroy,null!==r&&Xo(r,a.deps))return void ni(Fo,n,i,r)}Go|=t,o.memoizedState=ni(e,n,i,r)}function ii(t,e){return"function"==typeof e?(t=t(),e(t),function(){e(null)}):null!=e?(t=t(),e.current=t,function(){e.current=null}):void 0}function ai(){}function li(t,e,n){25>$o||a("301");var r=t.alternate;if(t===Do||null!==r&&r===Do)if(Vo=!0,t={expirationTime:No,action:n,eagerReducer:null,eagerState:null,next:null},null===Yo&&(Yo=new Map),void 0===(n=Yo.get(e)))Yo.set(e,t);else{for(e=n;null!==e.next;)e=e.next;e.next=t}else{za();var o=bl(),i={expirationTime:o=Va(o,t),action:n,eagerReducer:null,eagerState:null,next:null},l=e.last;if(null===l)i.next=i;else{var s=l.next;null!==s&&(i.next=s),l.next=i}if(e.last=i,0===t.expirationTime&&(null===r||0===r.expirationTime)&&null!==(r=e.eagerReducer))try{var c=e.eagerState,u=r(c,n);if(i.eagerReducer=r,i.eagerState=u,He(u,c))return}catch(t){}Qa(t,o)}}var si={readContext:Ri,useCallback:Qo,useContext:Qo,useEffect:Qo,useImperativeHandle:Qo,useLayoutEffect:Qo,useMemo:Qo,useReducer:Qo,useRef:Qo,useState:Qo,useDebugValue:Qo},ci={readContext:Ri,useCallback:function(t,e){return Ho().memoizedState=[t,void 0===e?null:e],t},useContext:Ri,useEffect:function(t,e){return ri(516,Lo|ko,t,e)},useImperativeHandle:function(t,e,n){return n=null!=n?n.concat([t]):[t],ri(4,Po|Io,ii.bind(null,e,t),n)},useLayoutEffect:function(t,e){return ri(4,Po|Io,t,e)},useMemo:function(t,e){var n=Ho();return e=void 0===e?null:e,t=t(),n.memoizedState=[t,e],t},useReducer:function(t,e,n){var r=Ho();return e=void 0!==n?n(e):e,r.memoizedState=r.baseState=e,t=(t=r.queue={last:null,dispatch:null,eagerReducer:t,eagerState:e}).dispatch=li.bind(null,Do,t),[r.memoizedState,t]},useRef:function(t){return t={current:t},Ho().memoizedState=t},useState:function(t){var e=Ho();return"function"==typeof t&&(t=t()),e.memoizedState=e.baseState=t,t=(t=e.queue={last:null,dispatch:null,eagerReducer:ti,eagerState:t}).dispatch=li.bind(null,Do,t),[e.memoizedState,t]},useDebugValue:ai},ui={readContext:Ri,useCallback:function(t,e){var n=qo();e=void 0===e?null:e;var r=n.memoizedState;return null!==r&&null!==e&&Xo(e,r[1])?r[0]:(n.memoizedState=[t,e],t)},useContext:Ri,useEffect:function(t,e){return oi(516,Lo|ko,t,e)},useImperativeHandle:function(t,e,n){return n=null!=n?n.concat([t]):[t],oi(4,Po|Io,ii.bind(null,e,t),n)},useLayoutEffect:function(t,e){return oi(4,Po|Io,t,e)},useMemo:function(t,e){var n=qo();e=void 0===e?null:e;var r=n.memoizedState;return null!==r&&null!==e&&Xo(e,r[1])?r[0]:(t=t(),n.memoizedState=[t,e],t)},useReducer:ei,useRef:function(){return qo().memoizedState},useState:function(t){return ei(ti)},useDebugValue:ai},di=null,fi=null,hi=!1;function pi(t,e){var n=Gr(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=e,n.return=t,n.effectTag=8,null!==t.lastEffect?(t.lastEffect.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n}function vi(t,e){switch(t.tag){case 5:var n=t.type;return null!==(e=1!==e.nodeType||n.toLowerCase()!==e.nodeName.toLowerCase()?null:e)&&(t.stateNode=e,!0);case 6:return null!==(e=""===t.pendingProps||3!==e.nodeType?null:e)&&(t.stateNode=e,!0);default:return!1}}function yi(t){if(hi){var e=fi;if(e){var n=e;if(!vi(t,e)){if(!(e=wr(n))||!vi(t,e))return t.effectTag|=2,hi=!1,void(di=t);pi(di,n)}di=t,fi=Sr(e)}else t.effectTag|=2,hi=!1,di=t}}function gi(t){for(t=t.return;null!==t&&5!==t.tag&&3!==t.tag;)t=t.return;di=t}function mi(t){if(t!==di)return!1;if(!hi)return gi(t),hi=!0,!1;var e=t.type;if(5!==t.tag||"head"!==e&&"body"!==e&&!gr(e,t.memoizedProps))for(e=fi;e;)pi(t,e),e=wr(e);return gi(t),fi=di?wr(t.stateNode):null,!0}function bi(){fi=di=null,hi=!1}var _i=Gt.ReactCurrentOwner,xi=!1;function wi(t,e,n,r){e.child=null===t?yo(e,null,n,r):vo(e,t.child,n,r)}function Si(t,e,n,r,o){n=n.render;var i=e.ref;return zi(e,o),r=Zo(t,e,n,r,i,o),null===t||xi?(e.effectTag|=1,wi(t,e,r,o),e.child):(e.updateQueue=t.updateQueue,e.effectTag&=-517,t.expirationTime<=o&&(t.expirationTime=0),ki(t,e,o))}function Ci(t,e,n,r,o,i){if(null===t){var a=n.type;return"function"!=typeof a||Vr(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((t=$r(n.type,null,r,null,e.mode,i)).ref=e.ref,t.return=e,e.child=t):(e.tag=15,e.type=a,Ti(t,e,a,r,o,i))}return a=t.child,o<i&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:tn)(o,r)&&t.ref===e.ref)?ki(t,e,i):(e.effectTag|=1,(t=Yr(a,r)).ref=e.ref,t.return=e,e.child=t)}function Ti(t,e,n,r,o,i){return null!==t&&tn(t.memoizedProps,r)&&t.ref===e.ref&&(xi=!1,o<i)?ki(t,e,i):Oi(t,e,n,r,i)}function Fi(t,e){var n=e.ref;(null===t&&null!==n||null!==t&&t.ref!==n)&&(e.effectTag|=128)}function Oi(t,e,n,r,o){var i=Lr(n)?Ir:Er.current;return i=kr(e,i),zi(e,o),n=Zo(t,e,n,r,i,o),null===t||xi?(e.effectTag|=1,wi(t,e,n,o),e.child):(e.updateQueue=t.updateQueue,e.effectTag&=-517,t.expirationTime<=o&&(t.expirationTime=0),ki(t,e,o))}function Pi(t,e,n,r,o){if(Lr(n)){var i=!0;Ur(e)}else i=!1;if(zi(e,o),null===e.stateNode)null!==t&&(t.alternate=null,e.alternate=null,e.effectTag|=2),lo(e,n,r),co(e,n,r,o),r=!0;else if(null===t){var a=e.stateNode,l=e.memoizedProps;a.props=l;var s=a.context,c=n.contextType;"object"==typeof c&&null!==c?c=Ri(c):c=kr(e,c=Lr(n)?Ir:Er.current);var u=n.getDerivedStateFromProps,d="function"==typeof u||"function"==typeof a.getSnapshotBeforeUpdate;d||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==r||s!==c)&&so(e,a,r,c),Yi=!1;var f=e.memoizedState;s=a.state=f;var h=e.updateQueue;null!==h&&(ea(e,h,r,a,o),s=e.memoizedState),l!==r||f!==s||jr.current||Yi?("function"==typeof u&&(oo(e,n,u,r),s=e.memoizedState),(l=Yi||ao(e,n,l,r,f,s,c))?(d||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(e.effectTag|=4)):("function"==typeof a.componentDidMount&&(e.effectTag|=4),e.memoizedProps=r,e.memoizedState=s),a.props=r,a.state=s,a.context=c,r=l):("function"==typeof a.componentDidMount&&(e.effectTag|=4),r=!1)}else a=e.stateNode,l=e.memoizedProps,a.props=e.type===e.elementType?l:no(e.type,l),s=a.context,"object"==typeof(c=n.contextType)&&null!==c?c=Ri(c):c=kr(e,c=Lr(n)?Ir:Er.current),(d="function"==typeof(u=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==r||s!==c)&&so(e,a,r,c),Yi=!1,s=e.memoizedState,f=a.state=s,null!==(h=e.updateQueue)&&(ea(e,h,r,a,o),f=e.memoizedState),l!==r||s!==f||jr.current||Yi?("function"==typeof u&&(oo(e,n,u,r),f=e.memoizedState),(u=Yi||ao(e,n,l,r,s,f,c))?(d||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,f,c),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,f,c)),"function"==typeof a.componentDidUpdate&&(e.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(e.effectTag|=256)):("function"!=typeof a.componentDidUpdate||l===t.memoizedProps&&s===t.memoizedState||(e.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===t.memoizedProps&&s===t.memoizedState||(e.effectTag|=256),e.memoizedProps=r,e.memoizedState=f),a.props=r,a.state=f,a.context=c,r=u):("function"!=typeof a.componentDidUpdate||l===t.memoizedProps&&s===t.memoizedState||(e.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===t.memoizedProps&&s===t.memoizedState||(e.effectTag|=256),r=!1);return Ei(t,e,n,r,i,o)}function Ei(t,e,n,r,o,i){Fi(t,e);var a=0!=(64&e.effectTag);if(!r&&!a)return o&&Ar(e,n,!1),ki(t,e,i);r=e.stateNode,_i.current=e;var l=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return e.effectTag|=1,null!==t&&a?(e.child=vo(e,t.child,null,i),e.child=vo(e,null,l,i)):wi(t,e,l,i),e.memoizedState=r.state,o&&Ar(e,n,!0),e.child}function ji(t){var e=t.stateNode;e.pendingContext?Dr(0,e.pendingContext,e.pendingContext!==e.context):e.context&&Dr(0,e.context,!1),wo(t,e.containerInfo)}function Ii(t,e,n){var r=e.mode,o=e.pendingProps,i=e.memoizedState;if(0==(64&e.effectTag)){i=null;var a=!1}else i={timedOutAt:null!==i?i.timedOutAt:0},a=!0,e.effectTag&=-65;if(null===t)if(a){var l=o.fallback;t=Qr(null,r,0,null),0==(1&e.mode)&&(t.child=null!==e.memoizedState?e.child.child:e.child),r=Qr(l,r,n,null),t.sibling=r,(n=t).return=r.return=e}else n=r=yo(e,null,o.children,n);else null!==t.memoizedState?(l=(r=t.child).sibling,a?(n=o.fallback,o=Yr(r,r.pendingProps),0==(1&e.mode)&&((a=null!==e.memoizedState?e.child.child:e.child)!==r.child&&(o.child=a)),r=o.sibling=Yr(l,n,l.expirationTime),n=o,o.childExpirationTime=0,n.return=r.return=e):n=r=vo(e,r.child,o.children,n)):(l=t.child,a?(a=o.fallback,(o=Qr(null,r,0,null)).child=l,0==(1&e.mode)&&(o.child=null!==e.memoizedState?e.child.child:e.child),(r=o.sibling=Qr(a,r,n,null)).effectTag|=2,n=o,o.childExpirationTime=0,n.return=r.return=e):r=n=vo(e,l,o.children,n)),e.stateNode=t.stateNode;return e.memoizedState=i,e.child=n,r}function ki(t,e,n){if(null!==t&&(e.contextDependencies=t.contextDependencies),e.childExpirationTime<n)return null;if(null!==t&&e.child!==t.child&&a("153"),null!==e.child){for(n=Yr(t=e.child,t.pendingProps,t.expirationTime),e.child=n,n.return=e;null!==t.sibling;)t=t.sibling,(n=n.sibling=Yr(t,t.pendingProps,t.expirationTime)).return=e;n.sibling=null}return e.child}function Li(t,e,n){var r=e.expirationTime;if(null!==t){if(t.memoizedProps!==e.pendingProps||jr.current)xi=!0;else if(r<n){switch(xi=!1,e.tag){case 3:ji(e),bi();break;case 5:Co(e);break;case 1:Lr(e.type)&&Ur(e);break;case 4:wo(e,e.stateNode.containerInfo);break;case 10:Ui(e,e.memoizedProps.value);break;case 13:if(null!==e.memoizedState)return 0!==(r=e.child.childExpirationTime)&&r>=n?Ii(t,e,n):null!==(e=ki(t,e,n))?e.sibling:null}return ki(t,e,n)}}else xi=!1;switch(e.expirationTime=0,e.tag){case 2:r=e.elementType,null!==t&&(t.alternate=null,e.alternate=null,e.effectTag|=2),t=e.pendingProps;var o=kr(e,Er.current);if(zi(e,n),o=Zo(null,e,r,t,o,n),e.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(e.tag=1,Jo(),Lr(r)){var i=!0;Ur(e)}else i=!1;e.memoizedState=null!==o.state&&void 0!==o.state?o.state:null;var l=r.getDerivedStateFromProps;"function"==typeof l&&oo(e,r,l,t),o.updater=io,e.stateNode=o,o._reactInternalFiber=e,co(e,r,t,n),e=Ei(null,e,r,!0,i,n)}else e.tag=0,wi(null,e,o,n),e=e.child;return e;case 16:switch(o=e.elementType,null!==t&&(t.alternate=null,e.alternate=null,e.effectTag|=2),i=e.pendingProps,t=function(t){var e=t._result;switch(t._status){case 1:return e;case 2:case 0:throw e;default:switch(t._status=0,(e=(e=t._ctor)()).then(function(e){0===t._status&&(e=e.default,t._status=1,t._result=e)},function(e){0===t._status&&(t._status=2,t._result=e)}),t._status){case 1:return t._result;case 2:throw t._result}throw t._result=e,e}}(o),e.type=t,o=e.tag=function(t){if("function"==typeof t)return Vr(t)?1:0;if(null!=t){if((t=t.$$typeof)===ee)return 11;if(t===re)return 14}return 2}(t),i=no(t,i),l=void 0,o){case 0:l=Oi(null,e,t,i,n);break;case 1:l=Pi(null,e,t,i,n);break;case 11:l=Si(null,e,t,i,n);break;case 14:l=Ci(null,e,t,no(t.type,i),r,n);break;default:a("306",t,"")}return l;case 0:return r=e.type,o=e.pendingProps,Oi(t,e,r,o=e.elementType===r?o:no(r,o),n);case 1:return r=e.type,o=e.pendingProps,Pi(t,e,r,o=e.elementType===r?o:no(r,o),n);case 3:return ji(e),null===(r=e.updateQueue)&&a("282"),o=null!==(o=e.memoizedState)?o.element:null,ea(e,r,e.pendingProps,null,n),(r=e.memoizedState.element)===o?(bi(),e=ki(t,e,n)):(o=e.stateNode,(o=(null===t||null===t.child)&&o.hydrate)&&(fi=Sr(e.stateNode.containerInfo),di=e,o=hi=!0),o?(e.effectTag|=2,e.child=yo(e,null,r,n)):(wi(t,e,r,n),bi()),e=e.child),e;case 5:return Co(e),null===t&&yi(e),r=e.type,o=e.pendingProps,i=null!==t?t.memoizedProps:null,l=o.children,gr(r,o)?l=null:null!==i&&gr(r,i)&&(e.effectTag|=16),Fi(t,e),1!==n&&1&e.mode&&o.hidden?(e.expirationTime=e.childExpirationTime=1,e=null):(wi(t,e,l,n),e=e.child),e;case 6:return null===t&&yi(e),null;case 13:return Ii(t,e,n);case 4:return wo(e,e.stateNode.containerInfo),r=e.pendingProps,null===t?e.child=vo(e,null,r,n):wi(t,e,r,n),e.child;case 11:return r=e.type,o=e.pendingProps,Si(t,e,r,o=e.elementType===r?o:no(r,o),n);case 7:return wi(t,e,e.pendingProps,n),e.child;case 8:case 12:return wi(t,e,e.pendingProps.children,n),e.child;case 10:t:{if(r=e.type._context,o=e.pendingProps,l=e.memoizedProps,Ui(e,i=o.value),null!==l){var s=l.value;if(0===(i=He(s,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(s,i):1073741823))){if(l.children===o.children&&!jr.current){e=ki(t,e,n);break t}}else for(null!==(s=e.child)&&(s.return=e);null!==s;){var c=s.contextDependencies;if(null!==c){l=s.child;for(var u=c.first;null!==u;){if(u.context===r&&0!=(u.observedBits&i)){1===s.tag&&((u=Xi(n)).tag=Gi,Ji(s,u)),s.expirationTime<n&&(s.expirationTime=n),null!==(u=s.alternate)&&u.expirationTime<n&&(u.expirationTime=n);for(var d=s.return;null!==d;){if(u=d.alternate,d.childExpirationTime<n)d.childExpirationTime=n,null!==u&&u.childExpirationTime<n&&(u.childExpirationTime=n);else{if(!(null!==u&&u.childExpirationTime<n))break;u.childExpirationTime=n}d=d.return}c.expirationTime<n&&(c.expirationTime=n);break}u=u.next}}else l=10===s.tag&&s.type===e.type?null:s.child;if(null!==l)l.return=s;else for(l=s;null!==l;){if(l===e){l=null;break}if(null!==(s=l.sibling)){s.return=l.return,l=s;break}l=l.return}s=l}}wi(t,e,o.children,n),e=e.child}return e;case 9:return o=e.type,r=(i=e.pendingProps).children,zi(e,n),r=r(o=Ri(o,i.unstable_observedBits)),e.effectTag|=1,wi(t,e,r,n),e.child;case 14:return i=no(o=e.type,e.pendingProps),Ci(t,e,o,i=no(o.type,i),r,n);case 15:return Ti(t,e,e.type,e.pendingProps,r,n);case 17:return r=e.type,o=e.pendingProps,o=e.elementType===r?o:no(r,o),null!==t&&(t.alternate=null,e.alternate=null,e.effectTag|=2),e.tag=1,Lr(r)?(t=!0,Ur(e)):t=!1,zi(e,n),lo(e,r,o),co(e,r,o,n),Ei(null,e,r,!0,t,n);default:a("156")}}var Mi={current:null},Ni=null,Di=null,Ki=null;function Ui(t,e){var n=t.type._context;Or(Mi,n._currentValue),n._currentValue=e}function Ai(t){var e=Mi.current;Fr(Mi),t.type._context._currentValue=e}function zi(t,e){Ni=t,Ki=Di=null;var n=t.contextDependencies;null!==n&&n.expirationTime>=e&&(xi=!0),t.contextDependencies=null}function Ri(t,e){return Ki!==t&&!1!==e&&0!==e&&("number"==typeof e&&1073741823!==e||(Ki=t,e=1073741823),e={context:t,observedBits:e,next:null},null===Di?(null===Ni&&a("308"),Di=e,Ni.contextDependencies={first:e,expirationTime:0}):Di=Di.next=e),t._currentValue}var Wi=0,Bi=1,Gi=2,Vi=3,Yi=!1;function $i(t){return{baseState:t,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Qi(t){return{baseState:t.baseState,firstUpdate:t.firstUpdate,lastUpdate:t.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Xi(t){return{expirationTime:t,tag:Wi,payload:null,callback:null,next:null,nextEffect:null}}function Zi(t,e){null===t.lastUpdate?t.firstUpdate=t.lastUpdate=e:(t.lastUpdate.next=e,t.lastUpdate=e)}function Ji(t,e){var n=t.alternate;if(null===n){var r=t.updateQueue,o=null;null===r&&(r=t.updateQueue=$i(t.memoizedState))}else r=t.updateQueue,o=n.updateQueue,null===r?null===o?(r=t.updateQueue=$i(t.memoizedState),o=n.updateQueue=$i(n.memoizedState)):r=t.updateQueue=Qi(o):null===o&&(o=n.updateQueue=Qi(r));null===o||r===o?Zi(r,e):null===r.lastUpdate||null===o.lastUpdate?(Zi(r,e),Zi(o,e)):(Zi(r,e),o.lastUpdate=e)}function Hi(t,e){var n=t.updateQueue;null===(n=null===n?t.updateQueue=$i(t.memoizedState):qi(t,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=e:(n.lastCapturedUpdate.next=e,n.lastCapturedUpdate=e)}function qi(t,e){var n=t.alternate;return null!==n&&e===n.updateQueue&&(e=t.updateQueue=Qi(e)),e}function ta(t,e,n,r,i,a){switch(n.tag){case Bi:return"function"==typeof(t=n.payload)?t.call(a,r,i):t;case Vi:t.effectTag=-2049&t.effectTag|64;case Wi:if(null==(i="function"==typeof(t=n.payload)?t.call(a,r,i):t))break;return o({},r,i);case Gi:Yi=!0}return r}function ea(t,e,n,r,o){Yi=!1;for(var i=(e=qi(t,e)).baseState,a=null,l=0,s=e.firstUpdate,c=i;null!==s;){var u=s.expirationTime;u<o?(null===a&&(a=s,i=c),l<u&&(l=u)):(c=ta(t,0,s,c,n,r),null!==s.callback&&(t.effectTag|=32,s.nextEffect=null,null===e.lastEffect?e.firstEffect=e.lastEffect=s:(e.lastEffect.nextEffect=s,e.lastEffect=s))),s=s.next}for(u=null,s=e.firstCapturedUpdate;null!==s;){var d=s.expirationTime;d<o?(null===u&&(u=s,null===a&&(i=c)),l<d&&(l=d)):(c=ta(t,0,s,c,n,r),null!==s.callback&&(t.effectTag|=32,s.nextEffect=null,null===e.lastCapturedEffect?e.firstCapturedEffect=e.lastCapturedEffect=s:(e.lastCapturedEffect.nextEffect=s,e.lastCapturedEffect=s))),s=s.next}null===a&&(e.lastUpdate=null),null===u?e.lastCapturedUpdate=null:t.effectTag|=32,null===a&&null===u&&(i=c),e.baseState=i,e.firstUpdate=a,e.firstCapturedUpdate=u,t.expirationTime=l,t.memoizedState=c}function na(t,e,n){null!==e.firstCapturedUpdate&&(null!==e.lastUpdate&&(e.lastUpdate.next=e.firstCapturedUpdate,e.lastUpdate=e.lastCapturedUpdate),e.firstCapturedUpdate=e.lastCapturedUpdate=null),ra(e.firstEffect,n),e.firstEffect=e.lastEffect=null,ra(e.firstCapturedEffect,n),e.firstCapturedEffect=e.lastCapturedEffect=null}function ra(t,e){for(;null!==t;){var n=t.callback;if(null!==n){t.callback=null;var r=e;"function"!=typeof n&&a("191",n),n.call(r)}t=t.nextEffect}}function oa(t,e){return{value:t,source:e,stack:se(e)}}function ia(t){t.effectTag|=4}var aa=void 0,la=void 0,sa=void 0,ca=void 0;aa=function(t,e){for(var n=e.child;null!==n;){if(5===n.tag||6===n.tag)t.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},la=function(){},sa=function(t,e,n,r,i){var a=t.memoizedProps;if(a!==r){var l=e.stateNode;switch(xo(mo.current),t=null,n){case"input":a=be(l,a),r=be(l,r),t=[];break;case"option":a=Yn(l,a),r=Yn(l,r),t=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),t=[];break;case"textarea":a=Qn(l,a),r=Qn(l,r),t=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(l.onclick=hr)}ur(n,r),l=n=void 0;var s=null;for(n in a)if(!r.hasOwnProperty(n)&&a.hasOwnProperty(n)&&null!=a[n])if("style"===n){var c=a[n];for(l in c)c.hasOwnProperty(l)&&(s||(s={}),s[l]="")}else"dangerouslySetInnerHTML"!==n&&"children"!==n&&"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&"autoFocus"!==n&&(b.hasOwnProperty(n)?t||(t=[]):(t=t||[]).push(n,null));for(n in r){var u=r[n];if(c=null!=a?a[n]:void 0,r.hasOwnProperty(n)&&u!==c&&(null!=u||null!=c))if("style"===n)if(c){for(l in c)!c.hasOwnProperty(l)||u&&u.hasOwnProperty(l)||(s||(s={}),s[l]="");for(l in u)u.hasOwnProperty(l)&&c[l]!==u[l]&&(s||(s={}),s[l]=u[l])}else s||(t||(t=[]),t.push(n,s)),s=u;else"dangerouslySetInnerHTML"===n?(u=u?u.__html:void 0,c=c?c.__html:void 0,null!=u&&c!==u&&(t=t||[]).push(n,""+u)):"children"===n?c===u||"string"!=typeof u&&"number"!=typeof u||(t=t||[]).push(n,""+u):"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&(b.hasOwnProperty(n)?(null!=u&&fr(i,n),t||c===u||(t=[])):(t=t||[]).push(n,u))}s&&(t=t||[]).push("style",s),i=t,(e.updateQueue=i)&&ia(e)}},ca=function(t,e,n,r){n!==r&&ia(e)};var ua="function"==typeof WeakSet?WeakSet:Set;function da(t,e){var n=e.source,r=e.stack;null===r&&null!==n&&(r=se(n)),null!==n&&le(n.type),e=e.value,null!==t&&1===t.tag&&le(t.type);try{console.error(e)}catch(t){setTimeout(function(){throw t})}}function fa(t){var e=t.ref;if(null!==e)if("function"==typeof e)try{e(null)}catch(e){Ga(t,e)}else e.current=null}function ha(t,e,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var r=n=n.next;do{if((r.tag&t)!==Fo){var o=r.destroy;r.destroy=void 0,void 0!==o&&o()}(r.tag&e)!==Fo&&(o=r.create,r.destroy=o()),r=r.next}while(r!==n)}}function pa(t){switch("function"==typeof Rr&&Rr(t),t.tag){case 0:case 11:case 14:case 15:var e=t.updateQueue;if(null!==e&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n.destroy;if(void 0!==r){var o=t;try{r()}catch(t){Ga(o,t)}}n=n.next}while(n!==e)}break;case 1:if(fa(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Ga(t,e)}break;case 5:fa(t);break;case 4:ga(t)}}function va(t){return 5===t.tag||3===t.tag||4===t.tag}function ya(t){t:{for(var e=t.return;null!==e;){if(va(e)){var n=e;break t}e=e.return}a("160"),n=void 0}var r=e=void 0;switch(n.tag){case 5:e=n.stateNode,r=!1;break;case 3:case 4:e=n.stateNode.containerInfo,r=!0;break;default:a("161")}16&n.effectTag&&(or(e,""),n.effectTag&=-17);t:e:for(n=t;;){for(;null===n.sibling;){if(null===n.return||va(n.return)){n=null;break t}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag;){if(2&n.effectTag)continue e;if(null===n.child||4===n.tag)continue e;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break t}}for(var o=t;;){if(5===o.tag||6===o.tag)if(n)if(r){var i=e,l=o.stateNode,s=n;8===i.nodeType?i.parentNode.insertBefore(l,s):i.insertBefore(l,s)}else e.insertBefore(o.stateNode,n);else r?(l=e,s=o.stateNode,8===l.nodeType?(i=l.parentNode).insertBefore(s,l):(i=l).appendChild(s),null!=(l=l._reactRootContainer)||null!==i.onclick||(i.onclick=hr)):e.appendChild(o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;o=o.return}o.sibling.return=o.return,o=o.sibling}}function ga(t){for(var e=t,n=!1,r=void 0,o=void 0;;){if(!n){n=e.return;t:for(;;){switch(null===n&&a("160"),n.tag){case 5:r=n.stateNode,o=!1;break t;case 3:case 4:r=n.stateNode.containerInfo,o=!0;break t}n=n.return}n=!0}if(5===e.tag||6===e.tag){t:for(var i=e,l=i;;)if(pa(l),null!==l.child&&4!==l.tag)l.child.return=l,l=l.child;else{if(l===i)break;for(;null===l.sibling;){if(null===l.return||l.return===i)break t;l=l.return}l.sibling.return=l.return,l=l.sibling}o?(i=r,l=e.stateNode,8===i.nodeType?i.parentNode.removeChild(l):i.removeChild(l)):r.removeChild(e.stateNode)}else if(4===e.tag?(r=e.stateNode.containerInfo,o=!0):pa(e),null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break;for(;null===e.sibling;){if(null===e.return||e.return===t)return;4===(e=e.return).tag&&(n=!1)}e.sibling.return=e.return,e=e.sibling}}function ma(t,e){switch(e.tag){case 0:case 11:case 14:case 15:ha(Po,Eo,e);break;case 1:break;case 5:var n=e.stateNode;if(null!=n){var r=e.memoizedProps;t=null!==t?t.memoizedProps:r;var o=e.type,i=e.updateQueue;e.updateQueue=null,null!==i&&function(t,e,n,r,o){t[M]=o,"input"===n&&"radio"===o.type&&null!=o.name&&xe(t,o),dr(n,r),r=dr(n,o);for(var i=0;i<e.length;i+=2){var a=e[i],l=e[i+1];"style"===a?sr(t,l):"dangerouslySetInnerHTML"===a?rr(t,l):"children"===a?or(t,l):ge(t,a,l,r)}switch(n){case"input":we(t,o);break;case"textarea":Zn(t,o);break;case"select":e=t._wrapperState.wasMultiple,t._wrapperState.wasMultiple=!!o.multiple,null!=(n=o.value)?$n(t,!!o.multiple,n,!1):e!==!!o.multiple&&(null!=o.defaultValue?$n(t,!!o.multiple,o.defaultValue,!0):$n(t,!!o.multiple,o.multiple?[]:"",!1))}}(n,i,o,t,r)}break;case 6:null===e.stateNode&&a("162"),e.stateNode.nodeValue=e.memoizedProps;break;case 3:case 12:break;case 13:if(n=e.memoizedState,r=void 0,t=e,null===n?r=!1:(r=!0,t=e.child,0===n.timedOutAt&&(n.timedOutAt=bl())),null!==t&&function(t,e){for(var n=t;;){if(5===n.tag){var r=n.stateNode;if(e)r.style.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=lr("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=e?"":n.memoizedProps;else{if(13===n.tag&&null!==n.memoizedState){(r=n.child.sibling).return=n,n=r;continue}if(null!==n.child){n.child.return=n,n=n.child;continue}}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}(t,r),null!==(n=e.updateQueue)){e.updateQueue=null;var l=e.stateNode;null===l&&(l=e.stateNode=new ua),n.forEach(function(t){var n=function(t,e){var n=t.stateNode;null!==n&&n.delete(e),e=Va(e=bl(),t),null!==(t=$a(t,e))&&(Hr(t,e),0!==(e=t.expirationTime)&&_l(t,e))}.bind(null,e,t);l.has(t)||(l.add(t),t.then(n,n))})}break;case 17:break;default:a("163")}}var ba="function"==typeof WeakMap?WeakMap:Map;function _a(t,e,n){(n=Xi(n)).tag=Vi,n.payload={element:null};var r=e.value;return n.callback=function(){El(r),da(t,e)},n}function xa(t,e,n){(n=Xi(n)).tag=Vi;var r=t.type.getDerivedStateFromError;if("function"==typeof r){var o=e.value;n.payload=function(){return r(o)}}var i=t.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Ua?Ua=new Set([this]):Ua.add(this));var n=e.value,o=e.stack;da(t,e),this.componentDidCatch(n,{componentStack:null!==o?o:""})}),n}function wa(t){switch(t.tag){case 1:Lr(t.type)&&Mr();var e=t.effectTag;return 2048&e?(t.effectTag=-2049&e|64,t):null;case 3:return So(),Nr(),0!=(64&(e=t.effectTag))&&a("285"),t.effectTag=-2049&e|64,t;case 5:return To(t),null;case 13:return 2048&(e=t.effectTag)?(t.effectTag=-2049&e|64,t):null;case 4:return So(),null;case 10:return Ai(t),null;default:return null}}var Sa=Gt.ReactCurrentDispatcher,Ca=Gt.ReactCurrentOwner,Ta=1073741822,Fa=0,Oa=!1,Pa=null,Ea=null,ja=0,Ia=-1,ka=!1,La=null,Ma=!1,Na=null,Da=null,Ka=null,Ua=null;function Aa(){if(null!==Pa)for(var t=Pa.return;null!==t;){var e=t;switch(e.tag){case 1:var n=e.type.childContextTypes;null!=n&&Mr();break;case 3:So(),Nr();break;case 5:To(e);break;case 4:So();break;case 10:Ai(e)}t=t.return}Ea=null,ja=0,Ia=-1,ka=!1,Pa=null}function za(){null!==Da&&xr(Da),null!==Ka&&Ka()}function Ra(t){for(;;){var e=t.alternate,n=t.return,r=t.sibling;if(0==(1024&t.effectTag)){Pa=t;t:{var i=e,l=ja,s=(e=t).pendingProps;switch(e.tag){case 2:case 16:break;case 15:case 0:break;case 1:Lr(e.type)&&Mr();break;case 3:So(),Nr(),(s=e.stateNode).pendingContext&&(s.context=s.pendingContext,s.pendingContext=null),null!==i&&null!==i.child||(mi(e),e.effectTag&=-3),la(e);break;case 5:To(e);var c=xo(_o.current);if(l=e.type,null!==i&&null!=e.stateNode)sa(i,e,l,s,c),i.ref!==e.ref&&(e.effectTag|=128);else if(s){var u=xo(mo.current);if(mi(e)){i=(s=e).stateNode;var d=s.type,f=s.memoizedProps,h=c;switch(i[L]=s,i[M]=f,l=void 0,c=d){case"iframe":case"object":Tn("load",i);break;case"video":case"audio":for(d=0;d<et.length;d++)Tn(et[d],i);break;case"source":Tn("error",i);break;case"img":case"image":case"link":Tn("error",i),Tn("load",i);break;case"form":Tn("reset",i),Tn("submit",i);break;case"details":Tn("toggle",i);break;case"input":_e(i,f),Tn("invalid",i),fr(h,"onChange");break;case"select":i._wrapperState={wasMultiple:!!f.multiple},Tn("invalid",i),fr(h,"onChange");break;case"textarea":Xn(i,f),Tn("invalid",i),fr(h,"onChange")}for(l in ur(c,f),d=null,f)f.hasOwnProperty(l)&&(u=f[l],"children"===l?"string"==typeof u?i.textContent!==u&&(d=["children",u]):"number"==typeof u&&i.textContent!==""+u&&(d=["children",""+u]):b.hasOwnProperty(l)&&null!=u&&fr(h,l));switch(c){case"input":Wt(i),Se(i,f,!0);break;case"textarea":Wt(i),Jn(i);break;case"select":case"option":break;default:"function"==typeof f.onClick&&(i.onclick=hr)}l=d,s.updateQueue=l,(s=null!==l)&&ia(e)}else{f=e,i=l,h=s,d=9===c.nodeType?c:c.ownerDocument,u===Hn.html&&(u=qn(i)),u===Hn.html?"script"===i?((i=d.createElement("div")).innerHTML="<script><\/script>",d=i.removeChild(i.firstChild)):"string"==typeof h.is?d=d.createElement(i,{is:h.is}):(d=d.createElement(i),"select"===i&&h.multiple&&(d.multiple=!0)):d=d.createElementNS(u,i),(i=d)[L]=f,i[M]=s,aa(i,e,!1,!1),h=i;var p=c,v=dr(d=l,f=s);switch(d){case"iframe":case"object":Tn("load",h),c=f;break;case"video":case"audio":for(c=0;c<et.length;c++)Tn(et[c],h);c=f;break;case"source":Tn("error",h),c=f;break;case"img":case"image":case"link":Tn("error",h),Tn("load",h),c=f;break;case"form":Tn("reset",h),Tn("submit",h),c=f;break;case"details":Tn("toggle",h),c=f;break;case"input":_e(h,f),c=be(h,f),Tn("invalid",h),fr(p,"onChange");break;case"option":c=Yn(h,f);break;case"select":h._wrapperState={wasMultiple:!!f.multiple},c=o({},f,{value:void 0}),Tn("invalid",h),fr(p,"onChange");break;case"textarea":Xn(h,f),c=Qn(h,f),Tn("invalid",h),fr(p,"onChange");break;default:c=f}ur(d,c),u=void 0;var y=d,g=h,m=c;for(u in m)if(m.hasOwnProperty(u)){var _=m[u];"style"===u?sr(g,_):"dangerouslySetInnerHTML"===u?null!=(_=_?_.__html:void 0)&&rr(g,_):"children"===u?"string"==typeof _?("textarea"!==y||""!==_)&&or(g,_):"number"==typeof _&&or(g,""+_):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(b.hasOwnProperty(u)?null!=_&&fr(p,u):null!=_&&ge(g,u,_,v))}switch(d){case"input":Wt(h),Se(h,f,!1);break;case"textarea":Wt(h),Jn(h);break;case"option":null!=f.value&&h.setAttribute("value",""+me(f.value));break;case"select":(c=h).multiple=!!f.multiple,null!=(h=f.value)?$n(c,!!f.multiple,h,!1):null!=f.defaultValue&&$n(c,!!f.multiple,f.defaultValue,!0);break;default:"function"==typeof c.onClick&&(h.onclick=hr)}(s=yr(l,s))&&ia(e),e.stateNode=i}null!==e.ref&&(e.effectTag|=128)}else null===e.stateNode&&a("166");break;case 6:i&&null!=e.stateNode?ca(i,e,i.memoizedProps,s):("string"!=typeof s&&(null===e.stateNode&&a("166")),i=xo(_o.current),xo(mo.current),mi(e)?(l=(s=e).stateNode,i=s.memoizedProps,l[L]=s,(s=l.nodeValue!==i)&&ia(e)):(l=e,(s=(9===i.nodeType?i:i.ownerDocument).createTextNode(s))[L]=e,l.stateNode=s));break;case 11:break;case 13:if(s=e.memoizedState,0!=(64&e.effectTag)){e.expirationTime=l,Pa=e;break t}s=null!==s,l=null!==i&&null!==i.memoizedState,null!==i&&!s&&l&&(null!==(i=i.child.sibling)&&(null!==(c=e.firstEffect)?(e.firstEffect=i,i.nextEffect=c):(e.firstEffect=e.lastEffect=i,i.nextEffect=null),i.effectTag=8)),(s||l)&&(e.effectTag|=4);break;case 7:case 8:case 12:break;case 4:So(),la(e);break;case 10:Ai(e);break;case 9:case 14:break;case 17:Lr(e.type)&&Mr();break;default:a("156")}Pa=null}if(e=t,1===ja||1!==e.childExpirationTime){for(s=0,l=e.child;null!==l;)(i=l.expirationTime)>s&&(s=i),(c=l.childExpirationTime)>s&&(s=c),l=l.sibling;e.childExpirationTime=s}if(null!==Pa)return Pa;null!==n&&0==(1024&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=t.firstEffect),n.lastEffect=t.lastEffect),1<t.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=t:n.firstEffect=t,n.lastEffect=t))}else{if(null!==(t=wa(t)))return t.effectTag&=1023,t;null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=1024)}if(null!==r)return r;if(null===n)break;t=n}return null}function Wa(t){var e=Li(t.alternate,t,ja);return t.memoizedProps=t.pendingProps,null===e&&(e=Ra(t)),Ca.current=null,e}function Ba(t,e){Oa&&a("243"),za(),Oa=!0;var n=Sa.current;Sa.current=si;var r=t.nextExpirationTimeToWorkOn;r===ja&&t===Ea&&null!==Pa||(Aa(),ja=r,Pa=Yr((Ea=t).current,null),t.pendingCommitExpirationTime=0);for(var o=!1;;){try{if(e)for(;null!==Pa&&!Sl();)Pa=Wa(Pa);else for(;null!==Pa;)Pa=Wa(Pa)}catch(e){if(Ki=Di=Ni=null,Jo(),null===Pa)o=!0,El(e);else{null===Pa&&a("271");var i=Pa,l=i.return;if(null!==l){t:{var s=t,c=l,u=i,d=e;if(l=ja,u.effectTag|=1024,u.firstEffect=u.lastEffect=null,null!==d&&"object"==typeof d&&"function"==typeof d.then){var f=d;d=c;var h=-1,p=-1;do{if(13===d.tag){var v=d.alternate;if(null!==v&&null!==(v=v.memoizedState)){p=10*(1073741822-v.timedOutAt);break}"number"==typeof(v=d.pendingProps.maxDuration)&&(0>=v?h=0:(-1===h||v<h)&&(h=v))}d=d.return}while(null!==d);d=c;do{if((v=13===d.tag)&&(v=void 0!==d.memoizedProps.fallback&&null===d.memoizedState),v){if(null===(c=d.updateQueue)?((c=new Set).add(f),d.updateQueue=c):c.add(f),0==(1&d.mode)){d.effectTag|=64,u.effectTag&=-1957,1===u.tag&&(null===u.alternate?u.tag=17:((l=Xi(1073741823)).tag=Gi,Ji(u,l))),u.expirationTime=1073741823;break t}null===(u=s.pingCache)?(u=s.pingCache=new ba,c=new Set,u.set(f,c)):void 0===(c=u.get(f))&&(c=new Set,u.set(f,c)),c.has(l)||(c.add(l),u=Ya.bind(null,s,f,l),f.then(u,u)),-1===h?s=1073741823:(-1===p&&(p=10*(1073741822-to(s,l))-5e3),s=p+h),0<=s&&Ia<s&&(Ia=s),d.effectTag|=2048,d.expirationTime=l;break t}d=d.return}while(null!==d);d=Error((le(u.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+se(u))}ka=!0,d=oa(d,u),s=c;do{switch(s.tag){case 3:s.effectTag|=2048,s.expirationTime=l,Hi(s,l=_a(s,d,l));break t;case 1:if(f=d,h=s.type,p=s.stateNode,0==(64&s.effectTag)&&("function"==typeof h.getDerivedStateFromError||null!==p&&"function"==typeof p.componentDidCatch&&(null===Ua||!Ua.has(p)))){s.effectTag|=2048,s.expirationTime=l,Hi(s,l=xa(s,f,l));break t}}s=s.return}while(null!==s)}Pa=Ra(i);continue}o=!0,El(e)}}break}if(Oa=!1,Sa.current=n,Ki=Di=Ni=null,Jo(),o)Ea=null,t.finishedWork=null;else if(null!==Pa)t.finishedWork=null;else{if(null===(n=t.current.alternate)&&a("281"),Ea=null,ka){if(o=t.latestPendingTime,i=t.latestSuspendedTime,l=t.latestPingedTime,0!==o&&o<r||0!==i&&i<r||0!==l&&l<r)return qr(t,r),void ml(t,n,r,t.expirationTime,-1);if(!t.didError&&e)return t.didError=!0,r=t.nextExpirationTimeToWorkOn=r,e=t.expirationTime=1073741823,void ml(t,n,r,e,-1)}e&&-1!==Ia?(qr(t,r),(e=10*(1073741822-to(t,r)))<Ia&&(Ia=e),e=10*(1073741822-bl()),e=Ia-e,ml(t,n,r,t.expirationTime,0>e?0:e)):(t.pendingCommitExpirationTime=r,t.finishedWork=n)}}function Ga(t,e){for(var n=t.return;null!==n;){switch(n.tag){case 1:var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Ua||!Ua.has(r)))return Ji(n,t=xa(n,t=oa(e,t),1073741823)),void Qa(n,1073741823);break;case 3:return Ji(n,t=_a(n,t=oa(e,t),1073741823)),void Qa(n,1073741823)}n=n.return}3===t.tag&&(Ji(t,n=_a(t,n=oa(e,t),1073741823)),Qa(t,1073741823))}function Va(t,e){return 0!==Fa?t=Fa:Oa?t=Ma?1073741823:ja:1&e.mode?(t=sl?1073741822-10*(1+((1073741822-t+15)/10|0)):1073741822-25*(1+((1073741822-t+500)/25|0)),null!==Ea&&t===ja&&--t):t=1073741823,sl&&(0===rl||t<rl)&&(rl=t),t}function Ya(t,e,n){var r=t.pingCache;null!==r&&r.delete(e),null!==Ea&&ja===n?Ea=null:(e=t.earliestSuspendedTime,r=t.latestSuspendedTime,0!==e&&n<=e&&n>=r&&(t.didError=!1,(0===(e=t.latestPingedTime)||e>n)&&(t.latestPingedTime=n),eo(n,t),0!==(n=t.expirationTime)&&_l(t,n)))}function $a(t,e){t.expirationTime<e&&(t.expirationTime=e);var n=t.alternate;null!==n&&n.expirationTime<e&&(n.expirationTime=e);var r=t.return,o=null;if(null===r&&3===t.tag)o=t.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<e&&(r.childExpirationTime=e),null!==n&&n.childExpirationTime<e&&(n.childExpirationTime=e),null===r.return&&3===r.tag){o=r.stateNode;break}r=r.return}return o}function Qa(t,e){null!==(t=$a(t,e))&&(!Oa&&0!==ja&&e>ja&&Aa(),Hr(t,e),Oa&&!Ma&&Ea===t||_l(t,t.expirationTime),pl>hl&&(pl=0,a("185")))}function Xa(t,e,n,r,o){var i=Fa;Fa=1073741823;try{return t(e,n,r,o)}finally{Fa=i}}var Za=null,Ja=null,Ha=0,qa=void 0,tl=!1,el=null,nl=0,rl=0,ol=!1,il=null,al=!1,ll=!1,sl=!1,cl=null,ul=i.unstable_now(),dl=1073741822-(ul/10|0),fl=dl,hl=50,pl=0,vl=null;function yl(){dl=1073741822-((i.unstable_now()-ul)/10|0)}function gl(t,e){if(0!==Ha){if(e<Ha)return;null!==qa&&i.unstable_cancelCallback(qa)}Ha=e,t=i.unstable_now()-ul,qa=i.unstable_scheduleCallback(Cl,{timeout:10*(1073741822-e)-t})}function ml(t,e,n,r,o){t.expirationTime=r,0!==o||Sl()?0<o&&(t.timeoutHandle=mr(function(t,e,n){t.pendingCommitExpirationTime=n,t.finishedWork=e,yl(),fl=dl,Fl(t,n)}.bind(null,t,e,n),o)):(t.pendingCommitExpirationTime=n,t.finishedWork=e)}function bl(){return tl?fl:(xl(),0!==nl&&1!==nl||(yl(),fl=dl),fl)}function _l(t,e){null===t.nextScheduledRoot?(t.expirationTime=e,null===Ja?(Za=Ja=t,t.nextScheduledRoot=t):(Ja=Ja.nextScheduledRoot=t).nextScheduledRoot=Za):e>t.expirationTime&&(t.expirationTime=e),tl||(al?ll&&(el=t,nl=1073741823,Ol(t,1073741823,!1)):1073741823===e?Tl(1073741823,!1):gl(t,e))}function xl(){var t=0,e=null;if(null!==Ja)for(var n=Ja,r=Za;null!==r;){var o=r.expirationTime;if(0===o){if((null===n||null===Ja)&&a("244"),r===r.nextScheduledRoot){Za=Ja=r.nextScheduledRoot=null;break}if(r===Za)Za=o=r.nextScheduledRoot,Ja.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===Ja){(Ja=n).nextScheduledRoot=Za,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if(o>t&&(t=o,e=r),r===Ja)break;if(1073741823===t)break;n=r,r=r.nextScheduledRoot}}el=e,nl=t}var wl=!1;function Sl(){return!!wl||!!i.unstable_shouldYield()&&(wl=!0)}function Cl(){try{if(!Sl()&&null!==Za){yl();var t=Za;do{var e=t.expirationTime;0!==e&&dl<=e&&(t.nextExpirationTimeToWorkOn=dl),t=t.nextScheduledRoot}while(t!==Za)}Tl(0,!0)}finally{wl=!1}}function Tl(t,e){if(xl(),e)for(yl(),fl=dl;null!==el&&0!==nl&&t<=nl&&!(wl&&dl>nl);)Ol(el,nl,dl>nl),xl(),yl(),fl=dl;else for(;null!==el&&0!==nl&&t<=nl;)Ol(el,nl,!1),xl();if(e&&(Ha=0,qa=null),0!==nl&&gl(el,nl),pl=0,vl=null,null!==cl)for(t=cl,cl=null,e=0;e<t.length;e++){var n=t[e];try{n._onComplete()}catch(t){ol||(ol=!0,il=t)}}if(ol)throw t=il,il=null,ol=!1,t}function Fl(t,e){tl&&a("253"),el=t,nl=e,Ol(t,e,!1),Tl(1073741823,!1)}function Ol(t,e,n){if(tl&&a("245"),tl=!0,n){var r=t.finishedWork;null!==r?Pl(t,r,e):(t.finishedWork=null,-1!==(r=t.timeoutHandle)&&(t.timeoutHandle=-1,br(r)),Ba(t,n),null!==(r=t.finishedWork)&&(Sl()?t.finishedWork=r:Pl(t,r,e)))}else null!==(r=t.finishedWork)?Pl(t,r,e):(t.finishedWork=null,-1!==(r=t.timeoutHandle)&&(t.timeoutHandle=-1,br(r)),Ba(t,n),null!==(r=t.finishedWork)&&Pl(t,r,e));tl=!1}function Pl(t,e,n){var r=t.firstBatch;if(null!==r&&r._expirationTime>=n&&(null===cl?cl=[r]:cl.push(r),r._defer))return t.finishedWork=e,void(t.expirationTime=0);t.finishedWork=null,t===vl?pl++:(vl=t,pl=0),Ma=Oa=!0,t.current===e&&a("177"),0===(n=t.pendingCommitExpirationTime)&&a("261"),t.pendingCommitExpirationTime=0,r=e.expirationTime;var o=e.childExpirationTime;if(r=o>r?o:r,t.didError=!1,0===r?(t.earliestPendingTime=0,t.latestPendingTime=0,t.earliestSuspendedTime=0,t.latestSuspendedTime=0,t.latestPingedTime=0):(r<t.latestPingedTime&&(t.latestPingedTime=0),0!==(o=t.latestPendingTime)&&(o>r?t.earliestPendingTime=t.latestPendingTime=0:t.earliestPendingTime>r&&(t.earliestPendingTime=t.latestPendingTime)),0===(o=t.earliestSuspendedTime)?Hr(t,r):r<t.latestSuspendedTime?(t.earliestSuspendedTime=0,t.latestSuspendedTime=0,t.latestPingedTime=0,Hr(t,r)):r>o&&Hr(t,r)),eo(0,t),Ca.current=null,1<e.effectTag?null!==e.lastEffect?(e.lastEffect.nextEffect=e,r=e.firstEffect):r=e:r=e.firstEffect,pr=Cn,Kn(o=Dn())){if("selectionStart"in o)var i={start:o.selectionStart,end:o.selectionEnd};else t:{var l=(i=(i=o.ownerDocument)&&i.defaultView||window).getSelection&&i.getSelection();if(l&&0!==l.rangeCount){i=l.anchorNode;var s=l.anchorOffset,c=l.focusNode;l=l.focusOffset;try{i.nodeType,c.nodeType}catch(t){i=null;break t}var u=0,d=-1,f=-1,h=0,p=0,v=o,y=null;e:for(;;){for(var g;v!==i||0!==s&&3!==v.nodeType||(d=u+s),v!==c||0!==l&&3!==v.nodeType||(f=u+l),3===v.nodeType&&(u+=v.nodeValue.length),null!==(g=v.firstChild);)y=v,v=g;for(;;){if(v===o)break e;if(y===i&&++h===s&&(d=u),y===c&&++p===l&&(f=u),null!==(g=v.nextSibling))break;y=(v=y).parentNode}v=g}i=-1===d||-1===f?null:{start:d,end:f}}else i=null}i=i||{start:0,end:0}}else i=null;for(vr={focusedElem:o,selectionRange:i},Cn=!1,La=r;null!==La;){o=!1,i=void 0;try{for(;null!==La;){if(256&La.effectTag)t:{var m=La.alternate;switch((s=La).tag){case 0:case 11:case 15:ha(Oo,Fo,s);break t;case 1:if(256&s.effectTag&&null!==m){var b=m.memoizedProps,_=m.memoizedState,x=s.stateNode,w=x.getSnapshotBeforeUpdate(s.elementType===s.type?b:no(s.type,b),_);x.__reactInternalSnapshotBeforeUpdate=w}break t;case 3:case 5:case 6:case 4:case 17:break t;default:a("163")}}La=La.nextEffect}}catch(t){o=!0,i=t}o&&(null===La&&a("178"),Ga(La,i),null!==La&&(La=La.nextEffect))}for(La=r;null!==La;){m=!1,b=void 0;try{for(;null!==La;){var S=La.effectTag;if(16&S&&or(La.stateNode,""),128&S){var C=La.alternate;if(null!==C){var T=C.ref;null!==T&&("function"==typeof T?T(null):T.current=null)}}switch(14&S){case 2:ya(La),La.effectTag&=-3;break;case 6:ya(La),La.effectTag&=-3,ma(La.alternate,La);break;case 4:ma(La.alternate,La);break;case 8:ga(_=La),_.return=null,_.child=null,_.memoizedState=null,_.updateQueue=null;var F=_.alternate;null!==F&&(F.return=null,F.child=null,F.memoizedState=null,F.updateQueue=null)}La=La.nextEffect}}catch(t){m=!0,b=t}m&&(null===La&&a("178"),Ga(La,b),null!==La&&(La=La.nextEffect))}if(T=vr,C=Dn(),S=T.focusedElem,m=T.selectionRange,C!==S&&S&&S.ownerDocument&&function t(e,n){return!(!e||!n)&&(e===n||(!e||3!==e.nodeType)&&(n&&3===n.nodeType?t(e,n.parentNode):"contains"in e?e.contains(n):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(n))))}(S.ownerDocument.documentElement,S)){null!==m&&Kn(S)&&(C=m.start,void 0===(T=m.end)&&(T=C),"selectionStart"in S?(S.selectionStart=C,S.selectionEnd=Math.min(T,S.value.length)):(T=(C=S.ownerDocument||document)&&C.defaultView||window).getSelection&&(T=T.getSelection(),b=S.textContent.length,F=Math.min(m.start,b),m=void 0===m.end?F:Math.min(m.end,b),!T.extend&&F>m&&(b=m,m=F,F=b),b=Nn(S,F),_=Nn(S,m),b&&_&&(1!==T.rangeCount||T.anchorNode!==b.node||T.anchorOffset!==b.offset||T.focusNode!==_.node||T.focusOffset!==_.offset)&&((C=C.createRange()).setStart(b.node,b.offset),T.removeAllRanges(),F>m?(T.addRange(C),T.extend(_.node,_.offset)):(C.setEnd(_.node,_.offset),T.addRange(C))))),C=[];for(T=S;T=T.parentNode;)1===T.nodeType&&C.push({element:T,left:T.scrollLeft,top:T.scrollTop});for("function"==typeof S.focus&&S.focus(),S=0;S<C.length;S++)(T=C[S]).element.scrollLeft=T.left,T.element.scrollTop=T.top}for(vr=null,Cn=!!pr,pr=null,t.current=e,La=r;null!==La;){S=!1,C=void 0;try{for(T=t,F=n;null!==La;){var O=La.effectTag;if(36&O){var P=La.alternate;switch(b=F,(m=La).tag){case 0:case 11:case 15:ha(jo,Io,m);break;case 1:var E=m.stateNode;if(4&m.effectTag)if(null===P)E.componentDidMount();else{var j=m.elementType===m.type?P.memoizedProps:no(m.type,P.memoizedProps);E.componentDidUpdate(j,P.memoizedState,E.__reactInternalSnapshotBeforeUpdate)}var I=m.updateQueue;null!==I&&na(0,I,E);break;case 3:var k=m.updateQueue;if(null!==k){if(_=null,null!==m.child)switch(m.child.tag){case 5:_=m.child.stateNode;break;case 1:_=m.child.stateNode}na(0,k,_)}break;case 5:var L=m.stateNode;null===P&&4&m.effectTag&&yr(m.type,m.memoizedProps)&&L.focus();break;case 6:case 4:case 12:case 13:case 17:break;default:a("163")}}if(128&O){var M=La.ref;if(null!==M){var N=La.stateNode;switch(La.tag){case 5:var D=N;break;default:D=N}"function"==typeof M?M(D):M.current=D}}512&O&&(Na=T),La=La.nextEffect}}catch(t){S=!0,C=t}S&&(null===La&&a("178"),Ga(La,C),null!==La&&(La=La.nextEffect))}null!==r&&null!==Na&&(O=function(t,e){Ka=Da=Na=null;var n=tl;tl=!0;do{if(512&e.effectTag){var r=!1,o=void 0;try{var i=e;ha(Lo,Fo,i),ha(Fo,ko,i)}catch(t){r=!0,o=t}r&&Ga(e,o)}e=e.nextEffect}while(null!==e);tl=n,0!==(n=t.expirationTime)&&_l(t,n)}.bind(null,t,r),Da=_r(O),Ka=O),Oa=Ma=!1,"function"==typeof zr&&zr(e.stateNode),O=e.expirationTime,0===(e=(e=e.childExpirationTime)>O?e:O)&&(Ua=null),t.expirationTime=e,t.finishedWork=null}function El(t){null===el&&a("246"),el.expirationTime=0,ol||(ol=!0,il=t)}function jl(t,e){var n=al;al=!0;try{return t(e)}finally{(al=n)||tl||Tl(1073741823,!1)}}function Il(t,e){if(al&&!ll){ll=!0;try{return t(e)}finally{ll=!1}}return t(e)}function kl(t,e,n){if(sl)return t(e,n);al||tl||0===rl||(Tl(rl,!1),rl=0);var r=sl,o=al;al=sl=!0;try{return t(e,n)}finally{sl=r,(al=o)||tl||Tl(1073741823,!1)}}function Ll(t,e,n,r,o){var i=e.current;t:if(n){e:{2===en(n=n._reactInternalFiber)&&1===n.tag||a("170");var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break e;case 1:if(Lr(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break e}}l=l.return}while(null!==l);a("171"),l=void 0}if(1===n.tag){var s=n.type;if(Lr(s)){n=Kr(n,s,l);break t}}n=l}else n=Pr;return null===e.context?e.context=n:e.pendingContext=n,e=o,(o=Xi(r)).payload={element:t},null!==(e=void 0===e?null:e)&&(o.callback=e),za(),Ji(i,o),Qa(i,r),r}function Ml(t,e,n,r){var o=e.current;return Ll(t,e,n,o=Va(bl(),o),r)}function Nl(t){if(!(t=t.current).child)return null;switch(t.child.tag){case 5:default:return t.child.stateNode}}function Dl(t){var e=1073741822-25*(1+((1073741822-bl()+500)/25|0));e>=Ta&&(e=Ta-1),this._expirationTime=Ta=e,this._root=t,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function Kl(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function Ul(t,e,n){t={current:e=Gr(3,null,null,e?3:0),containerInfo:t,pendingChildren:null,pingCache:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,didError:!1,pendingCommitExpirationTime:0,finishedWork:null,timeoutHandle:-1,context:null,pendingContext:null,hydrate:n,nextExpirationTimeToWorkOn:0,expirationTime:0,firstBatch:null,nextScheduledRoot:null},this._internalRoot=e.stateNode=t}function Al(t){return!(!t||1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType&&(8!==t.nodeType||" react-mount-point-unstable "!==t.nodeValue))}function zl(t,e,n,r,o){var i=n._reactRootContainer;if(i){if("function"==typeof o){var a=o;o=function(){var t=Nl(i._internalRoot);a.call(t)}}null!=t?i.legacy_renderSubtreeIntoContainer(t,e,o):i.render(e,o)}else{if(i=n._reactRootContainer=function(t,e){if(e||(e=!(!(e=t?9===t.nodeType?t.documentElement:t.firstChild:null)||1!==e.nodeType||!e.hasAttribute("data-reactroot"))),!e)for(var n;n=t.lastChild;)t.removeChild(n);return new Ul(t,!1,e)}(n,r),"function"==typeof o){var l=o;o=function(){var t=Nl(i._internalRoot);l.call(t)}}Il(function(){null!=t?i.legacy_renderSubtreeIntoContainer(t,e,o):i.render(e,o)})}return Nl(i._internalRoot)}function Rl(t,e){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return Al(e)||a("200"),function(t,e,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:Qt,key:null==r?null:""+r,children:t,containerInfo:e,implementation:n}}(t,e,null,n)}Ft=function(t,e,n){switch(e){case"input":if(we(t,n),e=n.name,"radio"===n.type&&null!=e){for(n=t;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+e)+'][type="radio"]'),e=0;e<n.length;e++){var r=n[e];if(r!==t&&r.form===t.form){var o=U(r);o||a("90"),Bt(r),we(r,o)}}}break;case"textarea":Zn(t,n);break;case"select":null!=(e=n.value)&&$n(t,!!n.multiple,e,!1)}},Dl.prototype.render=function(t){this._defer||a("250"),this._hasChildren=!0,this._children=t;var e=this._root._internalRoot,n=this._expirationTime,r=new Kl;return Ll(t,e,null,n,r._onCommit),r},Dl.prototype.then=function(t){if(this._didComplete)t();else{var e=this._callbacks;null===e&&(e=this._callbacks=[]),e.push(t)}},Dl.prototype.commit=function(){var t=this._root._internalRoot,e=t.firstBatch;if(this._defer&&null!==e||a("251"),this._hasChildren){var n=this._expirationTime;if(e!==this){this._hasChildren&&(n=this._expirationTime=e._expirationTime,this.render(this._children));for(var r=null,o=e;o!==this;)r=o,o=o._next;null===r&&a("251"),r._next=o._next,this._next=e,t.firstBatch=this}this._defer=!1,Fl(t,n),e=this._next,this._next=null,null!==(e=t.firstBatch=e)&&e._hasChildren&&e.render(e._children)}else this._next=null,this._defer=!1},Dl.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var t=this._callbacks;if(null!==t)for(var e=0;e<t.length;e++)(0,t[e])()}},Kl.prototype.then=function(t){if(this._didCommit)t();else{var e=this._callbacks;null===e&&(e=this._callbacks=[]),e.push(t)}},Kl.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var t=this._callbacks;if(null!==t)for(var e=0;e<t.length;e++){var n=t[e];"function"!=typeof n&&a("191",n),n()}}},Ul.prototype.render=function(t,e){var n=this._internalRoot,r=new Kl;return null!==(e=void 0===e?null:e)&&r.then(e),Ml(t,n,null,r._onCommit),r},Ul.prototype.unmount=function(t){var e=this._internalRoot,n=new Kl;return null!==(t=void 0===t?null:t)&&n.then(t),Ml(null,e,null,n._onCommit),n},Ul.prototype.legacy_renderSubtreeIntoContainer=function(t,e,n){var r=this._internalRoot,o=new Kl;return null!==(n=void 0===n?null:n)&&o.then(n),Ml(e,r,t,o._onCommit),o},Ul.prototype.createBatch=function(){var t=new Dl(this),e=t._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=t,t._next=null;else{for(n=null;null!==r&&r._expirationTime>=e;)n=r,r=r._next;t._next=r,null!==n&&(n._next=t)}return t},kt=jl,Lt=kl,Mt=function(){tl||0===rl||(Tl(rl,!1),rl=0)};var Wl={createPortal:Rl,findDOMNode:function(t){if(null==t)return null;if(1===t.nodeType)return t;var e=t._reactInternalFiber;return void 0===e&&("function"==typeof t.render?a("188"):a("268",Object.keys(t))),t=null===(t=rn(e))?null:t.stateNode},hydrate:function(t,e,n){return Al(e)||a("200"),zl(null,t,e,!0,n)},render:function(t,e,n){return Al(e)||a("200"),zl(null,t,e,!1,n)},unstable_renderSubtreeIntoContainer:function(t,e,n,r){return Al(n)||a("200"),(null==t||void 0===t._reactInternalFiber)&&a("38"),zl(t,e,n,!1,r)},unmountComponentAtNode:function(t){return Al(t)||a("40"),!!t._reactRootContainer&&(Il(function(){zl(null,null,t,!1,function(){t._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return Rl.apply(void 0,arguments)},unstable_batchedUpdates:jl,unstable_interactiveUpdates:kl,flushSync:function(t,e){tl&&a("187");var n=al;al=!0;try{return Xa(t,e)}finally{al=n,Tl(1073741823,!1)}},unstable_createRoot:function(t,e){return Al(t)||a("299","unstable_createRoot"),new Ul(t,!0,null!=e&&!0===e.hydrate)},unstable_flushControlled:function(t){var e=al;al=!0;try{Xa(t)}finally{(al=e)||tl||Tl(1073741823,!1)}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[D,K,U,E.injectEventPluginsByName,m,G,function(t){F(t,B)},jt,It,Pn,I]}};!function(t){var e=t.findFiberByHostInstance;(function(t){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var e=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(e.isDisabled||!e.supportsFiber)return!0;try{var n=e.inject(t);zr=Wr(function(t){return e.onCommitFiberRoot(n,t)}),Rr=Wr(function(t){return e.onCommitFiberUnmount(n,t)})}catch(t){}})(o({},t,{overrideProps:null,currentDispatcherRef:Gt.ReactCurrentDispatcher,findHostInstanceByFiber:function(t){return null===(t=rn(t))?null:t.stateNode},findFiberByHostInstance:function(t){return e?e(t):null}}))}({findFiberByHostInstance:N,bundleType:0,version:"16.8.1",rendererPackageName:"react-dom"});var Bl={default:Wl},Gl=Bl&&Wl||Bl;t.exports=Gl.default||Gl},function(t,e,n){"use strict";(function(t){
/** @license React v0.13.2
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(e,"__esModule",{value:!0});var n=null,r=!1,o=3,i=-1,a=-1,l=!1,s=!1;function c(){if(!l){var t=n.expirationTime;s?S():s=!0,w(f,t)}}function u(){var t=n,e=n.next;if(n===e)n=null;else{var r=n.previous;n=r.next=e,e.previous=r}t.next=t.previous=null,r=t.callback,e=t.expirationTime,t=t.priorityLevel;var i=o,l=a;o=t,a=e;try{var s=r()}finally{o=i,a=l}if("function"==typeof s)if(s={callback:s,priorityLevel:t,expirationTime:e,next:null,previous:null},null===n)n=s.next=s.previous=s;else{r=null,t=n;do{if(t.expirationTime>=e){r=t;break}t=t.next}while(t!==n);null===r?r=n:r===n&&(n=s,c()),(e=r.previous).next=r.previous=s,s.next=r,s.previous=e}}function d(){if(-1===i&&null!==n&&1===n.priorityLevel){l=!0;try{do{u()}while(null!==n&&1===n.priorityLevel)}finally{l=!1,null!==n?c():s=!1}}}function f(t){l=!0;var o=r;r=t;try{if(t)for(;null!==n;){var i=e.unstable_now();if(!(n.expirationTime<=i))break;do{u()}while(null!==n&&n.expirationTime<=i)}else if(null!==n)do{u()}while(null!==n&&!C())}finally{l=!1,r=o,null!==n?c():s=!1,d()}}var h,p,v=Date,y="function"==typeof setTimeout?setTimeout:void 0,g="function"==typeof clearTimeout?clearTimeout:void 0,m="function"==typeof requestAnimationFrame?requestAnimationFrame:void 0,b="function"==typeof cancelAnimationFrame?cancelAnimationFrame:void 0;function _(t){h=m(function(e){g(p),t(e)}),p=y(function(){b(h),t(e.unstable_now())},100)}if("object"==typeof performance&&"function"==typeof performance.now){var x=performance;e.unstable_now=function(){return x.now()}}else e.unstable_now=function(){return v.now()};var w,S,C,T=null;if("undefined"!=typeof window?T=window:void 0!==t&&(T=t),T&&T._schedMock){var F=T._schedMock;w=F[0],S=F[1],C=F[2],e.unstable_now=F[3]}else if("undefined"==typeof window||"function"!=typeof MessageChannel){var O=null,P=function(t){if(null!==O)try{O(t)}finally{O=null}};w=function(t){null!==O?setTimeout(w,0,t):(O=t,setTimeout(P,0,!1))},S=function(){O=null},C=function(){return!1}}else{"undefined"!=typeof console&&("function"!=typeof m&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof b&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"));var E=null,j=!1,I=-1,k=!1,L=!1,M=0,N=33,D=33;C=function(){return M<=e.unstable_now()};var K=new MessageChannel,U=K.port2;K.port1.onmessage=function(){j=!1;var t=E,n=I;E=null,I=-1;var r=e.unstable_now(),o=!1;if(0>=M-r){if(!(-1!==n&&n<=r))return k||(k=!0,_(A)),E=t,void(I=n);o=!0}if(null!==t){L=!0;try{t(o)}finally{L=!1}}};var A=function(t){if(null!==E){_(A);var e=t-M+D;e<D&&N<D?(8>e&&(e=8),D=e<N?N:e):N=e,M=t+D,j||(j=!0,U.postMessage(void 0))}else k=!1};w=function(t,e){E=t,I=e,L||0>e?U.postMessage(void 0):k||(k=!0,_(A))},S=function(){E=null,j=!1,I=-1}}e.unstable_ImmediatePriority=1,e.unstable_UserBlockingPriority=2,e.unstable_NormalPriority=3,e.unstable_IdlePriority=5,e.unstable_LowPriority=4,e.unstable_runWithPriority=function(t,n){switch(t){case 1:case 2:case 3:case 4:case 5:break;default:t=3}var r=o,a=i;o=t,i=e.unstable_now();try{return n()}finally{o=r,i=a,d()}},e.unstable_next=function(t){switch(o){case 1:case 2:case 3:var n=3;break;default:n=o}var r=o,a=i;o=n,i=e.unstable_now();try{return t()}finally{o=r,i=a,d()}},e.unstable_scheduleCallback=function(t,r){var a=-1!==i?i:e.unstable_now();if("object"==typeof r&&null!==r&&"number"==typeof r.timeout)r=a+r.timeout;else switch(o){case 1:r=a+-1;break;case 2:r=a+250;break;case 5:r=a+1073741823;break;case 4:r=a+1e4;break;default:r=a+5e3}if(t={callback:t,priorityLevel:o,expirationTime:r,next:null,previous:null},null===n)n=t.next=t.previous=t,c();else{a=null;var l=n;do{if(l.expirationTime>r){a=l;break}l=l.next}while(l!==n);null===a?a=n:a===n&&(n=t,c()),(r=a.previous).next=a.previous=t,t.next=a,t.previous=r}return t},e.unstable_cancelCallback=function(t){var e=t.next;if(null!==e){if(e===t)n=null;else{t===n&&(n=e);var r=t.previous;r.next=e,e.previous=r}t.next=t.previous=null}},e.unstable_wrapCallback=function(t){var n=o;return function(){var r=o,a=i;o=n,i=e.unstable_now();try{return t.apply(this,arguments)}finally{o=r,i=a,d()}}},e.unstable_getCurrentPriorityLevel=function(){return o},e.unstable_shouldYield=function(){return!r&&(null!==n&&n.expirationTime<a||C())},e.unstable_continueExecution=function(){null!==n&&c()},e.unstable_pauseExecution=function(){},e.unstable_getFirstCallbackNode=function(){return n}}).call(this,n(14))},function(t,e){t.exports=function(t){if(!t.webpackPolyfill){var e=Object.create(t);e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),Object.defineProperty(e,"exports",{enumerable:!0}),e.webpackPolyfill=1}return e}},function(t,e,n){"use strict";var r=n(63);function o(){}function i(){}i.resetWarningCache=o,t.exports=function(){function t(t,e,n,o,i,a){if(a!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function e(){return t}t.isRequired=t;var n={array:t,bool:t,func:t,number:t,object:t,string:t,symbol:t,any:t,arrayOf:e,element:t,elementType:t,instanceOf:e,node:t,objectOf:e,oneOf:e,oneOfType:e,shape:e,exact:e,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},function(t,e,n){"use strict";t.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(t,e,n){"use strict";
/** @license React v16.8.2
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(e,"__esModule",{value:!0});var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,l=r?Symbol.for("react.strict_mode"):60108,s=r?Symbol.for("react.profiler"):60114,c=r?Symbol.for("react.provider"):60109,u=r?Symbol.for("react.context"):60110,d=r?Symbol.for("react.async_mode"):60111,f=r?Symbol.for("react.concurrent_mode"):60111,h=r?Symbol.for("react.forward_ref"):60112,p=r?Symbol.for("react.suspense"):60113,v=r?Symbol.for("react.memo"):60115,y=r?Symbol.for("react.lazy"):60116;function g(t){if("object"==typeof t&&null!==t){var e=t.$$typeof;switch(e){case o:switch(t=t.type){case d:case f:case a:case s:case l:case p:return t;default:switch(t=t&&t.$$typeof){case u:case h:case c:return t;default:return e}}case y:case v:case i:return e}}}function m(t){return g(t)===f}e.typeOf=g,e.AsyncMode=d,e.ConcurrentMode=f,e.ContextConsumer=u,e.ContextProvider=c,e.Element=o,e.ForwardRef=h,e.Fragment=a,e.Lazy=y,e.Memo=v,e.Portal=i,e.Profiler=s,e.StrictMode=l,e.Suspense=p,e.isValidElementType=function(t){return"string"==typeof t||"function"==typeof t||t===a||t===f||t===s||t===l||t===p||"object"==typeof t&&null!==t&&(t.$$typeof===y||t.$$typeof===v||t.$$typeof===c||t.$$typeof===u||t.$$typeof===h)},e.isAsyncMode=function(t){return m(t)||g(t)===d},e.isConcurrentMode=m,e.isContextConsumer=function(t){return g(t)===u},e.isContextProvider=function(t){return g(t)===c},e.isElement=function(t){return"object"==typeof t&&null!==t&&t.$$typeof===o},e.isForwardRef=function(t){return g(t)===h},e.isFragment=function(t){return g(t)===a},e.isLazy=function(t){return g(t)===y},e.isMemo=function(t){return g(t)===v},e.isPortal=function(t){return g(t)===i},e.isProfiler=function(t){return g(t)===s},e.isStrictMode=function(t){return g(t)===l},e.isSuspense=function(t){return g(t)===p}},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,n){"use strict";t.exports=n(67)},function(t,e,n){
/** @license React v0.19.1
 * react-reconciler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
t.exports=function e(r){"use strict";var o=n(24),i=n(0);function a(t){for(var e=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+t,r=0;r<e;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(t,e,n,r,o,i,a,l){if(!t){if(t=void 0,void 0===e)t=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[n,r,o,i,a,l],c=0;(t=Error(e.replace(/%s/g,function(){return s[c++]}))).name="Invariant Violation"}throw t.framesToPop=1,t}}(!1,"Minified React error #"+t+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var l=i.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;l.hasOwnProperty("ReactCurrentDispatcher")||(l.ReactCurrentDispatcher={current:null});var s="function"==typeof Symbol&&Symbol.for,c=s?Symbol.for("react.element"):60103,u=s?Symbol.for("react.portal"):60106,d=s?Symbol.for("react.fragment"):60107,f=s?Symbol.for("react.strict_mode"):60108,h=s?Symbol.for("react.profiler"):60114,p=s?Symbol.for("react.provider"):60109,v=s?Symbol.for("react.context"):60110,y=s?Symbol.for("react.concurrent_mode"):60111,g=s?Symbol.for("react.forward_ref"):60112,m=s?Symbol.for("react.suspense"):60113,b=s?Symbol.for("react.memo"):60115,_=s?Symbol.for("react.lazy"):60116,x="function"==typeof Symbol&&Symbol.iterator;function w(t){return null===t||"object"!=typeof t?null:"function"==typeof(t=x&&t[x]||t["@@iterator"])?t:null}function S(t){if(null==t)return null;if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t;switch(t){case y:return"ConcurrentMode";case d:return"Fragment";case u:return"Portal";case h:return"Profiler";case f:return"StrictMode";case m:return"Suspense"}if("object"==typeof t)switch(t.$$typeof){case v:return"Context.Consumer";case p:return"Context.Provider";case g:var e=t.render;return e=e.displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case b:return S(t.type);case _:if(t=1===t._status?t._result:null)return S(t)}return null}function C(t){var e=t;if(t.alternate)for(;e.return;)e=e.return;else{if(0!=(2&e.effectTag))return 1;for(;e.return;)if(0!=(2&(e=e.return).effectTag))return 1}return 3===e.tag?2:3}function T(t){2!==C(t)&&a("188")}function F(t){var e=t.alternate;if(!e)return 3===(e=C(t))&&a("188"),1===e?null:t;for(var n=t,r=e;;){var o=n.return,i=o?o.alternate:null;if(!o||!i)break;if(o.child===i.child){for(var l=o.child;l;){if(l===n)return T(o),t;if(l===r)return T(o),e;l=l.sibling}a("188")}if(n.return!==r.return)n=o,r=i;else{l=!1;for(var s=o.child;s;){if(s===n){l=!0,n=o,r=i;break}if(s===r){l=!0,r=o,n=i;break}s=s.sibling}if(!l){for(s=i.child;s;){if(s===n){l=!0,n=i,r=o;break}if(s===r){l=!0,r=i,n=o;break}s=s.sibling}l||a("189")}}n.alternate!==r&&a("190")}return 3!==n.tag&&a("188"),n.stateNode.current===n?t:e}function O(t){if(!(t=F(t)))return null;for(var e=t;;){if(5===e.tag||6===e.tag)return e;if(e.child)e.child.return=e,e=e.child;else{if(e===t)break;for(;!e.sibling;){if(!e.return||e.return===t)return null;e=e.return}e.sibling.return=e.return,e=e.sibling}}return null}var P=r.getPublicInstance,E=r.getRootHostContext,j=r.getChildHostContext,I=r.prepareForCommit,k=r.resetAfterCommit,L=r.createInstance,M=r.appendInitialChild,N=r.finalizeInitialChildren,D=r.prepareUpdate,K=r.shouldSetTextContent,U=r.shouldDeprioritizeSubtree,A=r.createTextInstance,z=r.scheduleDeferredCallback,R=r.cancelDeferredCallback,W=r.shouldYield,B=r.setTimeout,G=r.clearTimeout,V=r.noTimeout,Y=r.schedulePassiveEffects,$=r.cancelPassiveEffects,Q=r.now,X=r.isPrimaryRenderer,Z=r.supportsMutation,J=r.supportsPersistence,H=r.supportsHydration,q=r.appendChild,tt=r.appendChildToContainer,et=r.commitTextUpdate,nt=r.commitMount,rt=r.commitUpdate,ot=r.insertBefore,it=r.insertInContainerBefore,at=r.removeChild,lt=r.removeChildFromContainer,st=r.resetTextContent,ct=r.hideInstance,ut=r.hideTextInstance,dt=r.unhideInstance,ft=r.unhideTextInstance,ht=r.cloneInstance,pt=r.createContainerChildSet,vt=r.appendChildToContainerChildSet,yt=r.finalizeContainerChildren,gt=r.replaceContainerChildren,mt=r.cloneHiddenInstance,bt=r.cloneUnhiddenInstance,_t=r.createHiddenTextInstance,xt=r.canHydrateInstance,wt=r.canHydrateTextInstance,St=r.getNextHydratableSibling,Ct=r.getFirstHydratableChild,Tt=r.hydrateInstance,Ft=r.hydrateTextInstance,Ot=/^(.*)[\\\/]/;function Pt(t){var e="";do{t:switch(t.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break t;default:var r=t._debugOwner,o=t._debugSource,i=S(t.type);n=null,r&&(n=S(r.type)),r=i,i="",o?i=" (at "+o.fileName.replace(Ot,"")+":"+o.lineNumber+")":n&&(i=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+i}e+=n,t=t.return}while(t);return e}new Set;var Et=[],jt=-1;function It(t){0>jt||(t.current=Et[jt],Et[jt]=null,jt--)}function kt(t,e){Et[++jt]=t.current,t.current=e}var Lt={},Mt={current:Lt},Nt={current:!1},Dt=Lt;function Kt(t,e){var n=t.type.contextTypes;if(!n)return Lt;var r=t.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===e)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=e[o];return r&&((t=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=e,t.__reactInternalMemoizedMaskedChildContext=i),i}function Ut(t){return null!=(t=t.childContextTypes)}function At(t){It(Nt),It(Mt)}function zt(t){It(Nt),It(Mt)}function Rt(t,e,n){Mt.current!==Lt&&a("168"),kt(Mt,e),kt(Nt,n)}function Wt(t,e,n){var r=t.stateNode;if(t=e.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())i in t||a("108",S(e)||"Unknown",i);return o({},n,r)}function Bt(t){var e=t.stateNode;return e=e&&e.__reactInternalMemoizedMergedChildContext||Lt,Dt=Mt.current,kt(Mt,e),kt(Nt,Nt.current),!0}function Gt(t,e,n){var r=t.stateNode;r||a("169"),n?(e=Wt(t,e,Dt),r.__reactInternalMemoizedMergedChildContext=e,It(Nt),It(Mt),kt(Mt,e)):It(Nt),kt(Nt,n)}var Vt=null,Yt=null;function $t(t){return function(e){try{return t(e)}catch(t){}}}function Qt(t,e,n,r){this.tag=t,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=e,this.contextDependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Xt(t,e,n,r){return new Qt(t,e,n,r)}function Zt(t){return!(!(t=t.prototype)||!t.isReactComponent)}function Jt(t,e){var n=t.alternate;return null===n?((n=Xt(t.tag,e,t.key,t.mode)).elementType=t.elementType,n.type=t.type,n.stateNode=t.stateNode,n.alternate=t,t.alternate=n):(n.pendingProps=e,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=t.childExpirationTime,n.expirationTime=t.expirationTime,n.child=t.child,n.memoizedProps=t.memoizedProps,n.memoizedState=t.memoizedState,n.updateQueue=t.updateQueue,n.contextDependencies=t.contextDependencies,n.sibling=t.sibling,n.index=t.index,n.ref=t.ref,n}function Ht(t,e,n,r,o,i){var l=2;if(r=t,"function"==typeof t)Zt(t)&&(l=1);else if("string"==typeof t)l=5;else t:switch(t){case d:return qt(n.children,o,i,e);case y:return te(n,3|o,i,e);case f:return te(n,2|o,i,e);case h:return(t=Xt(12,n,e,4|o)).elementType=h,t.type=h,t.expirationTime=i,t;case m:return(t=Xt(13,n,e,o)).elementType=m,t.type=m,t.expirationTime=i,t;default:if("object"==typeof t&&null!==t)switch(t.$$typeof){case p:l=10;break t;case v:l=9;break t;case g:l=11;break t;case b:l=14;break t;case _:l=16,r=null;break t}a("130",null==t?t:typeof t,"")}return(e=Xt(l,n,e,o)).elementType=t,e.type=r,e.expirationTime=i,e}function qt(t,e,n,r){return(t=Xt(7,t,r,e)).expirationTime=n,t}function te(t,e,n,r){return t=Xt(8,t,r,e),e=0==(1&e)?f:y,t.elementType=e,t.type=e,t.expirationTime=n,t}function ee(t,e,n){return(t=Xt(6,t,null,e)).expirationTime=n,t}function ne(t,e,n){return(e=Xt(4,null!==t.children?t.children:[],t.key,e)).expirationTime=n,e.stateNode={containerInfo:t.containerInfo,pendingChildren:null,implementation:t.implementation},e}function re(t,e){t.didError=!1;var n=t.earliestPendingTime;0===n?t.earliestPendingTime=t.latestPendingTime=e:n<e?t.earliestPendingTime=e:t.latestPendingTime>e&&(t.latestPendingTime=e),ae(e,t)}function oe(t,e){t.didError=!1,t.latestPingedTime>=e&&(t.latestPingedTime=0);var n=t.earliestPendingTime,r=t.latestPendingTime;n===e?t.earliestPendingTime=r===e?t.latestPendingTime=0:r:r===e&&(t.latestPendingTime=n),n=t.earliestSuspendedTime,r=t.latestSuspendedTime,0===n?t.earliestSuspendedTime=t.latestSuspendedTime=e:n<e?t.earliestSuspendedTime=e:r>e&&(t.latestSuspendedTime=e),ae(e,t)}function ie(t,e){var n=t.earliestPendingTime;return n>e&&(e=n),(t=t.earliestSuspendedTime)>e&&(e=t),e}function ae(t,e){var n=e.earliestSuspendedTime,r=e.latestSuspendedTime,o=e.earliestPendingTime,i=e.latestPingedTime;0===(o=0!==o?o:i)&&(0===t||r<t)&&(o=r),0!==(t=o)&&n>t&&(t=n),e.nextExpirationTimeToWorkOn=o,e.expirationTime=t}function le(t,e){return t===e&&(0!==t||1/t==1/e)||t!=t&&e!=e}var se=Object.prototype.hasOwnProperty;function ce(t,e){if(le(t,e))return!0;if("object"!=typeof t||null===t||"object"!=typeof e||null===e)return!1;var n=Object.keys(t),r=Object.keys(e);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!se.call(e,n[r])||!le(t[n[r]],e[n[r]]))return!1;return!0}function ue(t,e){if(t&&t.defaultProps)for(var n in e=o({},e),t=t.defaultProps)void 0===e[n]&&(e[n]=t[n]);return e}var de=(new i.Component).refs;function fe(t,e,n,r){n=null==(n=n(r,e=t.memoizedState))?e:o({},e,n),t.memoizedState=n,null!==(r=t.updateQueue)&&0===t.expirationTime&&(r.baseState=n)}var he={isMounted:function(t){return!!(t=t._reactInternalFiber)&&2===C(t)},enqueueSetState:function(t,e,n){t=t._reactInternalFiber;var r=Io(),o=or(r=no(r,t));o.payload=e,null!=n&&(o.callback=n),Jr(),ar(t,o),io(t,r)},enqueueReplaceState:function(t,e,n){t=t._reactInternalFiber;var r=Io(),o=or(r=no(r,t));o.tag=Hn,o.payload=e,null!=n&&(o.callback=n),Jr(),ar(t,o),io(t,r)},enqueueForceUpdate:function(t,e){t=t._reactInternalFiber;var n=Io(),r=or(n=no(n,t));r.tag=qn,null!=e&&(r.callback=e),Jr(),ar(t,r),io(t,n)}};function pe(t,e,n,r,o,i,a){return"function"==typeof(t=t.stateNode).shouldComponentUpdate?t.shouldComponentUpdate(r,i,a):!e.prototype||!e.prototype.isPureReactComponent||(!ce(n,r)||!ce(o,i))}function ve(t,e,n){var r=!1,o=Lt,i=e.contextType;return"object"==typeof i&&null!==i?i=Zn(i):(o=Ut(e)?Dt:Mt.current,i=(r=null!=(r=e.contextTypes))?Kt(t,o):Lt),e=new e(n,i),t.memoizedState=null!==e.state&&void 0!==e.state?e.state:null,e.updater=he,t.stateNode=e,e._reactInternalFiber=t,r&&((t=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,t.__reactInternalMemoizedMaskedChildContext=i),e}function ye(t,e,n,r){t=e.state,"function"==typeof e.componentWillReceiveProps&&e.componentWillReceiveProps(n,r),"function"==typeof e.UNSAFE_componentWillReceiveProps&&e.UNSAFE_componentWillReceiveProps(n,r),e.state!==t&&he.enqueueReplaceState(e,e.state,null)}function ge(t,e,n,r){var o=t.stateNode;o.props=n,o.state=t.memoizedState,o.refs=de;var i=e.contextType;"object"==typeof i&&null!==i?o.context=Zn(i):(i=Ut(e)?Dt:Mt.current,o.context=Kt(t,i)),null!==(i=t.updateQueue)&&(ur(t,i,n,o,r),o.state=t.memoizedState),"function"==typeof(i=e.getDerivedStateFromProps)&&(fe(t,e,i,n),o.state=t.memoizedState),"function"==typeof e.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(e=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),e!==o.state&&he.enqueueReplaceState(o,o.state,null),null!==(i=t.updateQueue)&&(ur(t,i,n,o,r),o.state=t.memoizedState)),"function"==typeof o.componentDidMount&&(t.effectTag|=4)}var me=Array.isArray;function be(t,e,n){if(null!==(t=n.ref)&&"function"!=typeof t&&"object"!=typeof t){if(n._owner){n=n._owner;var r=void 0;n&&(1!==n.tag&&a("309"),r=n.stateNode),r||a("147",t);var o=""+t;return null!==e&&null!==e.ref&&"function"==typeof e.ref&&e.ref._stringRef===o?e.ref:((e=function(t){var e=r.refs;e===de&&(e=r.refs={}),null===t?delete e[o]:e[o]=t})._stringRef=o,e)}"string"!=typeof t&&a("284"),n._owner||a("290",t)}return t}function _e(t,e){"textarea"!==t.type&&a("31","[object Object]"===Object.prototype.toString.call(e)?"object with keys {"+Object.keys(e).join(", ")+"}":e,"")}function xe(t){function e(e,n){if(t){var r=e.lastEffect;null!==r?(r.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!t)return null;for(;null!==r;)e(n,r),r=r.sibling;return null}function r(t,e){for(t=new Map;null!==e;)null!==e.key?t.set(e.key,e):t.set(e.index,e),e=e.sibling;return t}function o(t,e,n){return(t=Jt(t,e)).index=0,t.sibling=null,t}function i(e,n,r){return e.index=r,t?null!==(r=e.alternate)?(r=r.index)<n?(e.effectTag=2,n):r:(e.effectTag=2,n):n}function l(e){return t&&null===e.alternate&&(e.effectTag=2),e}function s(t,e,n,r){return null===e||6!==e.tag?((e=ee(n,t.mode,r)).return=t,e):((e=o(e,n)).return=t,e)}function f(t,e,n,r){return null!==e&&e.elementType===n.type?((r=o(e,n.props)).ref=be(t,e,n),r.return=t,r):((r=Ht(n.type,n.key,n.props,null,t.mode,r)).ref=be(t,e,n),r.return=t,r)}function h(t,e,n,r){return null===e||4!==e.tag||e.stateNode.containerInfo!==n.containerInfo||e.stateNode.implementation!==n.implementation?((e=ne(n,t.mode,r)).return=t,e):((e=o(e,n.children||[])).return=t,e)}function p(t,e,n,r,i){return null===e||7!==e.tag?((e=qt(n,t.mode,r,i)).return=t,e):((e=o(e,n)).return=t,e)}function v(t,e,n){if("string"==typeof e||"number"==typeof e)return(e=ee(""+e,t.mode,n)).return=t,e;if("object"==typeof e&&null!==e){switch(e.$$typeof){case c:return(n=Ht(e.type,e.key,e.props,null,t.mode,n)).ref=be(t,null,e),n.return=t,n;case u:return(e=ne(e,t.mode,n)).return=t,e}if(me(e)||w(e))return(e=qt(e,t.mode,n,null)).return=t,e;_e(t,e)}return null}function y(t,e,n,r){var o=null!==e?e.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:s(t,e,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case c:return n.key===o?n.type===d?p(t,e,n.props.children,r,o):f(t,e,n,r):null;case u:return n.key===o?h(t,e,n,r):null}if(me(n)||w(n))return null!==o?null:p(t,e,n,r,null);_e(t,n)}return null}function g(t,e,n,r,o){if("string"==typeof r||"number"==typeof r)return s(e,t=t.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case c:return t=t.get(null===r.key?n:r.key)||null,r.type===d?p(e,t,r.props.children,o,r.key):f(e,t,r,o);case u:return h(e,t=t.get(null===r.key?n:r.key)||null,r,o)}if(me(r)||w(r))return p(e,t=t.get(n)||null,r,o,null);_e(e,r)}return null}function m(o,a,l,s){for(var c=null,u=null,d=a,f=a=0,h=null;null!==d&&f<l.length;f++){d.index>f?(h=d,d=null):h=d.sibling;var p=y(o,d,l[f],s);if(null===p){null===d&&(d=h);break}t&&d&&null===p.alternate&&e(o,d),a=i(p,a,f),null===u?c=p:u.sibling=p,u=p,d=h}if(f===l.length)return n(o,d),c;if(null===d){for(;f<l.length;f++)(d=v(o,l[f],s))&&(a=i(d,a,f),null===u?c=d:u.sibling=d,u=d);return c}for(d=r(o,d);f<l.length;f++)(h=g(d,o,f,l[f],s))&&(t&&null!==h.alternate&&d.delete(null===h.key?f:h.key),a=i(h,a,f),null===u?c=h:u.sibling=h,u=h);return t&&d.forEach(function(t){return e(o,t)}),c}function b(o,l,s,c){var u=w(s);"function"!=typeof u&&a("150"),null==(s=u.call(s))&&a("151");for(var d=u=null,f=l,h=l=0,p=null,m=s.next();null!==f&&!m.done;h++,m=s.next()){f.index>h?(p=f,f=null):p=f.sibling;var b=y(o,f,m.value,c);if(null===b){f||(f=p);break}t&&f&&null===b.alternate&&e(o,f),l=i(b,l,h),null===d?u=b:d.sibling=b,d=b,f=p}if(m.done)return n(o,f),u;if(null===f){for(;!m.done;h++,m=s.next())null!==(m=v(o,m.value,c))&&(l=i(m,l,h),null===d?u=m:d.sibling=m,d=m);return u}for(f=r(o,f);!m.done;h++,m=s.next())null!==(m=g(f,o,h,m.value,c))&&(t&&null!==m.alternate&&f.delete(null===m.key?h:m.key),l=i(m,l,h),null===d?u=m:d.sibling=m,d=m);return t&&f.forEach(function(t){return e(o,t)}),u}return function(t,r,i,s){var f="object"==typeof i&&null!==i&&i.type===d&&null===i.key;f&&(i=i.props.children);var h="object"==typeof i&&null!==i;if(h)switch(i.$$typeof){case c:t:{for(h=i.key,f=r;null!==f;){if(f.key===h){if(7===f.tag?i.type===d:f.elementType===i.type){n(t,f.sibling),(r=o(f,i.type===d?i.props.children:i.props)).ref=be(t,f,i),r.return=t,t=r;break t}n(t,f);break}e(t,f),f=f.sibling}i.type===d?((r=qt(i.props.children,t.mode,s,i.key)).return=t,t=r):((s=Ht(i.type,i.key,i.props,null,t.mode,s)).ref=be(t,r,i),s.return=t,t=s)}return l(t);case u:t:{for(f=i.key;null!==r;){if(r.key===f){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(t,r.sibling),(r=o(r,i.children||[])).return=t,t=r;break t}n(t,r);break}e(t,r),r=r.sibling}(r=ne(i,t.mode,s)).return=t,t=r}return l(t)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(t,r.sibling),(r=o(r,i)).return=t,t=r):(n(t,r),(r=ee(i,t.mode,s)).return=t,t=r),l(t);if(me(i))return m(t,r,i,s);if(w(i))return b(t,r,i,s);if(h&&_e(t,i),void 0===i&&!f)switch(t.tag){case 1:case 0:a("152",(s=t.type).displayName||s.name||"Component")}return n(t,r)}}var we=xe(!0),Se=xe(!1),Ce={},Te={current:Ce},Fe={current:Ce},Oe={current:Ce};function Pe(t){return t===Ce&&a("174"),t}function Ee(t,e){kt(Oe,e),kt(Fe,t),kt(Te,Ce),e=E(e),It(Te),kt(Te,e)}function je(t){It(Te),It(Fe),It(Oe)}function Ie(){return Pe(Te.current)}function ke(t){var e=Pe(Oe.current),n=Pe(Te.current);n!==(e=j(n,t.type,e))&&(kt(Fe,t),kt(Te,e))}function Le(t){Fe.current===t&&(It(Te),It(Fe))}var Me=0,Ne=2,De=4,Ke=8,Ue=16,Ae=32,ze=64,Re=128,We=l.ReactCurrentDispatcher,Be=0,Ge=null,Ve=null,Ye=null,$e=null,Qe=null,Xe=null,Ze=0,Je=null,He=0,qe=!1,tn=null,en=0;function nn(){a("307")}function rn(t,e){if(null===e)return!1;for(var n=0;n<e.length&&n<t.length;n++)if(!le(t[n],e[n]))return!1;return!0}function on(t,e,n,r,o,i){if(Be=i,Ge=e,Ye=null!==t?t.memoizedState:null,We.current=null===Ye?mn:bn,e=n(r,o),qe){do{qe=!1,en+=1,Ye=null!==t?t.memoizedState:null,Xe=$e,Je=Qe=Ve=null,We.current=bn,e=n(r,o)}while(qe);tn=null,en=0}return We.current=gn,(t=Ge).memoizedState=$e,t.expirationTime=Ze,t.updateQueue=Je,t.effectTag|=He,t=null!==Ve&&null!==Ve.next,Be=0,Xe=Qe=$e=Ye=Ve=Ge=null,Ze=0,Je=null,He=0,t&&a("300"),e}function an(){We.current=gn,Be=0,Xe=Qe=$e=Ye=Ve=Ge=null,Ze=0,Je=null,He=0,qe=!1,tn=null,en=0}function ln(){var t={memoizedState:null,baseState:null,queue:null,baseUpdate:null,next:null};return null===Qe?$e=Qe=t:Qe=Qe.next=t,Qe}function sn(){if(null!==Xe)Xe=(Qe=Xe).next,Ye=null!==(Ve=Ye)?Ve.next:null;else{null===Ye&&a("310");var t={memoizedState:(Ve=Ye).memoizedState,baseState:Ve.baseState,queue:Ve.queue,baseUpdate:Ve.baseUpdate,next:null};Qe=null===Qe?$e=t:Qe.next=t,Ye=Ve.next}return Qe}function cn(t,e){return"function"==typeof e?e(t):e}function un(t){var e=sn(),n=e.queue;if(null===n&&a("311"),0<en){var r=n.dispatch;if(null!==tn){var o=tn.get(n);if(void 0!==o){tn.delete(n);var i=e.memoizedState;do{i=t(i,o.action),o=o.next}while(null!==o);return le(i,e.memoizedState)||(jn=!0),e.memoizedState=i,e.baseUpdate===n.last&&(e.baseState=i),[i,r]}}return[e.memoizedState,r]}r=n.last;var l=e.baseUpdate;if(i=e.baseState,null!==l?(null!==r&&(r.next=null),r=l.next):r=null!==r?r.next:null,null!==r){var s=o=null,c=r,u=!1;do{var d=c.expirationTime;d<Be?(u||(u=!0,s=l,o=i),d>Ze&&(Ze=d)):i=c.eagerReducer===t?c.eagerState:t(i,c.action),l=c,c=c.next}while(null!==c&&c!==r);u||(s=l,o=i),le(i,e.memoizedState)||(jn=!0),e.memoizedState=i,e.baseUpdate=s,e.baseState=o,n.eagerReducer=t,n.eagerState=i}return[e.memoizedState,n.dispatch]}function dn(t,e,n,r){return t={tag:t,create:e,destroy:n,deps:r,next:null},null===Je?(Je={lastEffect:null}).lastEffect=t.next=t:null===(e=Je.lastEffect)?Je.lastEffect=t.next=t:(n=e.next,e.next=t,t.next=n,Je.lastEffect=t),t}function fn(t,e,n,r){var o=ln();He|=t,o.memoizedState=dn(e,n,void 0,void 0===r?null:r)}function hn(t,e,n,r){var o=sn();r=void 0===r?null:r;var i=void 0;if(null!==Ve){var a=Ve.memoizedState;if(i=a.destroy,null!==r&&rn(r,a.deps))return void dn(Me,n,i,r)}He|=t,o.memoizedState=dn(e,n,i,r)}function pn(t,e){return"function"==typeof e?(t=t(),e(t),function(){e(null)}):null!=e?(t=t(),e.current=t,function(){e.current=null}):void 0}function vn(){}function yn(t,e,n){25>en||a("301");var r=t.alternate;if(t===Ge||null!==r&&r===Ge)if(qe=!0,t={expirationTime:Be,action:n,eagerReducer:null,eagerState:null,next:null},null===tn&&(tn=new Map),void 0===(n=tn.get(e)))tn.set(e,t);else{for(e=n;null!==e.next;)e=e.next;e.next=t}else{Jr();var o=Io(),i={expirationTime:o=no(o,t),action:n,eagerReducer:null,eagerState:null,next:null},l=e.last;if(null===l)i.next=i;else{var s=l.next;null!==s&&(i.next=s),l.next=i}if(e.last=i,0===t.expirationTime&&(null===r||0===r.expirationTime)&&null!==(r=e.eagerReducer))try{var c=e.eagerState,u=r(c,n);if(i.eagerReducer=r,i.eagerState=u,le(u,c))return}catch(t){}io(t,o)}}var gn={readContext:Zn,useCallback:nn,useContext:nn,useEffect:nn,useImperativeHandle:nn,useLayoutEffect:nn,useMemo:nn,useReducer:nn,useRef:nn,useState:nn,useDebugValue:nn},mn={readContext:Zn,useCallback:function(t,e){return ln().memoizedState=[t,void 0===e?null:e],t},useContext:Zn,useEffect:function(t,e){return fn(516,Re|ze,t,e)},useImperativeHandle:function(t,e,n){return n=null!=n?n.concat([t]):[t],fn(4,De|Ae,pn.bind(null,e,t),n)},useLayoutEffect:function(t,e){return fn(4,De|Ae,t,e)},useMemo:function(t,e){var n=ln();return e=void 0===e?null:e,t=t(),n.memoizedState=[t,e],t},useReducer:function(t,e,n){var r=ln();return e=void 0!==n?n(e):e,r.memoizedState=r.baseState=e,t=(t=r.queue={last:null,dispatch:null,eagerReducer:t,eagerState:e}).dispatch=yn.bind(null,Ge,t),[r.memoizedState,t]},useRef:function(t){return t={current:t},ln().memoizedState=t},useState:function(t){var e=ln();return"function"==typeof t&&(t=t()),e.memoizedState=e.baseState=t,t=(t=e.queue={last:null,dispatch:null,eagerReducer:cn,eagerState:t}).dispatch=yn.bind(null,Ge,t),[e.memoizedState,t]},useDebugValue:vn},bn={readContext:Zn,useCallback:function(t,e){var n=sn();e=void 0===e?null:e;var r=n.memoizedState;return null!==r&&null!==e&&rn(e,r[1])?r[0]:(n.memoizedState=[t,e],t)},useContext:Zn,useEffect:function(t,e){return hn(516,Re|ze,t,e)},useImperativeHandle:function(t,e,n){return n=null!=n?n.concat([t]):[t],hn(4,De|Ae,pn.bind(null,e,t),n)},useLayoutEffect:function(t,e){return hn(4,De|Ae,t,e)},useMemo:function(t,e){var n=sn();e=void 0===e?null:e;var r=n.memoizedState;return null!==r&&null!==e&&rn(e,r[1])?r[0]:(t=t(),n.memoizedState=[t,e],t)},useReducer:un,useRef:function(){return sn().memoizedState},useState:function(t){return un(cn)},useDebugValue:vn},_n=null,xn=null,wn=!1;function Sn(t,e){var n=Xt(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=e,n.return=t,n.effectTag=8,null!==t.lastEffect?(t.lastEffect.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n}function Cn(t,e){switch(t.tag){case 5:return null!==(e=xt(e,t.type,t.pendingProps))&&(t.stateNode=e,!0);case 6:return null!==(e=wt(e,t.pendingProps))&&(t.stateNode=e,!0);default:return!1}}function Tn(t){if(wn){var e=xn;if(e){var n=e;if(!Cn(t,e)){if(!(e=St(n))||!Cn(t,e))return t.effectTag|=2,wn=!1,void(_n=t);Sn(_n,n)}_n=t,xn=Ct(e)}else t.effectTag|=2,wn=!1,_n=t}}function Fn(t){for(t=t.return;null!==t&&5!==t.tag&&3!==t.tag;)t=t.return;_n=t}function On(t){if(!H||t!==_n)return!1;if(!wn)return Fn(t),wn=!0,!1;var e=t.type;if(5!==t.tag||"head"!==e&&"body"!==e&&!K(e,t.memoizedProps))for(e=xn;e;)Sn(t,e),e=St(e);return Fn(t),xn=_n?St(t.stateNode):null,!0}function Pn(){H&&(xn=_n=null,wn=!1)}var En=l.ReactCurrentOwner,jn=!1;function In(t,e,n,r){e.child=null===t?Se(e,null,n,r):we(e,t.child,n,r)}function kn(t,e,n,r,o){n=n.render;var i=e.ref;return Xn(e,o),r=on(t,e,n,r,i,o),null===t||jn?(e.effectTag|=1,In(t,e,r,o),e.child):(e.updateQueue=t.updateQueue,e.effectTag&=-517,t.expirationTime<=o&&(t.expirationTime=0),Rn(t,e,o))}function Ln(t,e,n,r,o,i){if(null===t){var a=n.type;return"function"!=typeof a||Zt(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((t=Ht(n.type,null,r,null,e.mode,i)).ref=e.ref,t.return=e,e.child=t):(e.tag=15,e.type=a,Mn(t,e,a,r,o,i))}return a=t.child,o<i&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:ce)(o,r)&&t.ref===e.ref)?Rn(t,e,i):(e.effectTag|=1,(t=Jt(a,r)).ref=e.ref,t.return=e,e.child=t)}function Mn(t,e,n,r,o,i){return null!==t&&ce(t.memoizedProps,r)&&t.ref===e.ref&&(jn=!1,o<i)?Rn(t,e,i):Dn(t,e,n,r,i)}function Nn(t,e){var n=e.ref;(null===t&&null!==n||null!==t&&t.ref!==n)&&(e.effectTag|=128)}function Dn(t,e,n,r,o){var i=Ut(n)?Dt:Mt.current;return i=Kt(e,i),Xn(e,o),n=on(t,e,n,r,i,o),null===t||jn?(e.effectTag|=1,In(t,e,n,o),e.child):(e.updateQueue=t.updateQueue,e.effectTag&=-517,t.expirationTime<=o&&(t.expirationTime=0),Rn(t,e,o))}function Kn(t,e,n,r,o){if(Ut(n)){var i=!0;Bt(e)}else i=!1;if(Xn(e,o),null===e.stateNode)null!==t&&(t.alternate=null,e.alternate=null,e.effectTag|=2),ve(e,n,r),ge(e,n,r,o),r=!0;else if(null===t){var a=e.stateNode,l=e.memoizedProps;a.props=l;var s=a.context,c=n.contextType;"object"==typeof c&&null!==c?c=Zn(c):c=Kt(e,c=Ut(n)?Dt:Mt.current);var u=n.getDerivedStateFromProps,d="function"==typeof u||"function"==typeof a.getSnapshotBeforeUpdate;d||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==r||s!==c)&&ye(e,a,r,c),er=!1;var f=e.memoizedState;s=a.state=f;var h=e.updateQueue;null!==h&&(ur(e,h,r,a,o),s=e.memoizedState),l!==r||f!==s||Nt.current||er?("function"==typeof u&&(fe(e,n,u,r),s=e.memoizedState),(l=er||pe(e,n,l,r,f,s,c))?(d||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(e.effectTag|=4)):("function"==typeof a.componentDidMount&&(e.effectTag|=4),e.memoizedProps=r,e.memoizedState=s),a.props=r,a.state=s,a.context=c,r=l):("function"==typeof a.componentDidMount&&(e.effectTag|=4),r=!1)}else a=e.stateNode,l=e.memoizedProps,a.props=e.type===e.elementType?l:ue(e.type,l),s=a.context,"object"==typeof(c=n.contextType)&&null!==c?c=Zn(c):c=Kt(e,c=Ut(n)?Dt:Mt.current),(d="function"==typeof(u=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==r||s!==c)&&ye(e,a,r,c),er=!1,s=e.memoizedState,f=a.state=s,null!==(h=e.updateQueue)&&(ur(e,h,r,a,o),f=e.memoizedState),l!==r||s!==f||Nt.current||er?("function"==typeof u&&(fe(e,n,u,r),f=e.memoizedState),(u=er||pe(e,n,l,r,s,f,c))?(d||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,f,c),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,f,c)),"function"==typeof a.componentDidUpdate&&(e.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(e.effectTag|=256)):("function"!=typeof a.componentDidUpdate||l===t.memoizedProps&&s===t.memoizedState||(e.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===t.memoizedProps&&s===t.memoizedState||(e.effectTag|=256),e.memoizedProps=r,e.memoizedState=f),a.props=r,a.state=f,a.context=c,r=u):("function"!=typeof a.componentDidUpdate||l===t.memoizedProps&&s===t.memoizedState||(e.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===t.memoizedProps&&s===t.memoizedState||(e.effectTag|=256),r=!1);return Un(t,e,n,r,i,o)}function Un(t,e,n,r,o,i){Nn(t,e);var a=0!=(64&e.effectTag);if(!r&&!a)return o&&Gt(e,n,!1),Rn(t,e,i);r=e.stateNode,En.current=e;var l=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return e.effectTag|=1,null!==t&&a?(e.child=we(e,t.child,null,i),e.child=we(e,null,l,i)):In(t,e,l,i),e.memoizedState=r.state,o&&Gt(e,n,!0),e.child}function An(t){var e=t.stateNode;e.pendingContext?Rt(0,e.pendingContext,e.pendingContext!==e.context):e.context&&Rt(0,e.context,!1),Ee(t,e.containerInfo)}function zn(t,e,n){var r=e.mode,o=e.pendingProps,i=e.memoizedState;if(0==(64&e.effectTag)){i=null;var a=!1}else i={timedOutAt:null!==i?i.timedOutAt:0},a=!0,e.effectTag&=-65;if(null===t)if(a){var l=o.fallback;t=qt(null,r,0,null),0==(1&e.mode)&&(t.child=null!==e.memoizedState?e.child.child:e.child),r=qt(l,r,n,null),t.sibling=r,(n=t).return=r.return=e}else n=r=Se(e,null,o.children,n);else null!==t.memoizedState?(l=(r=t.child).sibling,a?(n=o.fallback,o=Jt(r,r.pendingProps),0==(1&e.mode)&&((a=null!==e.memoizedState?e.child.child:e.child)!==r.child&&(o.child=a)),r=o.sibling=Jt(l,n,l.expirationTime),n=o,o.childExpirationTime=0,n.return=r.return=e):n=r=we(e,r.child,o.children,n)):(l=t.child,a?(a=o.fallback,(o=qt(null,r,0,null)).child=l,0==(1&e.mode)&&(o.child=null!==e.memoizedState?e.child.child:e.child),(r=o.sibling=qt(a,r,n,null)).effectTag|=2,n=o,o.childExpirationTime=0,n.return=r.return=e):r=n=we(e,l,o.children,n)),e.stateNode=t.stateNode;return e.memoizedState=i,e.child=n,r}function Rn(t,e,n){if(null!==t&&(e.contextDependencies=t.contextDependencies),e.childExpirationTime<n)return null;if(null!==t&&e.child!==t.child&&a("153"),null!==e.child){for(n=Jt(t=e.child,t.pendingProps,t.expirationTime),e.child=n,n.return=e;null!==t.sibling;)t=t.sibling,(n=n.sibling=Jt(t,t.pendingProps,t.expirationTime)).return=e;n.sibling=null}return e.child}function Wn(t,e,n){var r=e.expirationTime;if(null!==t){if(t.memoizedProps!==e.pendingProps||Nt.current)jn=!0;else if(r<n){switch(jn=!1,e.tag){case 3:An(e),Pn();break;case 5:ke(e);break;case 1:Ut(e.type)&&Bt(e);break;case 4:Ee(e,e.stateNode.containerInfo);break;case 10:$n(e,e.memoizedProps.value);break;case 13:if(null!==e.memoizedState)return 0!==(r=e.child.childExpirationTime)&&r>=n?zn(t,e,n):null!==(e=Rn(t,e,n))?e.sibling:null}return Rn(t,e,n)}}else jn=!1;switch(e.expirationTime=0,e.tag){case 2:r=e.elementType,null!==t&&(t.alternate=null,e.alternate=null,e.effectTag|=2),t=e.pendingProps;var o=Kt(e,Mt.current);if(Xn(e,n),o=on(null,e,r,t,o,n),e.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(e.tag=1,an(),Ut(r)){var i=!0;Bt(e)}else i=!1;e.memoizedState=null!==o.state&&void 0!==o.state?o.state:null;var l=r.getDerivedStateFromProps;"function"==typeof l&&fe(e,r,l,t),o.updater=he,e.stateNode=o,o._reactInternalFiber=e,ge(e,r,t,n),e=Un(null,e,r,!0,i,n)}else e.tag=0,In(null,e,o,n),e=e.child;return e;case 16:switch(o=e.elementType,null!==t&&(t.alternate=null,e.alternate=null,e.effectTag|=2),i=e.pendingProps,t=function(t){var e=t._result;switch(t._status){case 1:return e;case 2:case 0:throw e;default:switch(t._status=0,(e=(e=t._ctor)()).then(function(e){0===t._status&&(e=e.default,t._status=1,t._result=e)},function(e){0===t._status&&(t._status=2,t._result=e)}),t._status){case 1:return t._result;case 2:throw t._result}throw t._result=e,e}}(o),e.type=t,o=e.tag=function(t){if("function"==typeof t)return Zt(t)?1:0;if(null!=t){if((t=t.$$typeof)===g)return 11;if(t===b)return 14}return 2}(t),i=ue(t,i),l=void 0,o){case 0:l=Dn(null,e,t,i,n);break;case 1:l=Kn(null,e,t,i,n);break;case 11:l=kn(null,e,t,i,n);break;case 14:l=Ln(null,e,t,ue(t.type,i),r,n);break;default:a("306",t,"")}return l;case 0:return r=e.type,o=e.pendingProps,Dn(t,e,r,o=e.elementType===r?o:ue(r,o),n);case 1:return r=e.type,o=e.pendingProps,Kn(t,e,r,o=e.elementType===r?o:ue(r,o),n);case 3:return An(e),null===(r=e.updateQueue)&&a("282"),o=null!==(o=e.memoizedState)?o.element:null,ur(e,r,e.pendingProps,null,n),(r=e.memoizedState.element)===o?(Pn(),e=Rn(t,e,n)):(o=e.stateNode,(o=(null===t||null===t.child)&&o.hydrate)&&(H?(xn=Ct(e.stateNode.containerInfo),_n=e,o=wn=!0):o=!1),o?(e.effectTag|=2,e.child=Se(e,null,r,n)):(In(t,e,r,n),Pn()),e=e.child),e;case 5:return ke(e),null===t&&Tn(e),r=e.type,o=e.pendingProps,i=null!==t?t.memoizedProps:null,l=o.children,K(r,o)?l=null:null!==i&&K(r,i)&&(e.effectTag|=16),Nn(t,e),1!==n&&1&e.mode&&U(r,o)?(e.expirationTime=e.childExpirationTime=1,e=null):(In(t,e,l,n),e=e.child),e;case 6:return null===t&&Tn(e),null;case 13:return zn(t,e,n);case 4:return Ee(e,e.stateNode.containerInfo),r=e.pendingProps,null===t?e.child=we(e,null,r,n):In(t,e,r,n),e.child;case 11:return r=e.type,o=e.pendingProps,kn(t,e,r,o=e.elementType===r?o:ue(r,o),n);case 7:return In(t,e,e.pendingProps,n),e.child;case 8:case 12:return In(t,e,e.pendingProps.children,n),e.child;case 10:t:{if(r=e.type._context,o=e.pendingProps,l=e.memoizedProps,$n(e,i=o.value),null!==l){var s=l.value;if(0===(i=le(s,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(s,i):1073741823))){if(l.children===o.children&&!Nt.current){e=Rn(t,e,n);break t}}else for(null!==(s=e.child)&&(s.return=e);null!==s;){var c=s.contextDependencies;if(null!==c){l=s.child;for(var u=c.first;null!==u;){if(u.context===r&&0!=(u.observedBits&i)){1===s.tag&&((u=or(n)).tag=qn,ar(s,u)),s.expirationTime<n&&(s.expirationTime=n),null!==(u=s.alternate)&&u.expirationTime<n&&(u.expirationTime=n);for(var d=s.return;null!==d;){if(u=d.alternate,d.childExpirationTime<n)d.childExpirationTime=n,null!==u&&u.childExpirationTime<n&&(u.childExpirationTime=n);else{if(!(null!==u&&u.childExpirationTime<n))break;u.childExpirationTime=n}d=d.return}c.expirationTime<n&&(c.expirationTime=n);break}u=u.next}}else l=10===s.tag&&s.type===e.type?null:s.child;if(null!==l)l.return=s;else for(l=s;null!==l;){if(l===e){l=null;break}if(null!==(s=l.sibling)){s.return=l.return,l=s;break}l=l.return}s=l}}In(t,e,o.children,n),e=e.child}return e;case 9:return o=e.type,r=(i=e.pendingProps).children,Xn(e,n),r=r(o=Zn(o,i.unstable_observedBits)),e.effectTag|=1,In(t,e,r,n),e.child;case 14:return i=ue(o=e.type,e.pendingProps),Ln(t,e,o,i=ue(o.type,i),r,n);case 15:return Mn(t,e,e.type,e.pendingProps,r,n);case 17:return r=e.type,o=e.pendingProps,o=e.elementType===r?o:ue(r,o),null!==t&&(t.alternate=null,e.alternate=null,e.effectTag|=2),e.tag=1,Ut(r)?(t=!0,Bt(e)):t=!1,Xn(e,n),ve(e,r,o),ge(e,r,o,n),Un(null,e,r,!0,t,n);default:a("156")}}var Bn={current:null},Gn=null,Vn=null,Yn=null;function $n(t,e){var n=t.type._context;X?(kt(Bn,n._currentValue),n._currentValue=e):(kt(Bn,n._currentValue2),n._currentValue2=e)}function Qn(t){var e=Bn.current;It(Bn),t=t.type._context,X?t._currentValue=e:t._currentValue2=e}function Xn(t,e){Gn=t,Yn=Vn=null;var n=t.contextDependencies;null!==n&&n.expirationTime>=e&&(jn=!0),t.contextDependencies=null}function Zn(t,e){return Yn!==t&&!1!==e&&0!==e&&("number"==typeof e&&1073741823!==e||(Yn=t,e=1073741823),e={context:t,observedBits:e,next:null},null===Vn?(null===Gn&&a("308"),Vn=e,Gn.contextDependencies={first:e,expirationTime:0}):Vn=Vn.next=e),X?t._currentValue:t._currentValue2}var Jn=0,Hn=1,qn=2,tr=3,er=!1;function nr(t){return{baseState:t,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function rr(t){return{baseState:t.baseState,firstUpdate:t.firstUpdate,lastUpdate:t.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function or(t){return{expirationTime:t,tag:Jn,payload:null,callback:null,next:null,nextEffect:null}}function ir(t,e){null===t.lastUpdate?t.firstUpdate=t.lastUpdate=e:(t.lastUpdate.next=e,t.lastUpdate=e)}function ar(t,e){var n=t.alternate;if(null===n){var r=t.updateQueue,o=null;null===r&&(r=t.updateQueue=nr(t.memoizedState))}else r=t.updateQueue,o=n.updateQueue,null===r?null===o?(r=t.updateQueue=nr(t.memoizedState),o=n.updateQueue=nr(n.memoizedState)):r=t.updateQueue=rr(o):null===o&&(o=n.updateQueue=rr(r));null===o||r===o?ir(r,e):null===r.lastUpdate||null===o.lastUpdate?(ir(r,e),ir(o,e)):(ir(r,e),o.lastUpdate=e)}function lr(t,e){var n=t.updateQueue;null===(n=null===n?t.updateQueue=nr(t.memoizedState):sr(t,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=e:(n.lastCapturedUpdate.next=e,n.lastCapturedUpdate=e)}function sr(t,e){var n=t.alternate;return null!==n&&e===n.updateQueue&&(e=t.updateQueue=rr(e)),e}function cr(t,e,n,r,i,a){switch(n.tag){case Hn:return"function"==typeof(t=n.payload)?t.call(a,r,i):t;case tr:t.effectTag=-2049&t.effectTag|64;case Jn:if(null==(i="function"==typeof(t=n.payload)?t.call(a,r,i):t))break;return o({},r,i);case qn:er=!0}return r}function ur(t,e,n,r,o){er=!1;for(var i=(e=sr(t,e)).baseState,a=null,l=0,s=e.firstUpdate,c=i;null!==s;){var u=s.expirationTime;u<o?(null===a&&(a=s,i=c),l<u&&(l=u)):(c=cr(t,0,s,c,n,r),null!==s.callback&&(t.effectTag|=32,s.nextEffect=null,null===e.lastEffect?e.firstEffect=e.lastEffect=s:(e.lastEffect.nextEffect=s,e.lastEffect=s))),s=s.next}for(u=null,s=e.firstCapturedUpdate;null!==s;){var d=s.expirationTime;d<o?(null===u&&(u=s,null===a&&(i=c)),l<d&&(l=d)):(c=cr(t,0,s,c,n,r),null!==s.callback&&(t.effectTag|=32,s.nextEffect=null,null===e.lastCapturedEffect?e.firstCapturedEffect=e.lastCapturedEffect=s:(e.lastCapturedEffect.nextEffect=s,e.lastCapturedEffect=s))),s=s.next}null===a&&(e.lastUpdate=null),null===u?e.lastCapturedUpdate=null:t.effectTag|=32,null===a&&null===u&&(i=c),e.baseState=i,e.firstUpdate=a,e.firstCapturedUpdate=u,t.expirationTime=l,t.memoizedState=c}function dr(t,e,n){null!==e.firstCapturedUpdate&&(null!==e.lastUpdate&&(e.lastUpdate.next=e.firstCapturedUpdate,e.lastUpdate=e.lastCapturedUpdate),e.firstCapturedUpdate=e.lastCapturedUpdate=null),fr(e.firstEffect,n),e.firstEffect=e.lastEffect=null,fr(e.firstCapturedEffect,n),e.firstCapturedEffect=e.lastCapturedEffect=null}function fr(t,e){for(;null!==t;){var n=t.callback;if(null!==n){t.callback=null;var r=e;"function"!=typeof n&&a("191",n),n.call(r)}t=t.nextEffect}}function hr(t,e){return{value:t,source:e,stack:Pt(e)}}function pr(t){t.effectTag|=4}var vr=void 0,yr=void 0,gr=void 0,mr=void 0;if(Z)vr=function(t,e){for(var n=e.child;null!==n;){if(5===n.tag||6===n.tag)M(t,n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},yr=function(){},gr=function(t,e,n,r,o){if((t=t.memoizedProps)!==r){var i=e.stateNode,a=Ie();n=D(i,n,t,r,o,a),(e.updateQueue=n)&&pr(e)}},mr=function(t,e,n,r){n!==r&&pr(e)};else if(J){vr=function(t,e,n,r){for(var o=e.child;null!==o;){t:if(5===o.tag){var i=o.stateNode;if(n){var a=o.memoizedProps,l=o.type;i=r?mt(i,l,a,o):bt(i,l,a,o),o.stateNode=i}M(t,i)}else if(6===o.tag)i=o.stateNode,n&&(i=o.memoizedProps,a=Pe(Oe.current),l=Ie(),i=r?_t(i,a,l,e):A(i,a,l,e),o.stateNode=i),M(t,i);else if(4!==o.tag){if(13===o.tag&&(null!==(a=o.alternate)&&(i=null!==o.memoizedState,null!==a.memoizedState!==i))){null!==(a=i?o.child:o)&&vr(t,a,!0,i);break t}if(null!==o.child){o.child.return=o,o=o.child;continue}}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}};var br=function(t,e,n,r){for(var o=e.child;null!==o;){t:if(5===o.tag){var i=o.stateNode;if(n){var a=o.memoizedProps,l=o.type;i=r?mt(i,l,a,o):bt(i,l,a,o),o.stateNode=i}vt(t,i)}else if(6===o.tag)i=o.stateNode,n&&(i=o.memoizedProps,a=Pe(Oe.current),l=Ie(),i=r?_t(i,a,l,e):A(i,a,l,e),o.stateNode=i),vt(t,i);else if(4!==o.tag){if(13===o.tag&&(null!==(a=o.alternate)&&(i=null!==o.memoizedState,null!==a.memoizedState!==i))){null!==(a=i?o.child:o)&&br(t,a,!0,i);break t}if(null!==o.child){o.child.return=o,o=o.child;continue}}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}};yr=function(t){var e=t.stateNode;if(null!==t.firstEffect){var n=e.containerInfo,r=pt(n);br(r,t,!1,!1),e.pendingChildren=r,pr(t),yt(n,r)}},gr=function(t,e,n,r,o){var i=t.stateNode,a=t.memoizedProps;if((t=null===e.firstEffect)&&a===r)e.stateNode=i;else{var l=e.stateNode,s=Ie(),c=null;a!==r&&(c=D(l,n,a,r,o,s)),t&&null===c?e.stateNode=i:(i=ht(i,c,n,a,r,e,t,l),N(i,n,r,o,s)&&pr(e),e.stateNode=i,t?pr(e):vr(i,e,!1,!1))}},mr=function(t,e,n,r){n!==r&&(t=Pe(Oe.current),n=Ie(),e.stateNode=A(r,t,n,e),pr(e))}}else yr=function(){},gr=function(){},mr=function(){};var _r="function"==typeof WeakSet?WeakSet:Set;function xr(t,e){var n=e.source,r=e.stack;null===r&&null!==n&&(r=Pt(n)),null!==n&&S(n.type),e=e.value,null!==t&&1===t.tag&&S(t.type);try{console.error(e)}catch(t){setTimeout(function(){throw t})}}function wr(t){var e=t.ref;if(null!==e)if("function"==typeof e)try{e(null)}catch(e){eo(t,e)}else e.current=null}function Sr(t,e,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var r=n=n.next;do{if((r.tag&t)!==Me){var o=r.destroy;r.destroy=void 0,void 0!==o&&o()}(r.tag&e)!==Me&&(o=r.create,r.destroy=o()),r=r.next}while(r!==n)}}function Cr(t){switch("function"==typeof Yt&&Yt(t),t.tag){case 0:case 11:case 14:case 15:var e=t.updateQueue;if(null!==e&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n.destroy;if(void 0!==r){var o=t;try{r()}catch(t){eo(o,t)}}n=n.next}while(n!==e)}break;case 1:if(wr(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){eo(t,e)}break;case 5:wr(t);break;case 4:Z?Pr(t):J&&J&&(t=t.stateNode.containerInfo,e=pt(t),gt(t,e))}}function Tr(t){for(var e=t;;)if(Cr(e),null===e.child||Z&&4===e.tag){if(e===t)break;for(;null===e.sibling;){if(null===e.return||e.return===t)return;e=e.return}e.sibling.return=e.return,e=e.sibling}else e.child.return=e,e=e.child}function Fr(t){return 5===t.tag||3===t.tag||4===t.tag}function Or(t){if(Z){t:{for(var e=t.return;null!==e;){if(Fr(e)){var n=e;break t}e=e.return}a("160"),n=void 0}var r=e=void 0;switch(n.tag){case 5:e=n.stateNode,r=!1;break;case 3:case 4:e=n.stateNode.containerInfo,r=!0;break;default:a("161")}16&n.effectTag&&(st(e),n.effectTag&=-17);t:e:for(n=t;;){for(;null===n.sibling;){if(null===n.return||Fr(n.return)){n=null;break t}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag;){if(2&n.effectTag)continue e;if(null===n.child||4===n.tag)continue e;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break t}}for(var o=t;;){if(5===o.tag||6===o.tag)n?r?it(e,o.stateNode,n):ot(e,o.stateNode,n):r?tt(e,o.stateNode):q(e,o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;o=o.return}o.sibling.return=o.return,o=o.sibling}}}function Pr(t){for(var e=t,n=!1,r=void 0,o=void 0;;){if(!n){n=e.return;t:for(;;){switch(null===n&&a("160"),n.tag){case 5:r=n.stateNode,o=!1;break t;case 3:case 4:r=n.stateNode.containerInfo,o=!0;break t}n=n.return}n=!0}if(5===e.tag||6===e.tag)Tr(e),o?lt(r,e.stateNode):at(r,e.stateNode);else if(4===e.tag?(r=e.stateNode.containerInfo,o=!0):Cr(e),null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break;for(;null===e.sibling;){if(null===e.return||e.return===t)return;4===(e=e.return).tag&&(n=!1)}e.sibling.return=e.return,e=e.sibling}}function Er(t,e){if(Z)switch(e.tag){case 0:case 11:case 14:case 15:Sr(De,Ke,e);break;case 1:break;case 5:var n=e.stateNode;if(null!=n){var r=e.memoizedProps;t=null!==t?t.memoizedProps:r;var o=e.type,i=e.updateQueue;e.updateQueue=null,null!==i&&rt(n,i,o,t,r,e)}break;case 6:null===e.stateNode&&a("162"),n=e.memoizedProps,et(e.stateNode,null!==t?t.memoizedProps:n,n);break;case 3:case 12:break;case 13:if(n=e.memoizedState,r=void 0,t=e,null===n?r=!1:(r=!0,t=e.child,0===n.timedOutAt&&(n.timedOutAt=Io())),null!==t&&function(t,e){if(Z)for(var n=t;;){if(5===n.tag){var r=n.stateNode;e?ct(r):dt(n.stateNode,n.memoizedProps)}else if(6===n.tag)r=n.stateNode,e?ut(r):ft(r,n.memoizedProps);else{if(13===n.tag&&null!==n.memoizedState){(r=n.child.sibling).return=n,n=r;continue}if(null!==n.child){n.child.return=n,n=n.child;continue}}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}(t,r),null!==(n=e.updateQueue)){e.updateQueue=null;var l=e.stateNode;null===l&&(l=e.stateNode=new _r),n.forEach(function(t){var n=function(t,e){var n=t.stateNode;null!==n&&n.delete(e),e=no(e=Io(),t),null!==(t=oo(t,e))&&(re(t,e),0!==(e=t.expirationTime)&&ko(t,e))}.bind(null,e,t);l.has(t)||(l.add(t),t.then(n,n))})}break;case 17:break;default:a("163")}else{switch(e.tag){case 0:case 11:case 14:case 15:return void Sr(De,Ke,e)}!function(t){if(J)switch(t.tag){case 1:case 5:case 6:break;case 3:case 4:t=t.stateNode,gt(t.containerInfo,t.pendingChildren);break;default:a("163")}}(e)}}var jr="function"==typeof WeakMap?WeakMap:Map;function Ir(t,e,n){(n=or(n)).tag=tr,n.payload={element:null};var r=e.value;return n.callback=function(){Ro(r),xr(t,e)},n}function kr(t,e,n){(n=or(n)).tag=tr;var r=t.type.getDerivedStateFromError;if("function"==typeof r){var o=e.value;n.payload=function(){return r(o)}}var i=t.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Xr?Xr=new Set([this]):Xr.add(this));var n=e.value,o=e.stack;xr(t,e),this.componentDidCatch(n,{componentStack:null!==o?o:""})}),n}function Lr(t){switch(t.tag){case 1:Ut(t.type)&&At();var e=t.effectTag;return 2048&e?(t.effectTag=-2049&e|64,t):null;case 3:return je(),zt(),0!=(64&(e=t.effectTag))&&a("285"),t.effectTag=-2049&e|64,t;case 5:return Le(t),null;case 13:return 2048&(e=t.effectTag)?(t.effectTag=-2049&e|64,t):null;case 4:return je(),null;case 10:return Qn(t),null;default:return null}}var Mr=l.ReactCurrentDispatcher,Nr=l.ReactCurrentOwner,Dr=1073741822,Kr=0,Ur=!1,Ar=null,zr=null,Rr=0,Wr=-1,Br=!1,Gr=null,Vr=!1,Yr=null,$r=null,Qr=null,Xr=null;function Zr(){if(null!==Ar)for(var t=Ar.return;null!==t;){var e=t;switch(e.tag){case 1:var n=e.type.childContextTypes;null!=n&&At();break;case 3:je(),zt();break;case 5:Le(e);break;case 4:je();break;case 10:Qn(e)}t=t.return}zr=null,Rr=0,Wr=-1,Br=!1,Ar=null}function Jr(){null!==$r&&$($r),null!==Qr&&Qr()}function Hr(t){for(;;){var e=t.alternate,n=t.return,r=t.sibling;if(0==(1024&t.effectTag)){Ar=t;t:{var o=e,i=Rr,l=(e=t).pendingProps;switch(e.tag){case 2:case 16:break;case 15:case 0:break;case 1:Ut(e.type)&&At();break;case 3:je(),zt(),(l=e.stateNode).pendingContext&&(l.context=l.pendingContext,l.pendingContext=null),null!==o&&null!==o.child||(On(e),e.effectTag&=-3),yr(e);break;case 5:Le(e),i=Pe(Oe.current);var s=e.type;if(null!==o&&null!=e.stateNode)gr(o,e,s,l,i),o.ref!==e.ref&&(e.effectTag|=128);else if(l){if(o=Ie(),On(e))l=e,H||a("175"),o=Tt(l.stateNode,l.type,l.memoizedProps,i,o,l),l.updateQueue=o,(o=null!==o)&&pr(e);else{var c=L(s,l,i,o,e);vr(c,e,!1,!1),N(c,s,l,i,o)&&pr(e),e.stateNode=c}null!==e.ref&&(e.effectTag|=128)}else null===e.stateNode&&a("166");break;case 6:o&&null!=e.stateNode?mr(o,e,o.memoizedProps,l):("string"!=typeof l&&(null===e.stateNode&&a("166")),o=Pe(Oe.current),i=Ie(),On(e)?(o=e,H||a("176"),(o=Ft(o.stateNode,o.memoizedProps,o))&&pr(e)):e.stateNode=A(l,o,i,e));break;case 11:break;case 13:if(l=e.memoizedState,0!=(64&e.effectTag)){e.expirationTime=i,Ar=e;break t}l=null!==l,i=null!==o&&null!==o.memoizedState,null!==o&&!l&&i&&(null!==(o=o.child.sibling)&&(null!==(s=e.firstEffect)?(e.firstEffect=o,o.nextEffect=s):(e.firstEffect=e.lastEffect=o,o.nextEffect=null),o.effectTag=8)),(l||i)&&(e.effectTag|=4);break;case 7:case 8:case 12:break;case 4:je(),yr(e);break;case 10:Qn(e);break;case 9:case 14:break;case 17:Ut(e.type)&&At();break;default:a("156")}Ar=null}if(e=t,1===Rr||1!==e.childExpirationTime){for(o=0,l=e.child;null!==l;)(i=l.expirationTime)>o&&(o=i),(s=l.childExpirationTime)>o&&(o=s),l=l.sibling;e.childExpirationTime=o}if(null!==Ar)return Ar;null!==n&&0==(1024&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=t.firstEffect),n.lastEffect=t.lastEffect),1<t.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=t:n.firstEffect=t,n.lastEffect=t))}else{if(null!==(t=Lr(t)))return t.effectTag&=1023,t;null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=1024)}if(null!==r)return r;if(null===n)break;t=n}return null}function qr(t){var e=Wn(t.alternate,t,Rr);return t.memoizedProps=t.pendingProps,null===e&&(e=Hr(t)),Nr.current=null,e}function to(t,e){Ur&&a("243"),Jr(),Ur=!0;var n=Mr.current;Mr.current=gn;var r=t.nextExpirationTimeToWorkOn;r===Rr&&t===zr&&null!==Ar||(Zr(),Rr=r,Ar=Jt((zr=t).current,null),t.pendingCommitExpirationTime=0);for(var o=!1;;){try{if(e)for(;null!==Ar&&!No();)Ar=qr(Ar);else for(;null!==Ar;)Ar=qr(Ar)}catch(e){if(Yn=Vn=Gn=null,an(),null===Ar)o=!0,Ro(e);else{null===Ar&&a("271");var i=Ar,l=i.return;if(null!==l){t:{var s=t,c=l,u=i,d=e;if(l=Rr,u.effectTag|=1024,u.firstEffect=u.lastEffect=null,null!==d&&"object"==typeof d&&"function"==typeof d.then){var f=d;d=c;var h=-1,p=-1;do{if(13===d.tag){var v=d.alternate;if(null!==v&&null!==(v=v.memoizedState)){p=10*(1073741822-v.timedOutAt);break}"number"==typeof(v=d.pendingProps.maxDuration)&&(0>=v?h=0:(-1===h||v<h)&&(h=v))}d=d.return}while(null!==d);d=c;do{if((v=13===d.tag)&&(v=void 0!==d.memoizedProps.fallback&&null===d.memoizedState),v){if(null===(c=d.updateQueue)?((c=new Set).add(f),d.updateQueue=c):c.add(f),0==(1&d.mode)){d.effectTag|=64,u.effectTag&=-1957,1===u.tag&&(null===u.alternate?u.tag=17:((l=or(1073741823)).tag=qn,ar(u,l))),u.expirationTime=1073741823;break t}null===(u=s.pingCache)?(u=s.pingCache=new jr,c=new Set,u.set(f,c)):void 0===(c=u.get(f))&&(c=new Set,u.set(f,c)),c.has(l)||(c.add(l),u=ro.bind(null,s,f,l),f.then(u,u)),-1===h?s=1073741823:(-1===p&&(p=10*(1073741822-ie(s,l))-5e3),s=p+h),0<=s&&Wr<s&&(Wr=s),d.effectTag|=2048,d.expirationTime=l;break t}d=d.return}while(null!==d);d=Error((S(u.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+Pt(u))}Br=!0,d=hr(d,u),s=c;do{switch(s.tag){case 3:s.effectTag|=2048,s.expirationTime=l,lr(s,l=Ir(s,d,l));break t;case 1:if(f=d,h=s.type,p=s.stateNode,0==(64&s.effectTag)&&("function"==typeof h.getDerivedStateFromError||null!==p&&"function"==typeof p.componentDidCatch&&(null===Xr||!Xr.has(p)))){s.effectTag|=2048,s.expirationTime=l,lr(s,l=kr(s,f,l));break t}}s=s.return}while(null!==s)}Ar=Hr(i);continue}o=!0,Ro(e)}}break}if(Ur=!1,Mr.current=n,Yn=Vn=Gn=null,an(),o)zr=null,t.finishedWork=null;else if(null!==Ar)t.finishedWork=null;else{if(null===(n=t.current.alternate)&&a("281"),zr=null,Br){if(o=t.latestPendingTime,i=t.latestSuspendedTime,l=t.latestPingedTime,0!==o&&o<r||0!==i&&i<r||0!==l&&l<r)return oe(t,r),void jo(t,n,r,t.expirationTime,-1);if(!t.didError&&e)return t.didError=!0,r=t.nextExpirationTimeToWorkOn=r,e=t.expirationTime=1073741823,void jo(t,n,r,e,-1)}e&&-1!==Wr?(oe(t,r),(e=10*(1073741822-ie(t,r)))<Wr&&(Wr=e),e=10*(1073741822-Io()),e=Wr-e,jo(t,n,r,t.expirationTime,0>e?0:e)):(t.pendingCommitExpirationTime=r,t.finishedWork=n)}}function eo(t,e){for(var n=t.return;null!==n;){switch(n.tag){case 1:var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Xr||!Xr.has(r)))return ar(n,t=kr(n,t=hr(e,t),1073741823)),void io(n,1073741823);break;case 3:return ar(n,t=Ir(n,t=hr(e,t),1073741823)),void io(n,1073741823)}n=n.return}3===t.tag&&(ar(t,n=Ir(t,n=hr(e,t),1073741823)),io(t,1073741823))}function no(t,e){return 0!==Kr?t=Kr:Ur?t=Vr?1073741823:Rr:1&e.mode?(t=_o?1073741822-10*(1+((1073741822-t+15)/10|0)):1073741822-25*(1+((1073741822-t+500)/25|0)),null!==zr&&t===Rr&&--t):t=1073741823,_o&&(0===vo||t<vo)&&(vo=t),t}function ro(t,e,n){var r=t.pingCache;null!==r&&r.delete(e),null!==zr&&Rr===n?zr=null:(e=t.earliestSuspendedTime,r=t.latestSuspendedTime,0!==e&&n<=e&&n>=r&&(t.didError=!1,(0===(e=t.latestPingedTime)||e>n)&&(t.latestPingedTime=n),ae(n,t),0!==(n=t.expirationTime)&&ko(t,n)))}function oo(t,e){t.expirationTime<e&&(t.expirationTime=e);var n=t.alternate;null!==n&&n.expirationTime<e&&(n.expirationTime=e);var r=t.return,o=null;if(null===r&&3===t.tag)o=t.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<e&&(r.childExpirationTime=e),null!==n&&n.childExpirationTime<e&&(n.childExpirationTime=e),null===r.return&&3===r.tag){o=r.stateNode;break}r=r.return}return o}function io(t,e){null!==(t=oo(t,e))&&(!Ur&&0!==Rr&&e>Rr&&Zr(),re(t,e),Ur&&!Vr&&zr===t||ko(t,t.expirationTime),Fo>To&&(Fo=0,a("185")))}function ao(t,e,n,r,o){var i=Kr;Kr=1073741823;try{return t(e,n,r,o)}finally{Kr=i}}var lo=null,so=null,co=0,uo=void 0,fo=!1,ho=null,po=0,vo=0,yo=!1,go=null,mo=!1,bo=!1,_o=!1,xo=null,wo=Q(),So=1073741822-(wo/10|0),Co=So,To=50,Fo=0,Oo=null;function Po(){So=1073741822-((Q()-wo)/10|0)}function Eo(t,e){if(0!==co){if(e<co)return;null!==uo&&R(uo)}co=e,t=Q()-wo,uo=z(Do,{timeout:10*(1073741822-e)-t})}function jo(t,e,n,r,o){t.expirationTime=r,0!==o||No()?0<o&&(t.timeoutHandle=B(function(t,e,n){t.pendingCommitExpirationTime=n,t.finishedWork=e,Po(),Co=So,Uo(t,n)}.bind(null,t,e,n),o)):(t.pendingCommitExpirationTime=n,t.finishedWork=e)}function Io(){return fo?Co:(Lo(),0!==po&&1!==po||(Po(),Co=So),Co)}function ko(t,e){null===t.nextScheduledRoot?(t.expirationTime=e,null===so?(lo=so=t,t.nextScheduledRoot=t):(so=so.nextScheduledRoot=t).nextScheduledRoot=lo):e>t.expirationTime&&(t.expirationTime=e),fo||(mo?bo&&(ho=t,po=1073741823,Ao(t,1073741823,!1)):1073741823===e?Ko(1073741823,!1):Eo(t,e))}function Lo(){var t=0,e=null;if(null!==so)for(var n=so,r=lo;null!==r;){var o=r.expirationTime;if(0===o){if((null===n||null===so)&&a("244"),r===r.nextScheduledRoot){lo=so=r.nextScheduledRoot=null;break}if(r===lo)lo=o=r.nextScheduledRoot,so.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===so){(so=n).nextScheduledRoot=lo,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if(o>t&&(t=o,e=r),r===so)break;if(1073741823===t)break;n=r,r=r.nextScheduledRoot}}ho=e,po=t}var Mo=!1;function No(){return!!Mo||!!W()&&(Mo=!0)}function Do(){try{if(!No()&&null!==lo){Po();var t=lo;do{var e=t.expirationTime;0!==e&&So<=e&&(t.nextExpirationTimeToWorkOn=So),t=t.nextScheduledRoot}while(t!==lo)}Ko(0,!0)}finally{Mo=!1}}function Ko(t,e){if(Lo(),e)for(Po(),Co=So;null!==ho&&0!==po&&t<=po&&!(Mo&&So>po);)Ao(ho,po,So>po),Lo(),Po(),Co=So;else for(;null!==ho&&0!==po&&t<=po;)Ao(ho,po,!1),Lo();if(e&&(co=0,uo=null),0!==po&&Eo(ho,po),Fo=0,Oo=null,null!==xo)for(t=xo,xo=null,e=0;e<t.length;e++){var n=t[e];try{n._onComplete()}catch(t){yo||(yo=!0,go=t)}}if(yo)throw t=go,go=null,yo=!1,t}function Uo(t,e){fo&&a("253"),ho=t,po=e,Ao(t,e,!1),Ko(1073741823,!1)}function Ao(t,e,n){if(fo&&a("245"),fo=!0,n){var r=t.finishedWork;null!==r?zo(t,r,e):(t.finishedWork=null,(r=t.timeoutHandle)!==V&&(t.timeoutHandle=V,G(r)),to(t,n),null!==(r=t.finishedWork)&&(No()?t.finishedWork=r:zo(t,r,e)))}else null!==(r=t.finishedWork)?zo(t,r,e):(t.finishedWork=null,(r=t.timeoutHandle)!==V&&(t.timeoutHandle=V,G(r)),to(t,n),null!==(r=t.finishedWork)&&zo(t,r,e));fo=!1}function zo(t,e,n){var r=t.firstBatch;if(null!==r&&r._expirationTime>=n&&(null===xo?xo=[r]:xo.push(r),r._defer))return t.finishedWork=e,void(t.expirationTime=0);t.finishedWork=null,t===Oo?Fo++:(Oo=t,Fo=0),Vr=Ur=!0,t.current===e&&a("177"),0===(n=t.pendingCommitExpirationTime)&&a("261"),t.pendingCommitExpirationTime=0,r=e.expirationTime;var o=e.childExpirationTime;for(r=o>r?o:r,t.didError=!1,0===r?(t.earliestPendingTime=0,t.latestPendingTime=0,t.earliestSuspendedTime=0,t.latestSuspendedTime=0,t.latestPingedTime=0):(r<t.latestPingedTime&&(t.latestPingedTime=0),0!==(o=t.latestPendingTime)&&(o>r?t.earliestPendingTime=t.latestPendingTime=0:t.earliestPendingTime>r&&(t.earliestPendingTime=t.latestPendingTime)),0===(o=t.earliestSuspendedTime)?re(t,r):r<t.latestSuspendedTime?(t.earliestSuspendedTime=0,t.latestSuspendedTime=0,t.latestPingedTime=0,re(t,r)):r>o&&re(t,r)),ae(0,t),Nr.current=null,1<e.effectTag?null!==e.lastEffect?(e.lastEffect.nextEffect=e,r=e.firstEffect):r=e:r=e.firstEffect,I(t.containerInfo),Gr=r;null!==Gr;){o=!1;var i=void 0;try{for(;null!==Gr;){if(256&Gr.effectTag)t:{var l=Gr.alternate,s=Gr;switch(s.tag){case 0:case 11:case 15:Sr(Ne,Me,s);break t;case 1:if(256&s.effectTag&&null!==l){var c=l.memoizedProps,u=l.memoizedState,d=s.stateNode,f=d.getSnapshotBeforeUpdate(s.elementType===s.type?c:ue(s.type,c),u);d.__reactInternalSnapshotBeforeUpdate=f}break t;case 3:case 5:case 6:case 4:case 17:break t;default:a("163")}}Gr=Gr.nextEffect}}catch(t){o=!0,i=t}o&&(null===Gr&&a("178"),eo(Gr,i),null!==Gr&&(Gr=Gr.nextEffect))}for(Gr=r;null!==Gr;){l=!1,c=void 0;try{for(;null!==Gr;){var h=Gr.effectTag;if(16&h&&Z&&st(Gr.stateNode),128&h){var p=Gr.alternate;if(null!==p){var v=p.ref;null!==v&&("function"==typeof v?v(null):v.current=null)}}switch(14&h){case 2:Or(Gr),Gr.effectTag&=-3;break;case 6:Or(Gr),Gr.effectTag&=-3,Er(Gr.alternate,Gr);break;case 4:Er(Gr.alternate,Gr);break;case 8:u=Gr,Z?Pr(u):Tr(u),u.return=null,u.child=null,u.memoizedState=null,u.updateQueue=null;var y=u.alternate;null!==y&&(y.return=null,y.child=null,y.memoizedState=null,y.updateQueue=null)}Gr=Gr.nextEffect}}catch(t){l=!0,c=t}l&&(null===Gr&&a("178"),eo(Gr,c),null!==Gr&&(Gr=Gr.nextEffect))}for(k(t.containerInfo),t.current=e,Gr=r;null!==Gr;){h=!1,p=void 0;try{for(v=t,y=n;null!==Gr;){var g=Gr.effectTag;if(36&g){var m=Gr.alternate;switch(c=y,(l=Gr).tag){case 0:case 11:case 15:Sr(Ue,Ae,l);break;case 1:var b=l.stateNode;if(4&l.effectTag)if(null===m)b.componentDidMount();else{var _=l.elementType===l.type?m.memoizedProps:ue(l.type,m.memoizedProps);b.componentDidUpdate(_,m.memoizedState,b.__reactInternalSnapshotBeforeUpdate)}var x=l.updateQueue;null!==x&&dr(0,x,b);break;case 3:var w=l.updateQueue;if(null!==w){if(u=null,null!==l.child)switch(l.child.tag){case 5:u=P(l.child.stateNode);break;case 1:u=l.child.stateNode}dr(0,w,u)}break;case 5:var S=l.stateNode;null===m&&4&l.effectTag&&nt(S,l.type,l.memoizedProps,l);break;case 6:case 4:case 12:case 13:case 17:break;default:a("163")}}if(128&g){var C=Gr.ref;if(null!==C){var T=Gr.stateNode;switch(Gr.tag){case 5:var F=P(T);break;default:F=T}"function"==typeof C?C(F):C.current=F}}512&g&&(Yr=v),Gr=Gr.nextEffect}}catch(t){h=!0,p=t}h&&(null===Gr&&a("178"),eo(Gr,p),null!==Gr&&(Gr=Gr.nextEffect))}null!==r&&null!==Yr&&(g=function(t,e){Qr=$r=Yr=null;var n=fo;fo=!0;do{if(512&e.effectTag){var r=!1,o=void 0;try{var i=e;Sr(Re,Me,i),Sr(Me,ze,i)}catch(t){r=!0,o=t}r&&eo(e,o)}e=e.nextEffect}while(null!==e);fo=n,0!==(n=t.expirationTime)&&ko(t,n)}.bind(null,t,r),$r=Y(g),Qr=g),Ur=Vr=!1,"function"==typeof Vt&&Vt(e.stateNode),g=e.expirationTime,0===(e=(e=e.childExpirationTime)>g?e:g)&&(Xr=null),t.expirationTime=e,t.finishedWork=null}function Ro(t){null===ho&&a("246"),ho.expirationTime=0,yo||(yo=!0,go=t)}function Wo(t,e,n,r,o){var i=e.current;t:if(n){e:{2===C(n=n._reactInternalFiber)&&1===n.tag||a("170");var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break e;case 1:if(Ut(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break e}}l=l.return}while(null!==l);a("171"),l=void 0}if(1===n.tag){var s=n.type;if(Ut(s)){n=Wt(n,s,l);break t}}n=l}else n=Lt;return null===e.context?e.context=n:e.pendingContext=n,e=o,(o=or(r)).payload={element:t},null!==(e=void 0===e?null:e)&&(o.callback=e),Jr(),ar(i,o),io(i,r),r}function Bo(t){var e=t._reactInternalFiber;return void 0===e&&("function"==typeof t.render?a("188"):a("268",Object.keys(t))),null===(t=O(e))?null:t.stateNode}var Go={updateContainerAtExpirationTime:Wo,createContainer:function(t,e,n){return t={current:e=Xt(3,null,null,e?3:0),containerInfo:t,pendingChildren:null,pingCache:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,didError:!1,pendingCommitExpirationTime:0,finishedWork:null,timeoutHandle:V,context:null,pendingContext:null,hydrate:n,nextExpirationTimeToWorkOn:0,expirationTime:0,firstBatch:null,nextScheduledRoot:null},e.stateNode=t},updateContainer:function(t,e,n,r){var o=e.current;return Wo(t,e,n,o=no(Io(),o),r)},flushRoot:Uo,requestWork:ko,computeUniqueAsyncExpiration:function(){var t=1073741822-25*(1+((1073741822-Io()+500)/25|0));return t>=Dr&&(t=Dr-1),Dr=t},batchedUpdates:function(t,e){var n=mo;mo=!0;try{return t(e)}finally{(mo=n)||fo||Ko(1073741823,!1)}},unbatchedUpdates:function(t,e){if(mo&&!bo){bo=!0;try{return t(e)}finally{bo=!1}}return t(e)},deferredUpdates:function(t){var e=Io(),n=Kr,r=_o;Kr=1073741822-25*(1+((1073741822-e+500)/25|0)),_o=!1;try{return t()}finally{Kr=n,_o=r}},syncUpdates:ao,interactiveUpdates:function(t,e,n){if(_o)return t(e,n);mo||fo||0===vo||(Ko(vo,!1),vo=0);var r=_o,o=mo;mo=_o=!0;try{return t(e,n)}finally{_o=r,(mo=o)||fo||Ko(1073741823,!1)}},flushInteractiveUpdates:function(){fo||0===vo||(Ko(vo,!1),vo=0)},flushControlled:function(t){var e=mo;mo=!0;try{ao(t)}finally{(mo=e)||fo||Ko(1073741823,!1)}},flushSync:function(t,e){fo&&a("187");var n=mo;mo=!0;try{return ao(t,e)}finally{mo=n,Ko(1073741823,!1)}},getPublicRootInstance:function(t){if(!(t=t.current).child)return null;switch(t.child.tag){case 5:return P(t.child.stateNode);default:return t.child.stateNode}},findHostInstance:Bo,findHostInstanceWithWarning:function(t){return Bo(t)},findHostInstanceWithNoPortals:function(t){return null===(t=function(t){if(!(t=F(t)))return null;for(var e=t;;){if(5===e.tag||6===e.tag)return e;if(e.child&&4!==e.tag)e.child.return=e,e=e.child;else{if(e===t)break;for(;!e.sibling;){if(!e.return||e.return===t)return null;e=e.return}e.sibling.return=e.return,e=e.sibling}}return null}(t))?null:t.stateNode},injectIntoDevTools:function(t){var e=t.findFiberByHostInstance;return function(t){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var e=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(e.isDisabled||!e.supportsFiber)return!0;try{var n=e.inject(t);Vt=$t(function(t){return e.onCommitFiberRoot(n,t)}),Yt=$t(function(t){return e.onCommitFiberUnmount(n,t)})}catch(t){}return!0}(o({},t,{overrideProps:null,currentDispatcherRef:l.ReactCurrentDispatcher,findHostInstanceByFiber:function(t){return null===(t=O(t))?null:t.stateNode},findFiberByHostInstance:function(t){return e?e(t):null}}))}};t.exports=Go.default||Go;var Vo=t.exports;return t.exports=e,Vo}},function(t,e,n){"use strict";e.__esModule=!0,e.getClosestInstanceFromNode=function(t){if(t[i])return t[i];for(;!t[i];){if(!t.parentNode)return null;t=t.parentNode}var e=t[i];if(e.tag===r||e.tag===o)return e;return null};var r=5,o=6,i="__reactInternalInstance$"+Math.random().toString(36).slice(2)},function(t,e,n){"use strict";e.__esModule=!0,e.supportsMutation=e.isPrimaryRenderer=e.cancelPassiveEffects=e.schedulePassiveEffects=e.noTimeout=e.cancelTimeout=e.scheduleTimeout=e.cancelDeferredCallback=e.shouldYield=e.scheduleDeferredCallback=e.now=void 0;var r=n(70);Object.keys(r).forEach(function(t){"default"!==t&&"__esModule"!==t&&Object.defineProperty(e,t,{enumerable:!0,get:function(){return r[t]}})});var o=n(71);Object.keys(o).forEach(function(t){"default"!==t&&"__esModule"!==t&&Object.defineProperty(e,t,{enumerable:!0,get:function(){return o[t]}})});var i=n(34);Object.defineProperty(e,"now",{enumerable:!0,get:function(){return i.unstable_now}}),Object.defineProperty(e,"scheduleDeferredCallback",{enumerable:!0,get:function(){return i.unstable_scheduleCallback}}),Object.defineProperty(e,"shouldYield",{enumerable:!0,get:function(){return i.unstable_shouldYield}}),Object.defineProperty(e,"cancelDeferredCallback",{enumerable:!0,get:function(){return i.unstable_cancelCallback}}),e.appendInitialChild=function(t,e){if("string"==typeof e)return void(0,s.default)(!1,'Don not use plain text as child of Konva.Node. You are using text: "%s"',e);t.add(e),(0,l.updatePicture)(t)},e.createInstance=function(t,e,n){var r=a.default[t];if(!r)return void(0,s.default)(o,'ReactKonva does not support the type "%s". If you want to render DOM elements as part of canvas tree take a look into this demo: https://konvajs.github.io/docs/react/DOM_Portal.html',t);var o=new r;return(0,l.applyNodeProps)(o,e),o},e.createTextInstance=function(t,e,n){(0,s.default)(!1,'Text components are not supported for now in ReactKonva. You text is: "'+t+'"')},e.finalizeInitialChildren=function(t,e,n){return!1},e.getPublicInstance=function(t){return t},e.prepareForCommit=function(){},e.prepareUpdate=function(t,e,n,r){return d},e.resetAfterCommit=function(){},e.resetTextContent=function(t){},e.shouldDeprioritizeSubtree=function(t,e){return!1},e.getRootHostContext=function(){return u},e.getChildHostContext=function(){return u},e.shouldSetTextContent=function(t,e){return!1},e.appendChild=function(t,e){e.parent===t?e.moveToTop():t.add(e);(0,l.updatePicture)(t)},e.appendChildToContainer=function(t,e){e.parent===t?e.moveToTop():t.add(e);(0,l.updatePicture)(t)},e.insertBefore=function(t,e,n){(0,s.default)(e!==n,"ReactKonva: Can not insert node before itself"),e.remove(),t.add(e),e.setZIndex(n.getZIndex()),(0,l.updatePicture)(t)},e.insertInContainerBefore=function(t,e,n){(0,s.default)(e!==n,"ReactKonva: Can not insert node before itself"),e.remove(),t.add(e),e.setZIndex(n.getZIndex()),(0,l.updatePicture)(t)},e.removeChild=function(t,e){e.destroy(),e.off(l.EVENTS_NAMESPACE),(0,l.updatePicture)(t)},e.removeChildFromContainer=function(t,e){e.destroy(),e.off(l.EVENTS_NAMESPACE),(0,l.updatePicture)(t)},e.commitTextUpdate=function(t,e,n){(0,s.default)(!1,'Text components are not yet supported in ReactKonva. You text is: "'+n+'"')},e.commitMount=function(t,e,n){},e.commitUpdate=function(t,e,n,r,o){(0,l.applyNodeProps)(t,o,r)},e.hideInstance=function(t){t.hide(),(0,l.updatePicture)(t)},e.hideTextInstance=function(t){},e.unhideInstance=function(t,e){(null==e.visible||e.visible)&&t.show()},e.unhideTextInstance=function(t,e){};var a=c(n(35)),l=n(36),s=c(n(25));function c(t){return t&&t.__esModule?t:{default:t}}var u={},d={};a.default.Node.prototype._applyProps=l.applyNodeProps;e.scheduleTimeout=setTimeout,e.cancelTimeout=clearTimeout,e.noTimeout=-1,e.schedulePassiveEffects=i.unstable_scheduleCallback,e.cancelPassiveEffects=i.unstable_cancelCallback;e.isPrimaryRenderer=!1,e.supportsMutation=!0},function(t,e,n){"use strict";e.__esModule=!0,e.createHiddenTextInstance=e.cloneUnhiddenInstance=e.cloneHiddenInstance=e.replaceContainerChildren=e.finalizeContainerChildren=e.appendChildToContainerChildSet=e.createContainerChildSet=e.cloneInstance=e.supportsPersistence=void 0;var r,o=n(25),i=(r=o)&&r.__esModule?r:{default:r};function a(){(0,i.default)(!1,"The current renderer does not support persistence. This error is likely caused by a bug in React. Please file an issue.")}e.supportsPersistence=!1,e.cloneInstance=a,e.createContainerChildSet=a,e.appendChildToContainerChildSet=a,e.finalizeContainerChildren=a,e.replaceContainerChildren=a,e.cloneHiddenInstance=a,e.cloneUnhiddenInstance=a,e.createHiddenTextInstance=a},function(t,e,n){"use strict";e.__esModule=!0,e.didNotFindHydratableTextInstance=e.didNotFindHydratableInstance=e.didNotFindHydratableContainerTextInstance=e.didNotFindHydratableContainerInstance=e.didNotHydrateInstance=e.didNotHydrateContainerInstance=e.didNotMatchHydratedTextInstance=e.didNotMatchHydratedContainerTextInstance=e.hydrateTextInstance=e.hydrateInstance=e.getFirstHydratableChild=e.getNextHydratableSibling=e.canHydrateTextInstance=e.canHydrateInstance=e.supportsHydration=void 0;var r,o=n(25),i=(r=o)&&r.__esModule?r:{default:r};function a(){(0,i.default)(!1,"The current renderer does not support hyration. This error is likely caused by a bug in React. Please file an issue.")}e.supportsHydration=!1,e.canHydrateInstance=a,e.canHydrateTextInstance=a,e.getNextHydratableSibling=a,e.getFirstHydratableChild=a,e.hydrateInstance=a,e.hydrateTextInstance=a,e.didNotMatchHydratedContainerTextInstance=a,e.didNotMatchHydratedTextInstance=a,e.didNotHydrateContainerInstance=a,e.didNotHydrateInstance=a,e.didNotFindHydratableContainerInstance=a,e.didNotFindHydratableContainerTextInstance=a,e.didNotFindHydratableInstance=a,e.didNotFindHydratableTextInstance=a},function(t,e,n){var r=n(73);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(3)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(2)(!1)).push([t.i,".svg_image {\r\n    margin: 10px;\r\n    -webkit-transition: width 0.5s;\r\n    transition: 0.5s;\r\n}\r\n  \r\n.svg_image:hover {\r\n      opacity: 0.5;\r\n}",""])},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var n=e.protocol+"//"+e.host,r=n+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,e){var o,i=e.trim().replace(/^"(.*)"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?t:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(t,e,n){var r=n(76);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(3)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(2)(!1)).push([t.i,"#popover-basic {\r\n    position: absolute;\r\n}\r\n\r\n.fadein {\r\n    opacity: 0;\r\n    -moz-transition: opacity 2s;\r\n    -webkit-transition: opacity 2s;\r\n    -o-transition: opacity 2s;\r\n    transition: opacity 2s;\r\n}\r\n\r\n.loaded {\r\n    display: flex;\r\n    animation: bounceIn 2s;\r\n    -webkit-animation: bounceIn 2s;\r\n}\r\n\r\n",""])},function(t,e,n){n(78),t.exports=n(11).Object.assign},function(t,e,n){var r=n(18);r(r.S+r.F,"Object",{assign:n(85)})},function(t,e,n){var r=n(80);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e,n){var r=n(37),o=n(84);t.exports=n(20)?function(t,e,n){return r.f(t,e,o(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e,n){t.exports=!n(20)&&!n(21)(function(){return 7!=Object.defineProperty(n(38)("div"),"a",{get:function(){return 7}}).a})},function(t,e,n){var r=n(27);t.exports=function(t,e){if(!r(t))return t;var n,o;if(e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;if("function"==typeof(n=t.valueOf)&&!r(o=n.call(t)))return o;if(!e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e,n){"use strict";var r=n(22),o=n(94),i=n(45),a=n(46),l=n(40),s=Object.assign;t.exports=!s||n(21)(function(){var t={},e={},n=Symbol(),r="abcdefghijklmnopqrst";return t[n]=7,r.split("").forEach(function(t){e[t]=t}),7!=s({},t)[n]||Object.keys(s({},e)).join("")!=r})?function(t,e){for(var n=a(t),s=arguments.length,c=1,u=o.f,d=i.f;s>c;)for(var f,h=l(arguments[c++]),p=u?r(h).concat(u(h)):r(h),v=p.length,y=0;v>y;)d.call(h,f=p[y++])&&(n[f]=h[f]);return n}:s},function(t,e,n){var r=n(39),o=n(28),i=n(88)(!1),a=n(43)("IE_PROTO");t.exports=function(t,e){var n,l=o(t),s=0,c=[];for(n in l)n!=a&&r(l,n)&&c.push(n);for(;e.length>s;)r(l,n=e[s++])&&(~i(c,n)||c.push(n));return c}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e,n){var r=n(28),o=n(89),i=n(90);t.exports=function(t){return function(e,n,a){var l,s=r(e),c=o(s.length),u=i(a,c);if(t&&n!=n){for(;c>u;)if((l=s[u++])!=l)return!0}else for(;c>u;u++)if((t||u in s)&&s[u]===n)return t||u||0;return!t&&-1}}},function(t,e,n){var r=n(42),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},function(t,e,n){var r=n(42),o=Math.max,i=Math.min;t.exports=function(t,e){return(t=r(t))<0?o(t+e,0):i(t,e)}},function(t,e,n){var r=n(11),o=n(19),i=o["__core-js_shared__"]||(o["__core-js_shared__"]={});(t.exports=function(t,e){return i[t]||(i[t]=void 0!==e?e:{})})("versions",[]).push({version:r.version,mode:n(92)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(t,e){t.exports=!0},function(t,e){var n=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++n+r).toString(36))}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,n){n(96),t.exports=n(11).Object.keys},function(t,e,n){var r=n(46),o=n(22);n(97)("keys",function(){return function(t){return o(r(t))}})},function(t,e,n){var r=n(18),o=n(11),i=n(21);t.exports=function(t,e){var n=(o.Object||{})[t]||Object[t],a={};a[t]=e(n),r(r.S+r.F*i(function(){n(1)}),"Object",a)}},function(t,e,n){n(99);var r=n(11).Object;t.exports=function(t,e){return r.create(t,e)}},function(t,e,n){var r=n(18);r(r.S,"Object",{create:n(100)})},function(t,e,n){var r=n(26),o=n(101),i=n(44),a=n(43)("IE_PROTO"),l=function(){},s=function(){var t,e=n(38)("iframe"),r=i.length;for(e.style.display="none",n(102).appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),s=t.F;r--;)delete s.prototype[i[r]];return s()};t.exports=Object.create||function(t,e){var n;return null!==t?(l.prototype=r(t),n=new l,l.prototype=null,n[a]=t):n=s(),void 0===e?n:o(n,e)}},function(t,e,n){var r=n(37),o=n(26),i=n(22);t.exports=n(20)?Object.defineProperties:function(t,e){o(t);for(var n,a=i(e),l=a.length,s=0;l>s;)r.f(t,n=a[s++],e[n]);return t}},function(t,e,n){var r=n(19).document;t.exports=r&&r.documentElement},function(t,e,n){"use strict";var r=n(104);function o(){}t.exports=function(){function t(t,e,n,o,i,a){if(a!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function e(){return t}t.isRequired=t;var n={array:t,bool:t,func:t,number:t,object:t,string:t,symbol:t,any:t,arrayOf:e,element:t,instanceOf:e,node:t,objectOf:e,oneOf:e,oneOfType:e,shape:e,exact:e};return n.checkPropTypes=o,n.PropTypes=n,n}},function(t,e,n){"use strict";t.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(t,e,n){n(106),t.exports=n(11).Object.entries},function(t,e,n){var r=n(18),o=n(107)(!0);r(r.S,"Object",{entries:function(t){return o(t)}})},function(t,e,n){var r=n(22),o=n(28),i=n(45).f;t.exports=function(t){return function(e){for(var n,a=o(e),l=r(a),s=l.length,c=0,u=[];s>c;)i.call(a,n=l[c++])&&u.push(t?[n,a[n]]:a[n]);return u}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=l(n(109)),o=l(n(110)),i=l(n(111)),a=l(n(112));function l(t){return t&&t.__esModule?t:{default:t}}e.default={fadeInDown:r.default,fadeInUp:o.default,fadeInLeft:i.default,fadeInRight:a.default}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={mask:{position:"fixed",top:0,left:0,width:"100%",height:"100%",backgroundColor:"rgba(0, 0, 0, 0.7)",zIndex:10001},maskHidden:{display:"none"},container:{position:"fixed",top:0,left:0,width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center",zIndex:1e4},containerHidden:{position:"fixed",top:0,left:0,width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center",zIndex:-1},panel:{backgroundColor:"#fff",borderRadius:"5px",boxSizing:"border-box",boxShadow:"0 2px 4px rgba(0, 0, 0, 0.3)",transform:"translate3d(0, 0, 0)",transition:"transform 500ms cubic-bezier(0, 0, 0.25, 1), opacity 500ms cubic-bezier(0, 0, 0.25, 1)",zIndex:10002},panelHidden:{transform:"translate3d(0, -100px, 0)",opacity:0,zIndex:-1,height:0,width:0,overflow:"hidden"}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={mask:{position:"fixed",top:0,left:0,width:"100%",height:"100%",backgroundColor:"rgba(0, 0, 0, 0.7)",zIndex:10001},maskHidden:{display:"none"},container:{position:"fixed",top:0,left:0,width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center",zIndex:1e4},containerHidden:{position:"fixed",top:0,left:0,width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center",zIndex:-1},panel:{backgroundColor:"#fff",borderRadius:"5px",boxSizing:"border-box",boxShadow:"0 2px 4px rgba(0, 0, 0, 0.3)",transform:"translate3d(0, 0, 0)",transition:"transform 500ms cubic-bezier(0, 0, 0.25, 1), opacity 500ms cubic-bezier(0, 0, 0.25, 1)",zIndex:10002},panelHidden:{transform:"translate3d(0, 100px, 0)",opacity:0,zIndex:-1,height:0,width:0,overflow:"hidden"}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={mask:{position:"fixed",top:0,left:0,width:"100%",height:"100%",backgroundColor:"rgba(0, 0, 0, 0.7)",zIndex:10001},maskHidden:{display:"none"},container:{position:"fixed",top:0,left:0,width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center",zIndex:1e4},containerHidden:{position:"fixed",top:0,left:0,width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center",zIndex:-1},panel:{backgroundColor:"#fff",borderRadius:"5px",boxSizing:"border-box",boxShadow:"0 2px 4px rgba(0, 0, 0, 0.3)",transform:"translate3d(0, 0, 0)",transition:"transform 500ms cubic-bezier(0, 0, 0.25, 1), opacity 500ms cubic-bezier(0, 0, 0.25, 1)",zIndex:10002},panelHidden:{transform:"translate3d(-100px, 0, 0)",opacity:0,zIndex:-1,height:0,width:0,overflow:"hidden"}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={mask:{position:"fixed",top:0,left:0,width:"100%",height:"100%",backgroundColor:"rgba(0, 0, 0, 0.7)",zIndex:10001},maskHidden:{display:"none"},container:{position:"fixed",top:0,left:0,width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center",zIndex:1e4},containerHidden:{position:"fixed",top:0,left:0,width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center",zIndex:-1},panel:{backgroundColor:"#fff",borderRadius:"5px",boxSizing:"border-box",boxShadow:"0 2px 4px rgba(0, 0, 0, 0.3)",transform:"translate3d(0, 0, 0)",transition:"transform 500ms cubic-bezier(0, 0, 0.25, 1), opacity 500ms cubic-bezier(0, 0, 0.25, 1)",zIndex:10002},panelHidden:{transform:"translate3d(100px, 0, 0)",opacity:0,zIndex:-1,height:0,width:0,overflow:"hidden"}}},function(t,e,n){var r=n(114);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(3)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(2)(!1)).push([t.i,'.deleteObjectModalContainer {\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.deleteObjectModalLabel {\r\n  text-align: center;\r\n  font: 14px "lucida grande", arial, sans-serif;\r\n  letter-spacing: 3px;\r\n  text-transform: uppercase;\r\n  background-color: rgb(80, 89, 221);\r\n  width: 100%;\r\n  border-radius: 4px;\r\n  color: white;\r\n  padding: 5px;\r\n}\r\n\r\n.deleteObjectModalMessage {\r\n  text-align: center;\r\n  font: 14px "lucida grande", arial, sans-serif;\r\n}\r\n\r\n.modalButtonsSet {\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n}\r\n\r\n.modalButtonAccept {\r\n  width: 50%;\r\n  height: 100%;\r\n  font-size: 12px;\r\n  padding: 5px;\r\n  background-color: rgb(230, 228, 235);\r\n  border: 1px solid white;\r\n  border-radius: 4px;\r\n}\r\n\r\n.modalButtonAccept:active {\r\n  background-color: rgb(80, 89, 221);\r\n}\r\n\r\n.modalButtonAccept:focus {\r\n  outline: 1px solid black;\r\n}\r\n\r\n.modalButtonClose {\r\n  width: 50%;\r\n  height: 100%;\r\n  font-size: 12px;\r\n  padding: 5px;\r\n  background-color: rgb(230, 228, 235);\r\n  border: 1px solid white;\r\n  border-radius: 4px;\r\n}\r\n\r\n.modalButtonClose:active {\r\n  background-color: rgb(80, 89, 221);\r\n}\r\n\r\n.modalButtonClose:focus {\r\n  outline: 1px solid black;\r\n}\r\n\r\n',""])},function(t,e){var n,r,o=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function l(t){if(n===setTimeout)return setTimeout(t,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(t){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(t){r=a}}();var s,c=[],u=!1,d=-1;function f(){u&&s&&(u=!1,s.length?c=s.concat(c):d=-1,c.length&&h())}function h(){if(!u){var t=l(f);u=!0;for(var e=c.length;e;){for(s=c,c=[];++d<e;)s&&s[d].run();d=-1,e=c.length}s=null,u=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function p(t,e){this.fun=t,this.array=e}function v(){}o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];c.push(new p(t,e)),1!==c.length||u||l(h)},p.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=v,o.addListener=v,o.once=v,o.off=v,o.removeListener=v,o.removeAllListeners=v,o.emit=v,o.prependListener=v,o.prependOnceListener=v,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r,o=(r=n(12))&&r.__esModule?r:{default:r},i=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)if(Object.prototype.hasOwnProperty.call(t,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(t,n):{};r.get||r.set?Object.defineProperty(e,n,r):e[n]=t[n]}return e.default=t,e}(n(0)),a=n(117);function l(t){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function s(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function c(t,e){return!e||"object"!==l(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function u(t){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function d(t,e){return(d=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var f=function(t){function e(t){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(n=c(this,u(e).call(this,t))).state={activeItems:(0,a.getActiveItems)(t.children,t.allowMultiple)},n}var n,r,l;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&d(t,e)}(e,i.Component),n=e,(r=[{key:"componentWillReceiveProps",value:function(t){var e=t.children,n=t.allowMultiple;(0,a.isSame)((0,a.getChildrenActiveItems)(this.props.children),(0,a.getChildrenActiveItems)(e))||this.setState({activeItems:(0,a.getActiveItems)(e,n)})}},{key:"handleChange",value:function(t){var e=this.props,n=e.allowMultiple,r=e.children,o=e.onChange,i=e.openNextAccordionItem,a=this.state.activeItems.slice(0),l=a.indexOf(t);-1!==l?(a.splice(l,1),i&&t!==r.length-1&&a.push(t+1)):n?a.push(t):a=[t];var s={activeItems:a};this.setState(s,function(){o&&o(s)})}},{key:"renderItems",value:function(){var t=this,e=this.props,n=e.children,r=e.duration,o=e.easing,l=e.isHovered;if(!n)return null;var s=this.state.activeItems;return(0,a.arrayify)(n).reduce(function(e,n,a){if(n){var c=n.props,u=c.disabled,d=c.duration,f=c.easing,h=!u&&-1!==s.indexOf(a),p=t.handleChange.bind(t,a),v=i.default.cloneElement(n,{duration:d||r,easing:f||o,expanded:h,key:a,index:a,onClick:p,onMouseOver:l&&!u?p:null,ref:"item-".concat(a)});e.push(v)}return e},[])}},{key:"render",value:function(){var t=this.props,e=t.className,n=t.style,r=t.rootTag;return i.default.createElement(r,{className:(0,o.default)("react-sanfona",e),style:n},this.renderItems())}}])&&s(n.prototype,r),l&&s(n,l),e}();e.default=f,f.defaultProps={activeItems:[0],allowMultiple:!1,duration:300,easing:"ease",rootTag:"div"}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.getChildrenActiveItems=o,e.getActiveItems=function(t,e){var n=o(t);!e&&n.length>0&&(n=n.slice(0,1));return n},e.isSame=function(t,e){return t.length===e.length&&t.every(function(t,n){return t===e[n]})},e.arrayify=void 0;var r=function(t){return[].concat(t)};function o(t){var e=[];return r(t).filter(function(t){return t}).forEach(function(t,n){!t.props.disabled&&t.props.expanded&&e.push(n)}),e}e.arrayify=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=c(n(12)),o=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)if(Object.prototype.hasOwnProperty.call(t,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(t,n):{};r.get||r.set?Object.defineProperty(e,n,r):e[n]=t[n]}return e.default=t,e}(n(0)),i=c(n(23)),a=c(n(119)),l=c(n(50)),s=c(n(51));function c(t){return t&&t.__esModule?t:{default:t}}function u(t){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function d(){return(d=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}function f(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function h(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function p(t,e){return!e||"object"!==u(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function v(t){return(v=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function y(t,e){return(y=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var g=function(t){function e(t){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(n=p(this,v(e).call(this,t))).state={maxHeight:t.expanded?"none":0,overflow:t.expanded?"visible":"hidden"},n}var n,c,u;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&y(t,e)}(e,o.Component),n=e,(c=[{key:"componentWillMount",value:function(){this.uuid=this.props.uuid||a.default.v4()}},{key:"componentDidMount",value:function(){this.setMaxHeight(!1)}},{key:"componentWillUnmount",value:function(){clearTimeout(this.timeout)}},{key:"componentDidUpdate",value:function(t){var e=this.props,n=e.children,r=e.disabled,o=e.expanded;if(t.expanded!==o){if(r)return;o?this.handleExpand():this.handleCollapse()}else t.children!==n&&this.setMaxHeight(!1)}},{key:"handleExpand",value:function(){var t=this.props,e=t.index,n=t.onExpand,r=t.slug;this.setMaxHeight(!1),n&&(r?n(r,e):n(e))}},{key:"handleCollapse",value:function(){var t=this.props,e=t.index,n=t.onClose,r=t.slug;this.setMaxHeight(!0),n&&(r?n(r,e):n(e))}},{key:"setMaxHeight",value:function(t){var e=this,n=this.props,r=n.duration,o=n.expanded;clearTimeout(this.timeout);var a=i.default.findDOMNode(this.refs.body),l=a.querySelectorAll("img");if(l.length>0)return this.preloadImages(a,l);this.setState({maxHeight:o||t?a.scrollHeight+"px":0,overflow:"hidden"}),this.timeout=o?setTimeout(function(){e.setState({maxHeight:"none",overflow:"visible"})},r):setTimeout(function(){e.setState({maxHeight:0})},0)}},{key:"preloadImages",value:function(t){for(var e=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],r=this.props,o=r.duration,i=r.expanded,a=0,l=function(){++a===n.length&&(i?(e.setState({maxHeight:"".concat(t.scrollHeight,"px")}),setTimeout(function(){e.setState({overflow:"visible"})},o)):e.setState({maxHeight:0,overflow:"hidden"}))},s=0;s<n.length;s+=1){var c=new Image;c.src=n[s].src,c.onload=c.onerror=l}}},{key:"getProps",value:function(){var t=this.props,e=t.className,n=t.disabled,o=t.disabledClassName,i=t.expanded,a=t.expandedClassName,l=t.style;return{className:(0,r.default)("react-sanfona-item",e,{"react-sanfona-item-expanded":i&&!n,"react-sanfona-item-disabled":n},a&&f({},a,i),o&&f({},o,n)),style:l}}},{key:"render",value:function(){var t=this.props,e=t.bodyClassName,n=t.bodyTag,r=t.children,i=t.disabled,a=t.duration,c=t.easing,u=t.onClick,f=t.onMouseOver,h=t.rootTag,p=t.title,v=t.titleClassName,y=t.titleTag,g=this.state,m=g.maxHeight,b=g.overflow;return o.default.createElement(h,d({},this.getProps(),{ref:"item"}),o.default.createElement(s.default,{className:v,expanded:this.props.expanded,onClick:i?null:u,onMouseOver:i?null:f,rootTag:y,title:p,uuid:this.uuid}),o.default.createElement(l.default,{className:e,duration:a,easing:c,expanded:this.props.expanded,maxHeight:m,overflow:b,ref:"body",rootTag:n,uuid:this.uuid},r))}}])&&h(n.prototype,c),u&&h(n,u),e}();e.default=g,g.defaultProps={rootTag:"div",titleTag:"h3",bodyTag:"div"}},function(t,e,n){var r=n(120),o=n(121),i=o;i.v1=r,i.v4=o,t.exports=i},function(t,e,n){var r,o,i=n(48),a=n(49),l=0,s=0;t.exports=function(t,e,n){var c=e&&n||0,u=e||[],d=(t=t||{}).node||r,f=void 0!==t.clockseq?t.clockseq:o;if(null==d||null==f){var h=i();null==d&&(d=r=[1|h[0],h[1],h[2],h[3],h[4],h[5]]),null==f&&(f=o=16383&(h[6]<<8|h[7]))}var p=void 0!==t.msecs?t.msecs:(new Date).getTime(),v=void 0!==t.nsecs?t.nsecs:s+1,y=p-l+(v-s)/1e4;if(y<0&&void 0===t.clockseq&&(f=f+1&16383),(y<0||p>l)&&void 0===t.nsecs&&(v=0),v>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");l=p,s=v,o=f;var g=(1e4*(268435455&(p+=122192928e5))+v)%4294967296;u[c++]=g>>>24&255,u[c++]=g>>>16&255,u[c++]=g>>>8&255,u[c++]=255&g;var m=p/4294967296*1e4&268435455;u[c++]=m>>>8&255,u[c++]=255&m,u[c++]=m>>>24&15|16,u[c++]=m>>>16&255,u[c++]=f>>>8|128,u[c++]=255&f;for(var b=0;b<6;++b)u[c+b]=d[b];return e||a(u)}},function(t,e,n){var r=n(48),o=n(49);t.exports=function(t,e,n){var i=e&&n||0;"string"==typeof t&&(e="binary"===t?new Array(16):null,t=null);var a=(t=t||{}).random||(t.rng||r)();if(a[6]=15&a[6]|64,a[8]=63&a[8]|128,e)for(var l=0;l<16;++l)e[i+l]=a[l];return e||o(a)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DebounceInput=void 0;var r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=l(n(0)),a=l(n(123));function l(t){return t&&t.__esModule?t:{default:t}}(e.DebounceInput=function(t){function e(t){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var n=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return n.onChange=function(t){t.persist();var e=n.state.value;n.setState({value:t.target.value},function(){var o=n.state.value;o.length>=n.props.minLength?n.notify(t):e.length>o.length&&n.notify(r({},t,{target:r({},t.target,{value:""})}))})},n.onKeyDown=function(t){var e=n.props.onKeyDown;"Enter"===t.key&&n.forceNotify(t),e&&e(t)},n.onBlur=function(t){var e=n.props.onBlur;n.forceNotify(t),e&&e(t)},n.createNotifier=function(t){if(t<0)n.notify=function(){return null};else if(0===t)n.notify=n.doNotify;else{var e=(0,a.default)(function(t){n.isDebouncing=!1,n.doNotify(t)},t);n.notify=function(t){n.isDebouncing=!0,e(t)},n.flush=function(){return e.flush()},n.cancel=function(){n.isDebouncing=!1,e.cancel()}}},n.doNotify=function(){n.props.onChange.apply(void 0,arguments)},n.forceNotify=function(t){if(n.isDebouncing){n.cancel&&n.cancel();var e=n.state.value,o=n.props.minLength;e.length>=o?n.doNotify(t):n.doNotify(r({},t,{target:r({},t.target,{value:e})}))}},n.state={value:t.value||""},n.isDebouncing=!1,n}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,i.default.PureComponent),o(e,[{key:"componentWillMount",value:function(){this.createNotifier(this.props.debounceTimeout)}},{key:"componentWillReceiveProps",value:function(t){var e=t.value,n=t.debounceTimeout;this.isDebouncing||(void 0!==e&&this.state.value!==e&&this.setState({value:e}),n!==this.props.debounceTimeout&&this.createNotifier(n))}},{key:"componentWillUnmount",value:function(){this.flush&&this.flush()}},{key:"render",value:function(){var t=this.props,e=t.element,n=(t.onChange,t.value,t.minLength,t.debounceTimeout,t.forceNotifyByEnter),o=t.forceNotifyOnBlur,a=t.onKeyDown,l=t.onBlur,s=t.inputRef,c=function(t,e){var n={};for(var r in t)e.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n}(t,["element","onChange","value","minLength","debounceTimeout","forceNotifyByEnter","forceNotifyOnBlur","onKeyDown","onBlur","inputRef"]),u=void 0;u=n?{onKeyDown:this.onKeyDown}:a?{onKeyDown:a}:{};var d=void 0;d=o?{onBlur:this.onBlur}:l?{onBlur:l}:{};var f=s?{ref:s}:{};return i.default.createElement(e,r({},c,{onChange:this.onChange,value:this.state.value},u,d,f))}}]),e}()).defaultProps={element:"input",type:"text",onKeyDown:void 0,onBlur:void 0,value:void 0,minLength:0,debounceTimeout:100,forceNotifyByEnter:!0,forceNotifyOnBlur:!0,inputRef:void 0}},function(t,e,n){(function(e){var n="Expected a function",r=NaN,o="[object Symbol]",i=/^\s+|\s+$/g,a=/^[-+]0x[0-9a-f]+$/i,l=/^0b[01]+$/i,s=/^0o[0-7]+$/i,c=parseInt,u="object"==typeof e&&e&&e.Object===Object&&e,d="object"==typeof self&&self&&self.Object===Object&&self,f=u||d||Function("return this")(),h=Object.prototype.toString,p=Math.max,v=Math.min,y=function(){return f.Date.now()};function g(t){var e=typeof t;return!!t&&("object"==e||"function"==e)}function m(t){if("number"==typeof t)return t;if(function(t){return"symbol"==typeof t||function(t){return!!t&&"object"==typeof t}(t)&&h.call(t)==o}(t))return r;if(g(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=g(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(i,"");var n=l.test(t);return n||s.test(t)?c(t.slice(2),n?2:8):a.test(t)?r:+t}t.exports=function(t,e,r){var o,i,a,l,s,c,u=0,d=!1,f=!1,h=!0;if("function"!=typeof t)throw new TypeError(n);function b(e){var n=o,r=i;return o=i=void 0,u=e,l=t.apply(r,n)}function _(t){var n=t-c;return void 0===c||n>=e||n<0||f&&t-u>=a}function x(){var t=y();if(_(t))return w(t);s=setTimeout(x,function(t){var n=e-(t-c);return f?v(n,a-(t-u)):n}(t))}function w(t){return s=void 0,h&&o?b(t):(o=i=void 0,l)}function S(){var t=y(),n=_(t);if(o=arguments,i=this,c=t,n){if(void 0===s)return function(t){return u=t,s=setTimeout(x,e),d?b(t):l}(c);if(f)return s=setTimeout(x,e),b(c)}return void 0===s&&(s=setTimeout(x,e)),l}return e=m(e)||0,g(r)&&(d=!!r.leading,a=(f="maxWait"in r)?p(m(r.maxWait)||0,e):a,h="trailing"in r?!!r.trailing:h),S.cancel=function(){void 0!==s&&clearTimeout(s),u=0,o=c=i=s=void 0},S.flush=function(){return void 0===s?l:w(y())},S}}).call(this,n(14))},function(t,e,n){var r=n(125);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(3)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(2)(!1)).push([t.i,".userSimpleItem {\r\n    width: 100%;\r\n    border-radius: 10px;\r\n    display: flex;\r\n    align-items: center;\r\n    -webkit-transition: background-color 2s;\r\n    transition: background-color 2s;\r\n}\r\n\r\n.selectedUserSimpleItem {\r\n    width: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n    border-radius: 10px;\r\n    cursor: pointer;\r\n    color: black;\r\n    background-color: rgba(202, 134, 250, 0.4);\r\n}\r\n  \r\n.userInfo {\r\n    display: block;\r\n    width: 100%;\r\n}\r\n\r\n.userSimpleItem:hover {\r\n    cursor: pointer;\r\n    color: black;\r\n    background-color: rgba(202, 134, 250, 0.4);\r\n}",""])},function(t,e,n){var r=n(127);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(3)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(2)(!1)).push([t.i,".chooseUserListWrapper {\r\n  width: 100%;\r\n  padding: 5px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 5px;\r\n}\r\n\r\n.chooseUserList {\r\n  width: 100%;\r\n  height: 150px;\r\n  list-style-type: none;\r\n  padding-left: 0;\r\n  overflow: hidden;\r\n  overflow-y: scroll; /* для прокрутки */\r\n  \r\n}\r\n\r\n.chooseUserListChosen {\r\n  width: 100%;\r\n  height: 100%;\r\n  list-style-type: none;\r\n  padding-left: 0;\r\n  overflow: hidden;\r\n  overflow-y: scroll; /* для прокрутки */\r\n  \r\n}\r\n\r\nul {\r\n  margin-bottom: 0;\r\n}\r\n\r\n",""])},function(t,e,n){var r=n(129);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(3)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(2)(!1)).push([t.i,".objectItem {\r\n    width: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n    border-radius: 10px;\r\n    -webkit-transition: background-color 2s;\r\n    transition: background-color 2s;\r\n}\r\n\r\n.objectItemSelected {\r\n    width: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n    border-radius: 10px;\r\n    cursor: pointer;\r\n    color: black;\r\n    background-color: rgba(239, 255, 121, 0.5);\r\n}\r\n\r\n.objectItem:hover {\r\n    cursor: pointer;\r\n    color: black;\r\n    background-color: rgba(239, 255, 121, 0.5);\r\n}\r\n",""])},function(t,e,n){var r=n(131);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(3)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(2)(!1)).push([t.i,".objectsListWrapper {\r\n  position: relative;\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 5px;\r\n}\r\n\r\n.objectsList {\r\n  width: 100%;\r\n  height: 150px;\r\n  list-style-type: none;\r\n  padding-left: 0;\r\n  overflow: hidden;\r\n  overflow-y: scroll; /* для прокрутки */\r\n}\r\n\r\n.objectsListChosen {\r\n  width: 100%;\r\n  height: 100%;\r\n  list-style-type: none;\r\n  padding-left: 0;\r\n  overflow: hidden;\r\n  overflow-y: scroll; /* для прокрутки */\r\n}\r\n\r\nul {\r\n  margin-bottom: 0;\r\n}\r\n\r\n/* .objectsList::-webkit-scrollbar {\r\n  width: 0px;\r\n  background: transparent; /* make scrollbar transparent */\r\n/*} */\r\n\r\n",""])},function(t,e,n){var r=n(133);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(3)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(2)(!1)).push([t.i,"\r\n.create-tab-accordion {\r\n  border: 1px solid #ccc;\r\n  padding: 5px;\r\n}\r\n\r\n.create-tab-accordion-item-title {\r\n  height: 20px;\r\n  font-size: 10px;\r\n  text-align: center;\r\n  background: rgb(235, 233, 228);\r\n  border: 1px solid rgb(17, 17, 17);\r\n  border-radius: 10px;\r\n  color:black;\r\n  padding: 5px;\r\n  text-transform: uppercase;\r\n  -webkit-transition: background-color 2s;\r\n  transition: background-color 2s;\r\n}\r\n\r\n.create-tab-accordion-item-expanded .create-tab-accordion-item-title {\r\n  background-color: rgba(240, 175, 54, 0.74);\r\n  color: #fff;\r\n}\r\n\r\n.create-tab-accordion-item-body-wrapper {\r\n  color: #666;\r\n  position: relative;\r\n}\r\n\r\n.chooseUserText {\r\n    width: 100%; \r\n    text-align: center;\r\n}\r\n\r\n.buttonCreateObject {\r\n  width: 100%;\r\n  height: 100%;\r\n  font-size: 12px;\r\n  padding: 5px;\r\n  background-color: rgb(252, 219, 158);\r\n  border: 1px solid white;\r\n}\r\n\r\n.buttonCreateObject:active {\r\n  background-color: rgb(80, 89, 221);\r\n}\r\n\r\n.buttonCreateObject:focus {\r\n  outline: 1px solid black;\r\n}",""])},function(t,e,n){var r=n(135);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(3)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(2)(!1)).push([t.i,".userButtonedItem {\r\n    width: 100%;\r\n    border-radius: 10px;\r\n    display: flex;\r\n    align-items: center;\r\n    -webkit-transition: background-color 2s;\r\n    transition: background-color 2s;\r\n}\r\n\r\n.selectedUserButtonedItem {\r\n    width: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n    border-radius: 10px;\r\n    cursor: pointer;\r\n    color: black;\r\n    background-color: rgba(202, 134, 250, 0.4);\r\n}\r\n\r\n.userInfo {\r\n    display: block;\r\n    width: 100%;\r\n}\r\n\r\n.userButtonedItem:hover {\r\n    cursor: pointer;\r\n    color: black;\r\n    background-color: rgba(202, 134, 250, 0.4);\r\n}",""])},function(t,e,n){var r=n(137);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(3)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(2)(!1)).push([t.i,'.deleteUserModalContainer {\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.deleteUserModalLabel {\r\n  text-align: center;\r\n  font: 14px "lucida grande", arial, sans-serif;\r\n  letter-spacing: 3px;\r\n  text-transform: uppercase;\r\n  background-color: rgb(80, 89, 221);\r\n  width: 100%;\r\n  border-radius: 4px;\r\n  color: white;\r\n  padding: 5px;\r\n}\r\n\r\n.deleteUserModalMessage {\r\n  text-align: center;\r\n  font: 14px "lucida grande", arial, sans-serif;\r\n}\r\n\r\n.modalButtonsSet {\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n}\r\n\r\n.modalButtonAccept {\r\n  width: 50%;\r\n  height: 100%;\r\n  font-size: 12px;\r\n  padding: 5px;\r\n  background-color: rgb(230, 228, 235);\r\n  border: 1px solid white;\r\n  border-radius: 4px;\r\n}\r\n\r\n.modalButtonAccept:active {\r\n  background-color: rgb(80, 89, 221);\r\n}\r\n\r\n.modalButtonAccept:focus {\r\n  outline: 1px solid black;\r\n}\r\n\r\n.modalButtonClose {\r\n  width: 50%;\r\n  height: 100%;\r\n  font-size: 12px;\r\n  padding: 5px;\r\n  background-color: rgb(230, 228, 235);\r\n  border: 1px solid white;\r\n  border-radius: 4px;\r\n}\r\n\r\n.modalButtonClose:active {\r\n  background-color: rgb(80, 89, 221);\r\n}\r\n\r\n.modalButtonClose:focus {\r\n  outline: 1px solid black;\r\n}\r\n\r\n',""])},function(t,e,n){var r=n(139);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(3)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(2)(!1)).push([t.i,".userSpecialListWrapper {\r\n  width: 100%;\r\n  padding: 5px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 5px;\r\n}\r\n\r\n.userSpecialList {\r\n  width: 100%;\r\n  height: 150px;\r\n  list-style-type: none;\r\n  padding-left: 0;\r\n  overflow: hidden;\r\n  overflow-y: scroll; /* для прокрутки */\r\n  \r\n}\r\n\r\nul {\r\n  margin-bottom: 0;\r\n}\r\n\r\n.userSpecialList::-webkit-scrollbar {\r\n  width: 0px;\r\n  background: transparent; /* make scrollbar transparent */\r\n}\r\n\r\n\r\n.stretchedButton {\r\n  width: 100%;\r\n}\r\n\r\n",""])},function(t,e,n){var r=n(141);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(3)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(2)(!1)).push([t.i,".currentObjectItem {\r\n    width: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n    border-radius: 10px;\r\n    -webkit-transition: background-color 2s;\r\n    transition: background-color 2s;\r\n}\r\n\r\n.currentObjectItemSelected {\r\n    width: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n    border-radius: 10px;\r\n    cursor: pointer;\r\n    color: black;\r\n    background-color: rgba(239, 255, 121, 0.5);\r\n}\r\n\r\n.currentObjectItem:hover {\r\n    cursor: pointer;\r\n    color: black;\r\n    background-color: rgba(239, 255, 121, 0.5);\r\n}\r\n",""])},function(t,e,n){var r=n(143);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(3)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(2)(!1)).push([t.i,".editField {\r\n  width: 100%;\r\n  display: flex;\r\n}\r\n\r\n.editFieldLabel {\r\n  width: 30%;\r\n}\r\n\r\n.editFieldInput {\r\n  width: 70%;\r\n  padding-left: 8px;\r\n}\r\n\r\n.editFieldInput:focus{\r\n  outline: 2px solid orange;     /* oranges! yey */\r\n}\r\n",""])},function(t,e,n){var r=n(145);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(3)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(2)(!1)).push([t.i,".editField {\r\n  width: 100%;\r\n  display: flex;\r\n}\r\n\r\n.editFieldLabel {\r\n  width: 30%;\r\n}\r\n\r\n.editFieldInput {\r\n  width: 70%;\r\n  padding-left: 8px;\r\n}\r\n\r\n.editFieldInput:focus{\r\n  outline: 2px solid orange;     /* oranges! yey */\r\n}\r\n",""])},function(t,e,n){var r=n(147);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(3)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(2)(!1)).push([t.i,".editField {\r\n  width: 100%;\r\n  display: flex;\r\n}\r\n\r\n.editFieldDropdownLabel {\r\n  width: 30%;\r\n  padding-top: 5px;\r\n}\r\n\r\n.editFieldDropdown {\r\n  width: 70%;\r\n}\r\n\r\n.editFieldDropdown:focus{\r\n  outline: 2px solid orange;     /* oranges! yey */\r\n}\r\n",""])},function(t,e,n){(t.exports=n(2)(!1)).push([t.i,".Dropdown-root {\n  position: relative;\n}\n\n.Dropdown-control {\n  position: relative;\n  overflow: hidden;\n  background-color: white;\n  border: 1px solid #ccc;\n  border-radius: 2px;\n  box-sizing: border-box;\n  color: #333;\n  cursor: default;\n  outline: none;\n  padding: 8px 52px 8px 10px;\n  transition: all 200ms ease;\n}\n\n.Dropdown-control:hover {\n  box-shadow: 0 1px 0 rgba(0, 0, 0, 0.06);\n}\n\n.Dropdown-arrow {\n  border-color: #999 transparent transparent;\n  border-style: solid;\n  border-width: 5px 5px 0;\n  content: ' ';\n  display: block;\n  height: 0;\n  margin-top: -ceil(2.5);\n  position: absolute;\n  right: 10px;\n  top: 14px;\n  width: 0\n}\n\n.is-open .Dropdown-arrow {\n  border-color: transparent transparent #999;\n  border-width: 0 5px 5px;\n}\n\n.Dropdown-menu {\n  background-color: white;\n  border: 1px solid #ccc;\n  box-shadow: 0 1px 0 rgba(0, 0, 0, 0.06);\n  box-sizing: border-box;\n  margin-top: -1px;\n  max-height: 200px;\n  overflow-y: auto;\n  position: absolute;\n  top: 100%;\n  width: 100%;\n  z-index: 1000;\n  -webkit-overflow-scrolling: touch;\n}\n\n.Dropdown-menu .Dropdown-group > .Dropdown-title{\n  padding: 8px 10px;\n  color: rgba(51, 51, 51, 1);\n  font-weight: bold;\n  text-transform: capitalize;\n}\n\n.Dropdown-option {\n  box-sizing: border-box;\n  color: rgba(51, 51, 51, 0.8);\n  cursor: pointer;\n  display: block;\n  padding: 8px 10px;\n}\n\n.Dropdown-option:last-child {\n  border-bottom-right-radius: 2px;\n   border-bottom-left-radius: 2px;\n}\n\n.Dropdown-option:hover {\n  background-color: #f2f9fc;\n  color: #333;\n}\n\n.Dropdown-option.is-selected {\n  background-color: #f2f9fc;\n  color: #333;\n}\n\n.Dropdown-noresults {\n  box-sizing: border-box;\n  color: #ccc;\n  cursor: default;\n  display: block;\n  padding: 8px 10px;\n}\n",""])},function(t,e,n){var r=n(150);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(3)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(2)(!1)).push([t.i,".currentObjectSettingsContainer {\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding-top: 10px;\r\n  padding-left: 10px;\r\n  padding-right: 10px;\r\n}\r\n\r\n.buttonsSet {\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n}\r\n\r\n.buttonCurrentObjectSettingsAccept {\r\n  width: 100%;\r\n  height: 100%;\r\n  font-size: 12px;\r\n  padding: 5px;\r\n  background-color: rgb(230, 228, 235);\r\n  border: 1px solid white;\r\n}\r\n\r\n.buttonCurrentObjectSettingsAccept:active {\r\n  background-color: rgb(80, 89, 221);\r\n}\r\n\r\n.buttonCurrentObjectSettingsAccept:focus {\r\n  outline: 1px solid black;\r\n}",""])},function(t,e,n){var r=n(152);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(3)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(2)(!1)).push([t.i,".currentObjectContainer {\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 5px;\r\n}\r\n\r\n.labelCurrObj {\r\n  border-radius: 10px;\r\n  width: 100%;\r\n  height: 20px;\r\n  text-align: center;\r\n  padding: 5px;\r\n  font-family: Helvetica;\r\n  font-size: 10px;\r\n  text-transform: uppercase;\r\n  color: white;\r\n  background-color: rgba(240, 175, 54, 0.74);\r\n}\r\n",""])},function(t,e,n){var r=n(154);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(3)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(2)(!1)).push([t.i,".editField {\r\n  width: 100%;\r\n  display: flex;\r\n}\r\n\r\n.editFieldDropdownLabel {\r\n  width: 30%;\r\n  padding-top: 5px;\r\n}\r\n\r\n.editFieldDropdown {\r\n  width: 70%;\r\n}\r\n\r\n.editFieldDropdown:focus{\r\n  outline: 2px solid orange;     /* oranges! yey */\r\n}\r\n",""])},function(t,e,n){var r=n(156);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(3)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(2)(!1)).push([t.i,".userSettingsContainer {\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding-top: 10px;\r\n  padding-left: 10px;\r\n  padding-right: 10px;\r\n}\r\n\r\n.buttonsSet {\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n}\r\n\r\n.buttonAccept {\r\n  width: 50%;\r\n  height: 100%;\r\n  font-size: 12px;\r\n  padding: 5px;\r\n  background-color: rgb(230, 228, 235);\r\n  border: 1px solid white;\r\n}\r\n\r\n.buttonAccept:active {\r\n  background-color: rgb(80, 89, 221);\r\n}\r\n\r\n.buttonAccept:focus {\r\n  outline: 1px solid black;\r\n}\r\n\r\n.buttonClose {\r\n  width: 50%;\r\n  height: 100%;\r\n  font-size: 12px;\r\n  padding: 5px;\r\n  background-color: rgb(230, 228, 235);\r\n  border: 1px solid white;\r\n}\r\n\r\n.buttonClose:active {\r\n  background-color: rgb(80, 89, 221);\r\n}\r\n\r\n.buttonClose:focus {\r\n  outline: 1px solid black;\r\n}\r\n",""])},function(t,e,n){var r=n(158);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(3)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(2)(!1)).push([t.i,".userCreateContainer {\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding-top: 10px;\r\n  padding-left: 10px;\r\n  padding-right: 10px;\r\n}\r\n\r\n.buttonsSet {\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n}\r\n\r\n.buttonAccept {\r\n  width: 50%;\r\n  height: 100%;\r\n  font-size: 12px;\r\n  padding: 5px;\r\n  background-color: rgb(230, 228, 235);\r\n  border: 1px solid white;\r\n}\r\n\r\n.buttonAccept:active {\r\n  background-color: rgb(80, 89, 221);\r\n}\r\n\r\n.buttonAccept:focus {\r\n  outline: 1px solid black;\r\n}\r\n\r\n.buttonCancel{\r\n  width: 50%;\r\n  height: 100%;\r\n  font-size: 12px;\r\n  padding: 5px;\r\n  background-color: rgb(230, 228, 235);\r\n  border: 1px solid white;\r\n}\r\n\r\n.buttonCancel:active {\r\n  background-color: rgb(80, 89, 221);\r\n}\r\n\r\n.buttonCancel:focus {\r\n  outline: 1px solid black;\r\n}\r\n",""])},function(t,e,n){var r=n(160);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(3)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(2)(!1)).push([t.i,".usersEditListWrapper {\r\n  width: 100%;\r\n  padding: 5px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 5px;\r\n}\r\n\r\n.usersEditListList {\r\n  width: 100%;\r\n  height: 150px;\r\n  list-style-type: none;\r\n  padding-left: 0;\r\n  overflow: hidden;\r\n  overflow-y: scroll; /* для прокрутки */\r\n  \r\n}\r\n\r\n.usersEditListChosen {\r\n  width: 100%;\r\n  height: 100%;\r\n  list-style-type: none;\r\n  padding-left: 0;\r\n  overflow: hidden;\r\n  overflow-y: scroll; /* для прокрутки */\r\n  \r\n}\r\n\r\nul {\r\n  margin-bottom: 0;\r\n}\r\n\r\n/* .userSpecialList::-webkit-scrollbar {\r\n  width: 0px;\r\n  background: transparent; /* make scrollbar transparent */\r\n/*} */\r\n\r\n\r\n.buttonAddUser {\r\n  width: 100%;\r\n  height: 100%;\r\n  font-size: 12px;\r\n  padding: 5px;\r\n  background-color: rgb(230, 228, 235);\r\n  border: 1px solid white;\r\n}\r\n\r\n.buttonAddUser:active {\r\n  background-color: rgb(80, 89, 221);\r\n}\r\n\r\n.buttonAddUser:focus {\r\n  outline: 1px solid black;\r\n}\r\n",""])},function(t,e,n){var r=n(162);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(3)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(2)(!1)).push([t.i,".saveMapContainer {\r\n  padding: 5px;\r\n}\r\n\r\n.buttonSaveMap {\r\n  width: 100%;\r\n  height: 100%;\r\n  font-size: 12px;\r\n  padding: 5px;\r\n  background-color: rgb(230, 228, 235);\r\n  border: 1px solid white;\r\n}\r\n\r\n.buttonSaveMap:active {\r\n  background-color: rgb(80, 89, 221);\r\n}\r\n\r\n.buttonSaveMap:focus {\r\n  outline: 1px solid black;\r\n}\r\n",""])},function(t,e,n){var r=n(164);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(3)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(2)(!1)).push([t.i,'.saveMapModalContainer {\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.saveMapModalLabel {\r\n  text-align: center;\r\n  font: 14px "lucida grande", arial, sans-serif;\r\n  letter-spacing: 3px;\r\n  text-transform: uppercase;\r\n  background-color: rgb(80, 89, 221);\r\n  width: 100%;\r\n  border-radius: 4px;\r\n  color: white;\r\n  padding: 5px;\r\n}\r\n\r\n.saveMapModalMessage {\r\n  text-align: center;\r\n  font: 14px "lucida grande", arial, sans-serif;\r\n}\r\n\r\n.modalButtonsSet {\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n}\r\n\r\n.modalButtonAccept {\r\n  width: 50%;\r\n  height: 100%;\r\n  font-size: 12px;\r\n  padding: 5px;\r\n  background-color: rgb(230, 228, 235);\r\n  border: 1px solid white;\r\n  border-radius: 4px;\r\n}\r\n\r\n.modalButtonAccept:active {\r\n  background-color: rgb(80, 89, 221);\r\n}\r\n\r\n.modalButtonAccept:focus {\r\n  outline: 1px solid black;\r\n}\r\n\r\n.modalButtonClose {\r\n  width: 50%;\r\n  height: 100%;\r\n  font-size: 12px;\r\n  padding: 5px;\r\n  background-color: rgb(230, 228, 235);\r\n  border: 1px solid white;\r\n  border-radius: 4px;\r\n}\r\n\r\n.modalButtonClose:active {\r\n  background-color: rgb(80, 89, 221);\r\n}\r\n\r\n.modalButtonClose:focus {\r\n  outline: 1px solid black;\r\n}\r\n\r\n',""])},function(t,e,n){(function(n){var r,o,i;o=[],void 0===(i="function"==typeof(r=function(){"use strict";function e(t,e,n){var r=new XMLHttpRequest;r.open("GET",t),r.responseType="blob",r.onload=function(){a(r.response,e,n)},r.onerror=function(){console.error("could not download file")},r.send()}function r(t){var e=new XMLHttpRequest;return e.open("HEAD",t,!1),e.send(),200<=e.status&&299>=e.status}function o(t){try{t.dispatchEvent(new MouseEvent("click"))}catch(n){var e=document.createEvent("MouseEvents");e.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),t.dispatchEvent(e)}}var i="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof n&&n.global===n?n:void 0,a=i.saveAs||"object"!=typeof window||window!==i?function(){}:"download"in HTMLAnchorElement.prototype?function(t,n,a){var l=i.URL||i.webkitURL,s=document.createElement("a");n=n||t.name||"download",s.download=n,s.rel="noopener","string"==typeof t?(s.href=t,s.origin===location.origin?o(s):r(s.href)?e(t,n,a):o(s,s.target="_blank")):(s.href=l.createObjectURL(t),setTimeout(function(){l.revokeObjectURL(s.href)},4e4),setTimeout(function(){o(s)},0))}:"msSaveOrOpenBlob"in navigator?function(t,n,i){if(n=n||t.name||"download","string"!=typeof t)navigator.msSaveOrOpenBlob(function(t,e){return void 0===e?e={autoBom:!1}:"object"!=typeof e&&(console.warn("Depricated: Expected third argument to be a object"),e={autoBom:!e}),e.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(t.type)?new Blob(["\ufeff",t],{type:t.type}):t}(t,i),n);else if(r(t))e(t,n,i);else{var a=document.createElement("a");a.href=t,a.target="_blank",setTimeout(function(){o(a)})}}:function(t,n,r,o){if((o=o||open("","_blank"))&&(o.document.title=o.document.body.innerText="downloading..."),"string"==typeof t)return e(t,n,r);var a="application/octet-stream"===t.type,l=/constructor/i.test(i.HTMLElement)||i.safari,s=/CriOS\/[\d]+/.test(navigator.userAgent);if((s||a&&l)&&"object"==typeof FileReader){var c=new FileReader;c.onloadend=function(){var t=c.result;t=s?t:t.replace(/^data:[^;]*;/,"data:attachment/file;"),o?o.location.href=t:location=t,o=null},c.readAsDataURL(t)}else{var u=i.URL||i.webkitURL,d=u.createObjectURL(t);o?o.location=d:location.href=d,o=null,setTimeout(function(){u.revokeObjectURL(d)},4e4)}};i.saveAs=a.saveAs=a,t.exports=a})?r.apply(e,o):r)||(t.exports=i)}).call(this,n(14))},function(t,e,n){var r=n(167);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(3)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(2)(!1)).push([t.i,".sidePanelContainer {\r\n  width: 400px;\r\n  height: 902px;\r\n  border: 1px solid black;\r\n}\r\n\r\n.mainAccordion {\r\n  border: 1px solid #ccc;\r\n}\r\n\r\n.mainAccordion-item-title {\r\n  height: 100%;\r\n  font-size: 12px;\r\n  letter-spacing: 0.1em;\r\n  text-align: center;\r\n  background: rgb(230, 228, 235);\r\n  border: 1px solid white;\r\n  color: black;\r\n  padding: 10px;\r\n  text-transform: uppercase;\r\n  -webkit-transition: background-color 2s;\r\n  transition: background-color 2s;\r\n}\r\n\r\n.mainAccordion-item-expanded .mainAccordion-item-title {\r\n  background-color: rgb(80, 89, 221);\r\n  color: #fff;\r\n  border: 1px solid black;\r\n}\r\n\r\n.mainAccordion-item-body-wrapper {\r\n  color: #666;\r\n  position: relative;\r\n}\r\n\r\n.buttonSaveMap {\r\n  width: 100%;\r\n  height: 100%;\r\n  font-size: 12px;\r\n  padding: 5px;\r\n  background-color: rgb(230, 228, 235);\r\n  border: 1px solid white;\r\n}\r\n\r\n.buttonSaveMap:active {\r\n  background-color: rgb(80, 89, 221);\r\n}\r\n\r\n.buttonSaveMap:focus {\r\n  outline: 1px solid black;\r\n}\r\n",""])},function(t,e,n){var r=n(169);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(3)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(2)(!1)).push([t.i,".leftPanel {\r\n  display: flex;\r\n  flex-direction: column;\r\n  font-family: 'lucida grande', arial, sans-serif;\r\n  font-size: 12px;\r\n  border: 1px solid black;\r\n  \r\n}\r\n\r\n.buttonLeftPanel {\r\n  height: 40px;\r\n  font-size: 12px;\r\n  background-color: rgb(230, 228, 235);\r\n  padding: 0px;\r\n  border: 1px solid white;\r\n\r\n\r\n}\r\n\r\n.buttonLeftPanel:active {\r\n  background-color: rgb(80, 89, 221);\r\n}\r\n\r\n.buttonLeftPanel:focus {\r\n  outline: 1px solid black;\r\n}\r\n\r\n.checkboxLeftPanel {\r\n  height: 40px;\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n  border: 0px;\r\n\r\n}\r\n\r\n.labelLeftPanel {\r\n  width: 100%;\r\n  text-align: center;\r\n  vertical-align: middle;\r\n  margin: 0;\r\n\r\n}\r\n\r\n.buttonsSet {\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n}\r\n\r\n.buttonZoomIn {\r\n  width: 50%;\r\n  height: 100%;\r\n  font-size: 12px;\r\n  padding: 5px;\r\n  background-color: rgb(230, 228, 235);\r\n  border: 1px solid white;\r\n}\r\n\r\n.buttonZoomIn:active {\r\n  background-color: rgb(80, 89, 221);\r\n}\r\n\r\n.buttonZoomIn:focus {\r\n  outline: 0px;\r\n}\r\n\r\n.buttonZoomOut {\r\n  width: 50%;\r\n  height: 100%;\r\n  font-size: 12px;\r\n  padding: 5px;\r\n  background-color: rgb(230, 228, 235);\r\n  border: 1px solid white;\r\n}\r\n\r\n.buttonZoomOut:active {\r\n  background-color: rgb(80, 89, 221);\r\n}\r\n\r\n.buttonZoomOut:focus {\r\n  outline: 0px;\r\n}\r\n",""])},function(t,e,n){var r=n(171);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(3)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(2)(!1)).push([t.i,'.globalArea {\r\n  margin: auto;\r\n  width: 95%;\r\n  display: flex;\r\n  align-items: flex-start;\r\n  justify-content: center;\r\n\r\n  font:.7em/1.5 "lucida grande", arial, sans-serif;\r\n}',""])},function(t,e,n){var r=n(173);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(3)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(2)(!1)).push([t.i,".myContainer {\r\n    background-color: white;\r\n}\r\n\r\n.labelMainHeader {\r\n    text-align: center;\r\n    font-family: 'Arizonia', cursive;\r\n    font-size: 5rem;\r\n    padding-left: 10px;\r\n    padding-top: 10px;\r\n    letter-spacing: 3px;\r\n    /* transform:scale(1.1, 1); */\r\n\r\n}",""])},function(t,e,n){"use strict";n.r(e);var r=n(0),o=n.n(r),i=n(23),a=n.n(i),l=n(1),s=n(52);function c(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}var u=n(13),d=n.n(u),f=o.a.createContext(null),h=function(t){function e(e){var n;n=t.call(this,e)||this;var r=e.store;return n.state={storeState:r.getState(),store:r},n}c(e,t);var n=e.prototype;return n.componentDidMount=function(){this._isMounted=!0,this.subscribe()},n.componentWillUnmount=function(){this.unsubscribe&&this.unsubscribe(),this._isMounted=!1},n.componentDidUpdate=function(t){this.props.store!==t.store&&(this.unsubscribe&&this.unsubscribe(),this.subscribe())},n.subscribe=function(){var t=this,e=this.props.store;this.unsubscribe=e.subscribe(function(){var n=e.getState();t._isMounted&&t.setState(function(t){return t.storeState===n?null:{storeState:n}})});var n=e.getState();n!==this.state.storeState&&this.setState({storeState:n})},n.render=function(){var t=this.props.context||f;return o.a.createElement(t.Provider,{value:this.state},this.props.children)},e}(r.Component);h.propTypes={store:d.a.shape({subscribe:d.a.func.isRequired,dispatch:d.a.func.isRequired,getState:d.a.func.isRequired}),context:d.a.object,children:d.a.any};var p=h;function v(){return(v=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}function y(t,e){if(null==t)return{};var n,r,o={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}var g=n(32),m=n.n(g),b=n(10),_=n.n(b),x=n(30);function w(t,e){void 0===e&&(e={});var n=e,i=n.getDisplayName,a=void 0===i?function(t){return"ConnectAdvanced("+t+")"}:i,l=n.methodName,s=void 0===l?"connectAdvanced":l,u=n.renderCountProp,d=void 0===u?void 0:u,h=n.shouldHandleStateChanges,p=void 0===h||h,g=n.storeKey,b=void 0===g?"store":g,w=n.withRef,S=void 0!==w&&w,C=n.forwardRef,T=void 0!==C&&C,F=n.context,O=void 0===F?f:F,P=y(n,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"]);_()(void 0===d,"renderCountProp is removed. render counting is built into the latest React dev tools profiling extension"),_()(!S,"withRef is removed. To access the wrapped instance, use a ref on the connected component");var E="To use a custom Redux store for specific components,  create a custom React context with React.createContext(), and pass the context object to React Redux's Provider and specific components like:  <Provider context={MyContext}><ConnectedComponent context={MyContext} /></Provider>. You may also pass a {context : MyContext} option to connect";_()("store"===b,"storeKey has been removed and does not do anything. "+E);var j=O;return function(e){var n=e.displayName||e.name||"Component",i=a(n),l=v({},P,{getDisplayName:a,methodName:s,renderCountProp:d,shouldHandleStateChanges:p,storeKey:b,displayName:i,wrappedComponentName:n,WrappedComponent:e}),u=P.pure,f=r.Component;u&&(f=r.PureComponent);var h=function(n){function r(e){var r,i,a,l,s,c,d,f,h,p,y;return r=n.call(this,e)||this,_()(T?!e.wrapperProps[b]:!e[b],"Passing redux store in props has been removed and does not do anything. "+E),r.selectDerivedProps=function(e,n,r,o){if(u&&i===n&&a===e)return l;r===s&&c===o||(s=r,c=o,d=t(r.dispatch,o)),i=n,a=e;var f=d(e,n);return l=f},r.selectChildElement=function(t,e,n){return e===f&&n===h&&y===t||(f=e,h=n,y=t,p=o.a.createElement(t,v({},e,{ref:n}))),p},r.indirectRenderWrappedComponent=r.indirectRenderWrappedComponent.bind(function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(r)),r}c(r,n);var a=r.prototype;return a.indirectRenderWrappedComponent=function(t){return this.renderWrappedComponent(t)},a.renderWrappedComponent=function(t){_()(t,'Could not find "store" in the context of "'+i+'". Either wrap the root component in a <Provider>, or pass a custom React context provider to <Provider> and the corresponding React context consumer to '+i+" in connect options.");var n,r=t.storeState,o=t.store,a=this.props;T&&(a=this.props.wrapperProps,n=this.props.forwardedRef);var s=this.selectDerivedProps(r,a,o,l);return this.selectChildElement(e,s,n)},a.render=function(){var t=this.props.context&&this.props.context.Consumer&&Object(x.isContextConsumer)(o.a.createElement(this.props.context.Consumer,null))?this.props.context:j;return o.a.createElement(t.Consumer,null,this.indirectRenderWrappedComponent)},r}(f);if(h.WrappedComponent=e,h.displayName=i,T){var y=o.a.forwardRef(function(t,e){return o.a.createElement(h,{wrapperProps:t,forwardedRef:e})});return y.displayName=i,y.WrappedComponent=e,m()(y,e)}return m()(h,e)}}var S=Object.prototype.hasOwnProperty;function C(t,e){return t===e?0!==t||0!==e||1/t==1/e:t!=t&&e!=e}function T(t,e){if(C(t,e))return!0;if("object"!=typeof t||null===t||"object"!=typeof e||null===e)return!1;var n=Object.keys(t),r=Object.keys(e);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!S.call(e,n[o])||!C(t[n[o]],e[n[o]]))return!1;return!0}function F(t){return function(e,n){var r=t(e,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function O(t){return null!==t.dependsOnOwnProps&&void 0!==t.dependsOnOwnProps?Boolean(t.dependsOnOwnProps):1!==t.length}function P(t,e){return function(e,n){n.displayName;var r=function(t,e){return r.dependsOnOwnProps?r.mapToProps(t,e):r.mapToProps(t)};return r.dependsOnOwnProps=!0,r.mapToProps=function(e,n){r.mapToProps=t,r.dependsOnOwnProps=O(t);var o=r(e,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=O(o),o=r(e,n)),o},r}}var E=[function(t){return"function"==typeof t?P(t):void 0},function(t){return t?void 0:F(function(t){return{dispatch:t}})},function(t){return t&&"object"==typeof t?F(function(e){return Object(l.bindActionCreators)(t,e)}):void 0}];var j=[function(t){return"function"==typeof t?P(t):void 0},function(t){return t?void 0:F(function(){return{}})}];function I(t,e,n){return v({},n,t,e)}var k=[function(t){return"function"==typeof t?function(t){return function(e,n){n.displayName;var r,o=n.pure,i=n.areMergedPropsEqual,a=!1;return function(e,n,l){var s=t(e,n,l);return a?o&&i(s,r)||(r=s):(a=!0,r=s),r}}}(t):void 0},function(t){return t?void 0:function(){return I}}];function L(t,e,n,r){return function(o,i){return n(t(o,i),e(r,i),i)}}function M(t,e,n,r,o){var i,a,l,s,c,u=o.areStatesEqual,d=o.areOwnPropsEqual,f=o.areStatePropsEqual,h=!1;function p(o,h){var p,v,y=!d(h,a),g=!u(o,i);return i=o,a=h,y&&g?(l=t(i,a),e.dependsOnOwnProps&&(s=e(r,a)),c=n(l,s,a)):y?(t.dependsOnOwnProps&&(l=t(i,a)),e.dependsOnOwnProps&&(s=e(r,a)),c=n(l,s,a)):g?(p=t(i,a),v=!f(p,l),l=p,v&&(c=n(l,s,a)),c):c}return function(o,u){return h?p(o,u):(l=t(i=o,a=u),s=e(r,a),c=n(l,s,a),h=!0,c)}}function N(t,e){var n=e.initMapStateToProps,r=e.initMapDispatchToProps,o=e.initMergeProps,i=y(e,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),a=n(t,i),l=r(t,i),s=o(t,i);return(i.pure?M:L)(a,l,s,t,i)}function D(t,e,n){for(var r=e.length-1;r>=0;r--){var o=e[r](t);if(o)return o}return function(e,r){throw new Error("Invalid value of type "+typeof t+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function K(t,e){return t===e}var U,A,z,R,W,B,G,V,Y,$,Q,X,Z=(z=(A=void 0===U?{}:U).connectHOC,R=void 0===z?w:z,W=A.mapStateToPropsFactories,B=void 0===W?j:W,G=A.mapDispatchToPropsFactories,V=void 0===G?E:G,Y=A.mergePropsFactories,$=void 0===Y?k:Y,Q=A.selectorFactory,X=void 0===Q?N:Q,function(t,e,n,r){void 0===r&&(r={});var o=r,i=o.pure,a=void 0===i||i,l=o.areStatesEqual,s=void 0===l?K:l,c=o.areOwnPropsEqual,u=void 0===c?T:c,d=o.areStatePropsEqual,f=void 0===d?T:d,h=o.areMergedPropsEqual,p=void 0===h?T:h,g=y(o,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),m=D(t,B,"mapStateToProps"),b=D(e,V,"mapDispatchToProps"),_=D(n,$,"mergeProps");return R(X,v({methodName:"connect",getDisplayName:function(t){return"Connect("+t+")"},shouldHandleStateChanges:Boolean(t),initMapStateToProps:m,initMapDispatchToProps:b,initMergeProps:_,pure:a,areStatesEqual:s,areOwnPropsEqual:u,areStatePropsEqual:f,areMergedPropsEqual:p},g))}),J="CREATE_OBJECT",H="MOVE_OBJECT",q="TURN_OBJECT",tt="DELETE_OBJECT",et="UPDATE_USER",nt="CHANGE_OBJECTS_LEVEL",rt="CHANGE_CORRECT_LOCATION",ot="CHANGE_ANY_OBJECT_DATA",it="SHIFT_OBJECTS",at="CHANGE_BOARD_STATE",lt="CHANGE_CURRENT_OBJECT",st="CHANGE_CURRENT_USER",ct="CHANGE_CURRENT_OBJECT_STATE",ut="CHANGE_MAP_LEVEL",dt="ADD_USER",ft="EDIT_USER",ht="DELETE_USER",pt="CHANGE_WORK_MODE",vt=n(5);function yt(t){return function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var gt={mapLevel:1,levels:n(8).cloneDeep(vt).levels.map(function(t){return t.objects})};var mt={shift:[4,4],scale:.244};function bt(t){return function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var _t=n(8).cloneDeep(vt.users);var xt={objectId:"",userId:"",state:"none"};var wt=n(8),St=wt.cloneDeep(vt.levels[1].covering),Ct={mapLevel:1,title:vt.levels[1].title,blockSnapSize:vt.levels[1].levelCellSize,mapWidth:vt.levels[1].levelMapWidth,mapHeight:vt.levels[1].levelMapHeight,mapBoundaries:vt.levels[1].boundaries,mapCovering:St};var Tt="SINGLE_EDIT",Ft="MULTI_EDIT",Ot=Tt;var Pt=Object(l.combineReducers)({workMode:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Ot,e=arguments.length>1?arguments[1]:void 0;switch(e.type){case pt:return e.payload;default:return t}},boardState:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:mt,e=arguments.length>1?arguments[1]:void 0;switch(e.type){case at:return e.payload;default:return t}},mapState:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Ct,e=arguments.length>1?arguments[1]:void 0;switch(e.type){case ut:var n=e.payload,r=wt.cloneDeep(vt.levels[n].covering);return{mapLevel:n,title:vt.levels[n].title,blockSnapSize:vt.levels[n].levelCellSize,mapWidth:vt.levels[n].levelMapWidth,mapHeight:vt.levels[n].levelMapHeight,mapBoundaries:vt.levels[n].boundaries,mapCovering:r};default:return t}},currentObject:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:xt,e=arguments.length>1?arguments[1]:void 0;switch(e.type){case lt:return{objectId:e.payload,userId:t.userId,state:t.state};case st:return{objectId:t.objectId,userId:e.payload,state:t.state};case ct:return{objectId:t.objectId,userId:t.userId,state:e.payload};default:return t}},users:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:_t,e=arguments.length>1?arguments[1]:void 0;switch(e.type){case dt:return[e.payload].concat(bt(t));case ft:var n=e.payload.id,r=e.payload,o=t.slice(0),i=o.find(function(t){return t.id===n});return void 0!==i&&Object.keys(r).forEach(function(t){"id"!==t&&"category"!==t&&(i[t]=r[t])}),o;case ht:var a=e.payload;return t.filter(function(t){return t.id!==a});default:return t}},objects:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:gt,e=arguments.length>1?arguments[1]:void 0;switch(e.type){case J:var n=t.mapLevel,r=t.levels.slice(0);return r[n]=[].concat(yt(t.levels[n]),[e.payload]),{mapLevel:n,levels:r};case tt:var o=t.mapLevel,i=t.levels.slice(0),a=e.payload;return i[o]=i[o].filter(function(t){return t.id!==a}),{mapLevel:o,levels:i};case H:var l=t.mapLevel,s=t.levels.slice(0),c=e.payload.id,u=e.payload.pos,d=s[l].find(function(t){return t.id===c});return void 0!==d&&(d.coordinates=u),{mapLevel:l,levels:s};case rt:var f=t.mapLevel,h=t.levels.slice(0),p=e.payload.id,v=e.payload.corrLoc,y=h[f].find(function(t){return t.id===p});return void 0!==y&&(y.correctLocation=v),{mapLevel:f,levels:h};case q:var g=t.mapLevel,m=t.levels.slice(0),b=e.payload,_=m[g].find(function(t){return t.id===b});if(void 0!==_){var x=_.width;_.width=_.height,_.height=x}return{mapLevel:g,levels:m};case nt:return{mapLevel:e.payload,levels:t.levels};case et:var w=t.mapLevel,S=t.levels.slice(0),C=e.payload.id,T=e.payload.userId,F=S[w].find(function(t){return t.id===C});return void 0!==F&&(F.userId=T),{mapLevel:w,levels:S};case ot:var O=t.mapLevel,P=t.levels.slice(0),E=e.payload,j=P[O].find(function(t){return t.id===E.id});return void 0!==j&&Object.keys(E).forEach(function(t){j[t]=E[t]}),{mapLevel:O,levels:P};case it:var I=t.mapLevel,k=t.levels.slice(0),L=e.payload.ids.split(" "),M=e.payload.shift;return k[I].forEach(function(t){L.includes(t.id)&&(t.coordinates={x:t.coordinates.x+M.x,y:t.coordinates.y+M.y})}),{mapLevel:I,levels:k};default:return t}}}),Et=n(4),jt=function(t){return{type:J,payload:t}},It=function(t){return{type:H,payload:t}},kt=function(t){return{type:q,payload:t}},Lt=function(t){return{type:tt,payload:t}},Mt=function(t){return{type:et,payload:t}},Nt=function(t){return{type:nt,payload:t}},Dt=function(t){return{type:rt,payload:t}},Kt=function(t){return{type:ot,payload:t}},Ut=function(t){return{type:it,payload:t}},At=function(t){return{type:ut,payload:t}},zt=function(t){return{type:at,payload:t}},Rt=function(t){return{type:lt,payload:t}},Wt=function(t){return{type:st,payload:t}},Bt=function(t){return{type:ct,payload:t}},Gt=function(t){return{type:dt,payload:t}},Vt=function(t){return{type:ft,payload:t}},Yt=function(t){return{type:ht,payload:t}},$t=function(t){return{type:pt,payload:t}},Qt={delete:{path:["M174.239,31.452h-16.42h-41.773V0.319H58.204v31.133H16.42H0v16.335h16.42V173.92h141.399V47.787h16.42V31.452z    M74.539,16.654h25.172v14.798H74.539V16.654z M141.484,157.585H32.755V47.787h25.449h57.842h25.438V157.585z"],viewBox:"0 0 174.239 174.239"},edit:{path:["M124.891,57.896c2.269,1.589,2.823,4.743,1.232,7.01l-64.835,92.396c-1.591,2.267-5.05,4.813-7.688,5.657l-30.499,9.763 c-2.638,0.844-4.885-0.729-4.993-3.496l-1.257-31.999c-0.109-2.767,1.104-6.886,2.695-9.153L84.38,35.677 c1.591-2.267,4.748-2.822,7.017-1.234L124.891,57.896z","M148.248,24.358c2.269,1.589,2.825,4.744,1.237,7.013l-9.239,13.194c-1.589,2.269-4.744,2.825-7.013,1.237L99.739,22.349 c-2.269-1.589-2.825-4.744-1.237-7.013l9.239-13.194c1.589-2.269,4.744-2.825,7.013-1.237L148.248,24.358z","M157.395,168.947c0,2.77-2.266,5.044-5.035,5.054l-64.924,0.238c-2.769,0.01-3.733-1.835-2.14-4.101l17.637-25.098 c1.592-2.266,5.161-4.132,7.93-4.147l41.497-0.221c2.769-0.015,5.035,2.239,5.035,5.009V168.947z","M157.395,124.769c0,2.769-2.266,5.049-5.035,5.065l-36.261,0.215c-2.769,0.016-3.733-1.824-2.14-4.09l17.637-25.098 c1.592-2.266,5.161-4.147,7.93-4.18l12.835-0.154c2.769-0.033,5.035,2.205,5.035,4.975V124.769z"],viewBox:"0 0 174.239 174.239"},ready:{path:["M87.12,0C39.082,0,0,39.082,0,87.12s39.082,87.12,87.12,87.12s87.12-39.082,87.12-87.12S135.157,0,87.12,0z M87.12,159.305 c-39.802,0-72.185-32.383-72.185-72.185S47.318,14.935,87.12,14.935s72.185,32.383,72.185,72.185S126.921,159.305,87.12,159.305z","M131.55,59.413c-3.231-2.562-7.927-2.027-10.491,1.211L86.694,103.95L66.132,82.015c-2.812-3.014-7.543-3.155-10.555-0.345 c-3.009,2.825-3.162,7.55-0.34,10.555l26.481,28.251c1.415,1.512,3.389,2.363,5.447,2.363c0.102,0,0.204,0,0.309-0.005 c2.168-0.092,4.193-1.123,5.542-2.825L132.76,69.9C135.322,66.672,134.78,61.976,131.55,59.413z"],viewBox:"0 0 174.239 174.239"},turn:{path:["M96.033,79.444c0-1.497,0-5.173,0-8.168v-5.538c0-2.995,2.049-4.102,4.554-2.46l34.298,27.462 c2.505,1.642,2.507,4.332,0.005,5.978l-34.309,27.557c-2.502,1.646-4.548,0.543-4.548-2.452v-5.66c0-2.995,0-6.67,0-8.167 c0-1.497-2.436-2.461-5.414-2.142c0,0-49.807,5.33-49.807,68.384h127.983c2.995,0,5.445-2.45,5.445-5.445V5.445 c0-2.995-2.45-5.445-5.445-5.445H5.445C2.45,0,0,2.45,0,5.445v111.209c0,2.995,0,7.895,0,10.89v5.443 c21.188-52.6,90.59-50.949,90.59-50.949C93.584,82.108,96.033,80.942,96.033,79.444z"],viewBox:"0 0 174.239 174.239"},copy:{path:["M314.25,85.4h-227c-21.3,0-38.6,17.3-38.6,38.6v325.7c0,21.3,17.3,38.6,38.6,38.6h227c21.3,0,38.6-17.3,38.6-38.6V124    C352.75,102.7,335.45,85.4,314.25,85.4z M325.75,449.6c0,6.4-5.2,11.6-11.6,11.6h-227c-6.4,0-11.6-5.2-11.6-11.6V124    c0-6.4,5.2-11.6,11.6-11.6h227c6.4,0,11.6,5.2,11.6,11.6V449.6z","M401.05,0h-227c-21.3,0-38.6,17.3-38.6,38.6c0,7.5,6,13.5,13.5,13.5s13.5-6,13.5-13.5c0-6.4,5.2-11.6,11.6-11.6h227    c6.4,0,11.6,5.2,11.6,11.6v325.7c0,6.4-5.2,11.6-11.6,11.6c-7.5,0-13.5,6-13.5,13.5s6,13.5,13.5,13.5c21.3,0,38.6-17.3,38.6-38.6    V38.6C439.65,17.3,422.35,0,401.05,0z"],viewBox:"0 0 488.3 488.3"},user:{path:["M18.613,41.552l-7.907,4.313c-0.464,0.253-0.881,0.564-1.269,0.903C14.047,50.655,19.998,53,26.5,53  c6.454,0,12.367-2.31,16.964-6.144c-0.424-0.358-0.884-0.68-1.394-0.934l-8.467-4.233c-1.094-0.547-1.785-1.665-1.785-2.888v-3.322  c0.238-0.271,0.51-0.619,0.801-1.03c1.154-1.63,2.027-3.423,2.632-5.304c1.086-0.335,1.886-1.338,1.886-2.53v-3.546  c0-0.78-0.347-1.477-0.886-1.965v-5.126c0,0,1.053-7.977-9.75-7.977s-9.75,7.977-9.75,7.977v5.126  c-0.54,0.488-0.886,1.185-0.886,1.965v3.546c0,0.934,0.491,1.756,1.226,2.231c0.886,3.857,3.206,6.633,3.206,6.633v3.24  C20.296,39.899,19.65,40.986,18.613,41.552z","M26.953,0.004C12.32-0.246,0.254,11.414,0.004,26.047C-0.138,34.344,3.56,41.801,9.448,46.76   c0.385-0.336,0.798-0.644,1.257-0.894l7.907-4.313c1.037-0.566,1.683-1.653,1.683-2.835v-3.24c0,0-2.321-2.776-3.206-6.633   c-0.734-0.475-1.226-1.296-1.226-2.231v-3.546c0-0.78,0.347-1.477,0.886-1.965v-5.126c0,0-1.053-7.977,9.75-7.977   s9.75,7.977,9.75,7.977v5.126c0.54,0.488,0.886,1.185,0.886,1.965v3.546c0,1.192-0.8,2.195-1.886,2.53   c-0.605,1.881-1.478,3.674-2.632,5.304c-0.291,0.411-0.563,0.759-0.801,1.03V38.8c0,1.223,0.691,2.342,1.785,2.888l8.467,4.233   c0.508,0.254,0.967,0.575,1.39,0.932c5.71-4.762,9.399-11.882,9.536-19.9C53.246,12.32,41.587,0.254,26.953,0.004z"],viewBox:"0 0 53 53"},table:{path:["m480 55.847656c-.023438-.925781-.207031-1.839844-.542969-2.703125-.097656-.222656-.203125-.445312-.320312-.65625-.132813-.316406-.28125-.628906-.449219-.929687l-32-48c-1.488281-2.234375-4-3.5703128-6.6875-3.558594h-400c-2.675781 0-5.171875 1.335938-6.65625 3.558594l-32 48c-.167969.300781-.316406.613281-.449219.929687-.117187.210938-.222656.433594-.320312.65625-.347657.859375-.542969 1.773438-.574219 2.703125v.152344 48c0 4.417969 3.582031 8 8 8h8v216c0 4.417969 3.582031 8 8 8h48c4.417969 0 8-3.582031 8-8v-184h320v184c0 4.417969 3.582031 8 8 8h48c4.417969 0 8-3.582031 8-8v-216h8c4.417969 0 8-3.582031 8-8v-48c0-.054688 0-.097656 0-.152344zm-435.71875-39.847656h391.4375l21.335938 32h-434.109376zm403.71875 304h-32v-184c0-4.417969-3.582031-8-8-8h-336c-4.417969 0-8 3.582031-8 8v184h-32v-208h416zm16-224h-448v-32h448zm0 0"],viewBox:"0 -72 480 480"},cupboard:{path:["M364.48,0H126.507c-27.627,0-51.84,24.32-51.84,51.947v356.16c0,24.32,18.773,45.227,42.667,49.6V480     c0,5.867,4.8,10.667,10.667,10.667c5.867,0,10.667-4.8,10.667-10.667v-21.333H352V480c0,5.867,4.8,10.667,10.667,10.667     c5.867,0,10.667-4.8,10.667-10.667v-22.293c23.893-4.267,42.667-25.173,42.667-49.6V51.947C416,24.32,391.893,0,364.48,0z      M234.667,437.333h-108.16c-16,0-30.507-13.867-30.507-29.227V51.947c0-15.68,14.827-30.613,30.507-30.613h108.16V437.333z      M394.667,408.107c0,15.573-14.08,29.227-30.187,29.227H256v-416h108.48c15.573,0,30.187,14.933,30.187,30.613V408.107z","M202.667,256c5.867,0,10.667-4.8,10.667-10.667v-64c0-5.867-4.8-10.667-10.667-10.667c-5.867,0-10.667,4.8-10.667,10.667     v64C192,251.2,196.8,256,202.667,256z","M288,170.667c-5.867,0-10.667,4.8-10.667,10.667v64c0,5.867,4.8,10.667,10.667,10.667c5.867,0,10.667-4.8,10.667-10.667     v-64C298.667,175.467,293.867,170.667,288,170.667z"],viewBox:"0 0 490.667 490.667"},printer:{path:["m8 336h56v24c0 4.417969 3.582031 8 8 8h240c4.417969 0 8-3.582031 8-8v-24h56c4.417969 0 8-3.582031 8-8v-152c0-17.671875-14.328125-32-32-32h-40v-56c0-4.417969-3.582031-8-8-8h-24v-72c0-4.417969-3.582031-8-8-8h-160c-4.417969 0-8 3.582031-8 8v72h-24c-4.417969 0-8 3.582031-8 8v56h-40c-17.671875 0-32 14.328125-32 32v152c0 4.417969 3.582031 8 8 8zm288-72v24h-24v-48c13.253906 0 24 10.746094 24 24zm-168 8h128v16h-128zm128-16h-128v-16h128zm-144 8v24h-24v-24c0-13.253906 10.746094-24 24-24zm-25.753906 40h211.507812l4 16h-219.507812zm217.753906 48h-224v-16h224zm-8-256v48h-16v-48zm-176-80h144v128h-144zm-32 80h16v48h-16zm-72 80c0-8.835938 7.164062-16 16-16h320c8.835938 0 16 7.164062 16 16v144h-49.761719l-6.238281-24.976562v-31.023438c-.027344-22.082031-17.917969-39.972656-40-40h-160c-22.082031.027344-39.972656 17.917969-40 40v31.023438l-6.238281 24.976562h-49.761719zm0 0","m144 48h96v16h-96zm0 0","m144 80h96v16h-96zm0 0","m144 112h96v16h-96zm0 0","m304 192h16v16h-16zm0 0","m336 192h16v16h-16zm0 0"],viewBox:"0 -8 384 384"},scaner:{path:["m443.214844 0h-374.429688l-30 30h-38.785156v180h30v272h-30v30h512v-30h-30v-272h30v-180h-38.785156zm-383.214844 482v-30h392v30zm392-60h-392v-212h30v150h332v-150h30zm-60-272v180h-272v-180zm90 30h-60v-30h30v-30h-392v30h30v30h-60v-120h21.214844l30-30h349.570312l30 30h21.214844zm0 0","m150 270h212v30h-212zm0 0","m150 210h212v30h-212zm0 0","m90 60h30v30h-30zm0 0","m150 60h30v30h-30zm0 0","m332 60h90v30h-90zm0 0"],viewBox:"0 0 512 512"},shredder:{path:["m337.21875 62.605469h-163.714844c-8.285156 0-15 6.714843-15 15 0 8.285156 6.714844 15 15 15h163.714844c8.285156 0 15-6.714844 15-15 0-8.285157-6.714844-15-15-15zm0 0","m337.21875 124.019531h-170.511719c-8.285156 0-15 6.71875-15 15 0 8.285157 6.714844 15 15 15h170.511719c8.285156 0 15-6.714843 15-15 0-8.28125-6.714844-15-15-15zm0 0","m481.851562 212.910156h-62.292968v-197.410156c0-8.285156-6.714844-15-15-15h-305.191406c-8.28125 0-15 6.714844-15 15v197.410156h-54.222657c-16.648437 0-30.144531 13.496094-30.144531 30.144532v95.292968c0 16.648438 13.496094 30.148438 30.144531 30.148438h65.585938v19.707031c0 24.5625-14.984375 45.695313-35.691407 50.414063-7.980468 1.820312-13.445312 9.5-11.910156 17.542968 1.382813 7.230469 7.691406 12.199219 14.722656 12.199219 1.054688 0 2.132813-.113281 3.207032-.347656 16.695312-3.636719 31.875-13.554688 42.734375-27.933594 11.082031-14.664063 16.9375-32.601563 16.9375-51.875v-19.707031h31.261719v37.226562c0 29.707032-10.898438 48.472656-32.386719 55.773438-7.84375 2.667968-12.042969 11.1875-9.375 19.03125 2.121093 6.246094 7.953125 10.175781 14.199219 10.175781 1.601562 0 3.230468-.257813 4.828124-.800781 34.003907-11.558594 52.730469-41.453125 52.730469-84.179688v-37.226562h22.152344v54.902344c0 22.636718-3.292969 39.464843-6.59375 49.917968-2.050781 6.503906.53125 13.566406 6.300781 17.203125 8.308594 5.234375 19.289063 1.191407 22.285156-8.164062 3.976563-12.429688 8.007813-31.742188 8.007813-58.960938v-54.898437h27.945313v54.902344c0 27.21875 4.035156 46.53125 8.011718 58.960937 2.996094 9.351563 13.972656 13.394531 22.285156 8.160156 5.769532-3.636719 8.351563-10.699219 6.300782-17.203125-3.300782-10.453125-6.597656-27.28125-6.597656-49.917968v-54.902344h22.152343v37.226562c0 42.726563 18.730469 72.621094 52.734375 84.179688 1.597656.542968 3.226563.800781 4.828125.800781 6.382813 0 12.335938-4.109375 14.335938-10.59375 2.414062-7.832031-2.203125-16.054687-9.9375-18.757813-21.207031-7.40625-31.960938-26.121093-31.960938-55.625v-37.230468h31.257813v19.707031c0 19.273437 5.859375 37.214844 16.941406 51.878906 10.859375 14.375 26.039062 24.292969 42.734375 27.929688 1.074219.234375 2.148437.347656 3.207031.347656 7.027344 0 13.34375-4.96875 14.722656-12.199219 1.53125-8.042968-3.929687-15.722656-11.914062-17.539062-20.703125-4.71875-35.691406-25.855469-35.691406-50.417969v-19.707031h71.355468c16.648438 0 30.144532-13.496094 30.144532-30.148438v-95.292968c.003906-16.648438-13.492188-30.144532-30.144532-30.144532zm-367.484374-182.410156h275.191406v182.410156h-275.191406zm367.632812 307.847656c0 .082032-.066406.148438-.144531.148438h-451.710938c-.078125 0-.144531-.066406-.144531-.148438v-95.292968c0-.082032.066406-.144532.144531-.144532h451.707031c.082032 0 .148438.0625.148438.144532zm0 0","m98.191406 275.703125h-36.089844c-8.28125 0-15 6.714844-15 15s6.71875 15 15 15h36.089844c8.285156 0 15-6.714844 15-15s-6.714844-15-15-15zm0 0","m394.574219 290.703125c0-8.855469-7.128907-16.03125-15.921875-16.03125-8.792969 0-15.921875 7.175781-15.921875 16.03125 0 8.851563 7.128906 16.03125 15.921875 16.03125 8.792968 0 15.921875-7.179687 15.921875-16.03125zm0 0","m456.140625 290.703125c0-8.855469-7.128906-16.03125-15.921875-16.03125-8.796875 0-15.921875 7.175781-15.921875 16.03125 0 8.851563 7.125 16.03125 15.921875 16.03125 8.792969 0 15.921875-7.179687 15.921875-16.03125zm0 0"],viewBox:"0 -9 511.997 511"},meeting_room:{path:["m463.800781 362.601562v-5.796874c0-34.847657-28.351562-63.199219-63.199219-63.199219-19.300781 0-36.597656 8.707031-48.199218 22.386719-11.601563-13.679688-28.898438-22.386719-48.203125-22.386719-19.300781 0-36.597657 8.707031-48.199219 22.386719-11.601562-13.679688-28.898438-22.386719-48.199219-22.386719s-36.597656 8.707031-48.199219 22.386719c-11.601562-13.679688-28.898437-22.386719-48.199218-22.386719-34.847656 0-63.199219 28.351562-63.199219 63.199219v5.796874c-27.632813 6.753907-48.203125 31.707032-48.203125 61.386719v88.011719h512v-88.011719c0-29.679687-20.570312-54.632812-48.199219-61.386719zm-63.199219-38.996093c18.304688 0 33.199219 14.894531 33.199219 33.199219v5.796874c-13.15625 3.21875-24.707031 10.558594-33.199219 20.574219-8.496093-10.015625-20.046874-17.359375-33.199218-20.574219v-5.796874c-.003906-18.304688 14.890625-33.199219 33.199218-33.199219zm-96.402343 0c18.308593 0 33.199219 14.894531 33.199219 33.199219v5.796874c-13.15625 3.21875-24.703126 10.558594-33.199219 20.574219-8.496094-10.015625-20.042969-17.359375-33.199219-20.574219v-5.796874c0-18.304688 14.894531-33.199219 33.199219-33.199219zm-96.398438 0c18.304688 0 33.199219 14.894531 33.199219 33.199219v5.796874c-13.15625 3.21875-24.703125 10.558594-33.199219 20.574219-8.496093-10.015625-20.042969-17.359375-33.199219-20.574219v-5.796874c0-18.304688 14.890626-33.199219 33.199219-33.199219zm-96.402343 0c18.308593 0 33.199218 14.894531 33.199218 33.199219v5.796874c-13.15625 3.21875-24.703125 10.558594-33.199218 20.574219-8.492188-10.015625-20.042969-17.359375-33.199219-20.574219v-5.796874c0-18.304688 14.894531-33.199219 33.199219-33.199219zm-15 158.394531h-66.398438v-58.011719c0-18.304687 14.894531-33.199219 33.199219-33.199219 18.308593 0 33.199219 14.894532 33.199219 33.199219zm96.402343 0h-66.402343v-58.011719c0-18.304687 14.894531-33.199219 33.199218-33.199219 18.308594 0 33.203125 14.894532 33.203125 33.199219zm96.398438 0h-66.398438v-58.011719c0-18.304687 14.894531-33.199219 33.199219-33.199219s33.199219 14.894532 33.199219 33.199219zm96.402343 0h-66.402343v-58.011719c0-18.304687 14.894531-33.199219 33.199219-33.199219 18.308593 0 33.199218 14.894532 33.199218 33.199219v58.011719zm96.398438 0h-66.398438v-58.011719c0-18.304687 14.890626-33.199219 33.199219-33.199219 18.304688 0 33.199219 14.894532 33.199219 33.199219zm0 0","m0 0v261.773438h512v-261.773438zm482 231.773438h-452v-201.773438h452zm0 0","m242.675781 100.523438v64.085937l48.589844-32.042969zm0 0","m195.003906 183.757812c13.671875 16.292969 32.871094 26.285157 54.0625 28.140626 2.367188.207031 4.722656.308593 7.070313.308593 18.671875 0 36.582031-6.496093 51.054687-18.640625 16.292969-13.675781 26.285156-32.875 28.136719-54.0625 1.855469-21.191406-4.65625-41.832031-18.328125-58.125-13.675781-16.292968-32.875-26.289062-54.0625-28.140625-21.195312-1.855469-41.835938 4.65625-58.128906 18.332031-16.292969 13.671876-26.285156 32.871094-28.136719 54.0625-1.855469 21.1875 4.65625 41.832032 18.332031 58.125zm29.089844-89.207031c9.023438-7.574219 20.183594-11.621093 31.820312-11.621093 1.464844 0 2.933594.066406 4.40625.195312 13.207032 1.152344 25.175782 7.382812 33.695313 17.535156 8.523437 10.15625 12.582031 23.023438 11.425781 36.230469-1.152344 13.207031-7.382812 25.171875-17.535156 33.695313-10.15625 8.523437-23.027344 12.582031-36.230469 11.425781-13.207031-1.15625-25.171875-7.382813-33.695312-17.539063-17.589844-20.964844-14.847657-52.332031 6.113281-69.921875zm0 0"],viewBox:"0 0 512 512"},public_place:{path:["M422.951,368.901l-16.8-58.4c-0.4-1.2-1.2-2.4-2-3.2c-10.4-31.6-36-56-68.4-64.4l-4.8-0.8c-7.2-2-15.2,0.4-20.4,6.4    c-17.6,20-40,21.6-63.6,21.6c-23.6,0-46-1.6-63.6-21.6c-5.2-6-13.2-8.4-20.4-6.4l-4.8,1.2c-24.4,6.4-45.2,22-58.4,42.8h-50.4    c-0.4,0-0.4,0-0.8-0.4c0-0.4-0.4-0.8-0.4-1.6l10.4-37.2c9.2-29.2,26.8-38,61.2-46.8c1.6-0.4,2.8-1.2,3.6-2c2.8,2.4,6,4.4,9.2,6    c1.2,0.8,2.4,0.8,3.6,0.8c2.8,0,5.6-1.6,7.2-4.4c2-4,0.4-8.8-3.6-10.8c-18.4-9.6-31.6-36.8-31.6-64.8c0-24.8,20.4-45.2,45.2-45.2    c4.8,0,9.2,0.8,13.6,2c-4.4,10.8-6.8,22.4-6.8,34.8c0,68.4,41.2,126,90,126c48,0,90.4-58.8,90.4-126c0-50-40.4-90.4-90.4-90.4    c-31.6,0-59.6,16.4-75.6,41.2c-6.8-2.4-14-3.6-21.2-3.6c-21.6,0-40.8,11.6-51.6,28.8c-0.8-0.8-1.6-1.2-2.4-1.6    c-6-3.2-12-4.4-18.8-4.4c-22.4-0.4-40.4,17.6-40.4,40c0,12.8,3.6,24.8,9.2,34.4c-18.4,4.8-34.8,12-42.4,36.4l-6.4,23.2    c-1.2,4-0.4,8.4,2,11.6c2.4,3.6,6.8,5.6,11.2,5.6h30.8c-0.4,1.6-1.2,3.2-1.6,4.8l-10.4,37.6c-1.6,5.2-0.4,10.8,3.2,15.2    c3.2,4.4,8,6.8,13.6,6.8h42.4c-1.2,2.8-2,5.6-2.8,8.4l-16.8,58.8c-1.6,6.8-0.4,14,4,19.6c4.4,5.6,10.8,8.8,17.6,8.8h240h13.6h54    c6.8,0,13.6-3.2,17.6-8.8C423.351,383.301,424.951,376.101,422.951,368.901z M184.151,82.901c0.4-0.4,0.8-0.8,1.2-1.6    c0.4-0.4,0.4-1.2,0.8-1.6c12.4-22.4,36.4-37.6,64-37.6c33.2,0,61.2,22,70.8,52c-14,2.8-28.8-2.8-37.6-14.8    c-2.8-3.6-7.6-4.4-11.2-1.6c-1.6,1.2-2.4,2.4-2.8,4c-0.4,0.4-0.4,0.8-0.8,1.2c-11.2,22.8-48.8,32.4-91.6,24    C178.151,98.501,180.551,90.501,184.151,82.901z M206.551,125.701c32,0,58.4-10,72-28.8c10,8.8,22.4,13.6,35.6,13.6    c3.2,0,6.8-0.4,10-1.2c0.4,2.4,0.4,4.4,0.4,6.8c0,58.8-34.8,110.4-74.4,110.4c-38,0-71.2-47.6-74-103.6    C186.551,124.901,196.951,125.701,206.551,125.701z M16.951,221.701l5.6-20c4.8-16.4,14.8-21.2,34.8-26c1.2-0.4,2.4-0.8,3.2-1.6    c2,1.6,3.6,2.8,6,4c1.2,0.8,2.4,0.8,3.6,0.8c2.8,0,5.6-1.6,7.2-4.4c2-4,0.4-8.8-3.2-10.8c-10.4-5.6-18-21.2-18-37.2    c0-13.6,10.8-24.4,24.4-24.4c4.4,0,8,0.8,11.6,2.8c1.2,0.4,2,0.8,3.2,0.8c-2,6-3.2,12.4-3.2,19.2c0,22.8,7.6,45.2,19.6,60.8    c-24,6-45.2,14-59.2,36H16.951z M406.551,379.301c-0.8,0.8-2.4,2.4-5.2,2.4h-54h-13.6h-240c-2.8,0-4.4-1.6-5.2-2.4    c-1.2-1.6-1.6-4-1.2-5.6l16.8-58.4c8-27.6,30-49.2,58-56.4l4.8-1.2c1.2-0.4,3.2,0.4,4.4,1.6c22,25.2,49.2,27.2,75.6,27.2    c26.4,0,53.6-2,75.6-27.2c1.2-1.2,2.8-2,4.8-1.6l4.8,1.2c27.6,7.2,50,28.8,58,56.4l7.2,24.8c0.4,1.2,0.8,2,1.6,2.8l8.8,30.4    C408.151,375.301,407.751,377.701,406.551,379.301z"],viewBox:"0 0 423.803 423.803"},service_room:{path:["M40.5,23V11.601C40.5,5.204,34.893,0,28,0S15.5,5.204,15.5,11.601V23h-9v26v8h44v-8V23H40.5z M17.5,11.601   C17.5,6.307,22.21,2,28,2s10.5,4.307,10.5,9.601V23h-21V11.601z M48.5,55h-40v-4h40V55z M8.5,49V25h7h25h8v24H8.5z","M28.5,31c-2.206,0-4,1.794-4,4v6c0,2.206,1.794,4,4,4s4-1.794,4-4v-6C32.5,32.794,30.706,31,28.5,31z M30.5,41   c0,1.103-0.897,2-2,2s-2-0.897-2-2v-6c0-1.103,0.897-2,2-2s2,0.897,2,2V41z"],viewBox:"0 0 57 57"},construction:{path:["M340.101,156.218L300.813,68.66c-4.417-9.844-13.854-15.959-24.63-15.959c-11.446,0-21.404,6.929-25.368,17.653   l-32.361,87.559c-3.063,8.286-1.876,17.561,3.173,24.81c5.05,7.249,13.338,11.577,22.173,11.577h28.326v27.337h-18.571   c-4.143,0-7.5,3.357-7.5,7.5v61.04c0,18.367,14.943,33.311,33.311,33.311h0.521c18.367,0,33.311-14.943,33.311-33.311v-61.04   c0-4.143-3.357-7.5-7.5-7.5h-18.571v-27.337h28.321c9.202,0,17.683-4.612,22.684-12.337   C343.131,174.238,343.867,164.614,340.101,156.218z M298.197,290.176c0,10.097-8.214,18.311-18.311,18.311h-0.521   c-10.097,0-18.311-8.214-18.311-18.311v-53.54h37.143V290.176z M325.539,173.811c-2.259,3.488-5.937,5.488-10.092,5.488H243.8   c-3.989,0-7.585-1.877-9.864-5.15c-2.279-3.272-2.794-7.296-1.411-11.037l32.361-87.558c2.14-5.791,7.239-7.854,11.298-7.854   c4.858,0,8.949,2.653,10.944,7.1l39.287,87.559C328.116,166.149,327.796,170.324,325.539,173.811z","M229.92,236.636c4.143,0,7.5-3.357,7.5-7.5s-3.357-7.5-7.5-7.5H116.197c-4.143,0-7.5,3.357-7.5,7.5v79.688   c0,4.143,3.357,7.5,7.5,7.5H229.92c4.143,0,7.5-3.357,7.5-7.5s-3.357-7.5-7.5-7.5H123.697v-64.688H229.92z","M229.92,200.003h-39.162v-64.688h28.577c4.143,0,7.5-3.357,7.5-7.5c0-4.143-3.357-7.5-7.5-7.5h-36.077   c-4.143,0-7.5,3.357-7.5,7.5v79.688c0,4.143,3.357,7.5,7.5,7.5h46.662c4.143,0,7.5-3.357,7.5-7.5S234.063,200.003,229.92,200.003z","M116.197,113.682h104.468c4.143,0,7.5-3.357,7.5-7.5s-3.357-7.5-7.5-7.5h-96.968V33.995h191.275v46.154   c0,4.143,3.357,7.5,7.5,7.5s7.5-3.357,7.5-7.5V26.495c0-4.143-3.357-7.5-7.5-7.5H116.197c-4.143,0-7.5,3.357-7.5,7.5v79.688   C108.697,110.325,112.055,113.682,116.197,113.682z","M168.546,207.503v-79.688c0-4.143-3.357-7.5-7.5-7.5H7.5c-4.143,0-7.5,3.357-7.5,7.5v79.688c0,4.143,3.357,7.5,7.5,7.5   h153.546C165.188,215.003,168.546,211.646,168.546,207.503z M153.546,200.003H15v-64.688h138.546V200.003z"],viewBox:"0 0 342.481 342.481"}},Xt=n(7);function Zt(t){var e={scale:1,shiftX:0,shiftY:0};switch(t.category){case"table":e.scale=.025,e.shiftX=6,e.shiftY=4;break;case"cupboard":e.scale=.02,e.shiftX=5,e.shiftY=5;break;case"printer":e.scale=.03,e.shiftX=5.5,e.shiftY=5.5;break;case"scaner":case"shredder":case"meeting_room":e.scale=.02,e.shiftX=5,e.shiftY=5;break;case"public_place":e.scale=.028,e.shiftX=5.5,e.shiftY=5.5;break;case"service_room":e.scale=.2,e.shiftX=5.5,e.shiftY=5.5;break;case"construction":e.scale=0,e.shiftX=0,e.shiftY=0}return function(t,e){var n=e.width<e.height?e.width:e.height,r=1;return["table","cupboard","printer","scaner","shredder"].includes(e.category)&&(r=n/15),["meeting_room","public_place","service_room","construction"].includes(e.category)&&(r=n/2/15),{scale:t.scale*r,shiftX:t.shiftX*r,shiftY:t.shiftY*r}}(e,t)}function Jt(t){return(Jt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Ht(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function qt(t){return(qt=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function te(t,e){return(te=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function ee(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function ne(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var re=function(t){function e(t){var n,r,o;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),r=this,o=qt(e).call(this,t),n=!o||"object"!==Jt(o)&&"function"!=typeof o?ee(r):o,ne(ee(ee(n)),"showTooltipObjectInfo",function(t){var e=n.props,r=e.object,o=e.user,i=t.target.getStage().children[2],a=i.children[0];a.position({x:t.currentTarget.x(),y:t.currentTarget.y()});var l=Xt.find(function(t){return t.id===r.category}).title;"table"===r.category?(l+=" :\n",l+=void 0!==o?o.title:"пустой"):void 0!==r.title&&(l+=" :\n".concat(r.title)),a.getText().setText(l),a.show(),i.draw();var s=n.state.isDragging;n.setState({isPointed:!s})}),ne(ee(ee(n)),"hideTooltipObjectInfo",function(t){var e=t.target.getStage().children[2];e.children[0].hide(),e.draw(),n.setState({isPointed:!1})}),ne(ee(ee(n)),"handleObjectDragStart",function(t){var e=n.props,r=e.hideContextMenu,o=e.object,i=e.shareObjectData;n.setState({isDragging:!0}),t.currentTarget.moveToTop();var a=void 0===o.userId?"":o.userId;i(o.id,a),r()}),ne(ee(ee(n)),"handleObjectDragEnd",function(t){var e=n.props,r=e.showShadow,o=e.stopShadow,i=e.shareObjectData,a=e.blockSnapSize,l=e.object,s=n.checkBoundaries(t.currentTarget.x(),t.currentTarget.y()),c=s.checkedX,u=s.checkedY;t.currentTarget.position({x:Math.round(c/a)*a,y:Math.round(u/a)*a}),r(t.currentTarget.x(),t.currentTarget.y(),[l.width,l.height]);var d=void 0===l.userId?"":l.userId;i(l.id,d),o(),n.setState({isDragging:!1})}),ne(ee(ee(n)),"handleObjectDragMove",function(t){var e=n.props,r=e.showShadow,o=e.object;r(t.currentTarget.x(),t.currentTarget.y(),[o.width,o.height]),n.showTooltipObjectInfo(t)}),ne(ee(ee(n)),"handleObjectClick",function(t){var e=n.props,r=e.shareObjectData,o=e.object,i=void 0===o.userId?"":o.userId;r(o.id,i),t.currentTarget.moveToTop()}),ne(ee(ee(n)),"handleObjectContextMenu",function(t){var e=n.props,r=e.showContextMenu,o=e.openCurrentObjectTab;t.evt.preventDefault(),r(t.evt.clientX,t.evt.clientY),o()}),ne(ee(ee(n)),"handleObjectMouseMove",function(t){n.showTooltipObjectInfo(t)}),ne(ee(ee(n)),"handleObjectMouseOut",function(t){n.hideTooltipObjectInfo(t)});var i=t.object;return n.state={objectIcon:n.drawIcon(i),isPointed:!1,isDragging:!1},n}var n,r,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&te(t,e)}(e,o.a.PureComponent),n=e,(r=[{key:"componentDidMount",value:function(){var t=this.props;(0,t.checkObjectLocation)(t.object)}},{key:"componentDidUpdate",value:function(t){var e=this.props,n=e.checkObjectLocation,r=e.object;t.object.width===r.width&&t.object.height===r.height&&t.object.coordinates.x===r.coordinates.x&&t.object.coordinates.y===r.coordinates.y||(n(r),this.setState({objectIcon:this.drawIcon(r)}))}},{key:"drawIcon",value:function(t){var e=Zt(t),n=e.shiftX,r=e.shiftY,i=e.scale;return Qt[t.category].path.map(function(e,a){return o.a.createElement(Et.Path,{key:a,x:t.width/2-n,y:t.height/2-r,data:e,fill:"black",scale:{x:i,y:i}})})}},{key:"checkBoundaries",value:function(t,e){var n=this.props,r=n.mapWidth,o=n.mapHeight,i=n.object,a=t;a<=0?a=0:a>=r-i.width&&(a=r-i.width);var l=e;return l<=0?l=0:l>=o-i.height&&(a=o-i.height),{checkedX:a,checkedY:l}}},{key:"render",value:function(){var t=this.props,e=t.object,n=t.setColor,r=this.state,i=r.isPointed,a=r.objectIcon,l=e.userId;return o.a.createElement(Et.Group,{x:e.coordinates.x,y:e.coordinates.y,draggable:!0,onDragStart:this.handleObjectDragStart,onDragEnd:this.handleObjectDragEnd,onDragMove:this.handleObjectDragMove,onClick:this.handleObjectClick,onContextMenu:this.handleObjectContextMenu,onMouseEnter:this.handleObjectMouseMove,onMouseLeave:this.handleObjectMouseOut,name:"object",nameID:e.id},o.a.createElement(Et.Rect,{width:e.width,height:e.height,fill:n(e.id,e.correctLocation,e.color,l),opacity:i?.5:1,shadowColor:"black",shadowBlur:2,shadowOffset:{x:1,y:1},shadowOpacity:.4}),a)}}])&&Ht(n.prototype,r),i&&Ht(n,i),e}();function oe(t){return(oe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function ie(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function ae(t){return(ae=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function le(t,e){return(le=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function se(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function ce(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var ue=function(t){function e(t){var n,r,o;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),r=this,o=ae(e).call(this,t),n=!o||"object"!==oe(o)&&"function"!=typeof o?se(r):o,ce(se(se(n)),"showTooltipObjectInfo",function(t){var e=n.props.object,r=t.target.getStage().children[2],o=r.children[0];o.position({x:t.currentTarget.x(),y:t.currentTarget.y()});var i=Xt.find(function(t){return t.id===e.category}).title;void 0!==e.title&&(i+=" :\n".concat(e.title)),o.getText().setText(i),o.show(),r.draw(),n.setState({isPointed:!0})}),ce(se(se(n)),"hideTooltipObjectInfo",function(t){var e=t.target.getStage().children[2];e.children[0].hide(),e.draw(),n.setState({isPointed:!1})}),ce(se(se(n)),"handleObjectClick",function(t){var e=n.props,r=e.shareObjectData,o=e.object;r(o.id,o.userId),t.currentTarget.moveToTop()}),ce(se(se(n)),"handleObjectContextMenu",function(t){var e=n.props,r=e.showContextMenu,o=e.openCurrentObjectTab;t.evt.preventDefault(),r(t.evt.clientX,t.evt.clientY),o()}),ce(se(se(n)),"handleObjectMouseMove",function(t){n.showTooltipObjectInfo(t)}),ce(se(se(n)),"handleObjectMouseOut",function(t){n.hideTooltipObjectInfo(t)});var i=t.object;return n.state={objectIcon:n.drawIcon(i),isPointed:!1},n}var n,r,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&le(t,e)}(e,o.a.PureComponent),n=e,(r=[{key:"componentDidUpdate",value:function(t){var e=this.props.object;t.object.width===e.width&&t.object.height===e.height||this.setState({objectIcon:this.drawIcon(e)})}},{key:"drawIcon",value:function(t){var e=Zt(t),n=e.shiftX,r=e.shiftY,i=e.scale;return Qt[t.category].path.map(function(e,a){return o.a.createElement(Et.Path,{key:a,x:t.width/2-n,y:t.height/2-r,data:e,fill:"black",scale:{x:i,y:i}})})}},{key:"render",value:function(){var t=this.props,e=t.object,n=t.setColor,r=this.state,i=r.isPointed,a=r.objectIcon;return o.a.createElement(Et.Group,{x:e.coordinates.x,y:e.coordinates.y,draggable:!1,onClick:this.handleObjectClick,onContextMenu:this.handleObjectContextMenu,onMouseEnter:this.handleObjectMouseMove,onMouseLeave:this.handleObjectMouseOut,name:"object",nameID:e.id},o.a.createElement(Et.Rect,{width:e.width,height:e.height,fill:n(e.id,e.correctLocation,e.color),opacity:i?.5:1,stroke:"black",strokeWidth:.5}),a)}}])&&ie(n.prototype,r),i&&ie(n,i),e}();function de(t){return(de="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function fe(t){return function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function he(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function pe(t,e){return!e||"object"!==de(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function ve(t){return(ve=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function ye(t,e){return(ye=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var ge=function(t){function e(t){var n;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),n=pe(this,ve(e).call(this,t));var r=t.width,o=t.height,i=t.blockSnapSize;return n.state={verticalLines:n.drawVerticalLines(r,o,i),horizontalLines:n.drawHorizontalLines(r,o,i)},n}var n,o,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&ye(t,e)}(e,r["PureComponent"]),n=e,(o=[{key:"componentDidUpdate",value:function(t){var e=this.props,n=e.width,r=e.height,o=e.blockSnapSize;t.width===n&&t.height===r&&t.blockSnapSize===o||this.setState({verticalLines:this.drawVerticalLines(n,r,o),horizontalLines:this.drawHorizontalLines(n,r,o)})}},{key:"drawVerticalLines",value:function(t,e,n){var o=n;return fe(Array(t/n^0)).map(function(t,n){return r.createElement(Et.Line,{key:Number("1".concat(n)),points:[Math.round(n*o)+.5,0,Math.round(n*o)+.5,e],stroke:"#ddd",strokeWidth:.5})})}},{key:"drawHorizontalLines",value:function(t,e,n){var o=n;return fe(Array(e/n^0)).map(function(e,n){return r.createElement(Et.Line,{key:Number("2".concat(n)),points:[0,Math.round(n*o),t,Math.round(n*o)],stroke:"#ddd",strokeWidth:.5})})}},{key:"render",value:function(){var t=this.state,e=t.verticalLines,n=t.horizontalLines,o=this.props.children;return r.createElement(Et.Layer,null,r.createElement(Et.Group,null,e,n,o))}}])&&he(n.prototype,o),i&&he(n,i),e}();function me(t){return(me="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function be(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function _e(t){return(_e=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function xe(t,e){return(xe=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function we(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}var Se=n(8),Ce=function(t){function e(t){var n,r,o,i,a,l;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),r=this,o=_e(e).call(this,t),n=!o||"object"!==me(o)&&"function"!=typeof o?we(r):o,i=we(we(n)),l=function(t,e){var r=n.props.boundaries.split(" ").map(function(t){var e=t.split(",",2);return{x:Number(e[0]),y:Number(e[1])}});t.beginPath(),r.forEach(function(e,n){0===n?t.moveTo(e.x,e.y):t.lineTo(e.x,e.y)}),t.closePath(),t.fillStrokeShape(e)},(a="drawMapVisualBorders")in i?Object.defineProperty(i,a,{value:l,enumerable:!0,configurable:!0,writable:!0}):i[a]=l;var s=t.borderlands;return n.state={borderAreas:n.drawBorderAreas(s)},n}var n,o,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&xe(t,e)}(e,r["PureComponent"]),n=e,(o=[{key:"componentDidUpdate",value:function(t){var e=this.props.borderlands;Se.isEqual(t.borderlands,e)||this.setState({borderAreas:this.drawBorderAreas(e)})}},{key:"drawBorderAreas",value:function(t){return t.slice(0).map(function(t){var e=t.split(" ",4).map(function(t){return Number(t)});return r.createElement(Et.Rect,{key:"".concat(e[0],"_").concat(e[1]),x:e[0],y:e[1],width:e[2]-e[0],height:e[3]-e[1],fill:"white"})})}},{key:"render",value:function(){var t=this.state.borderAreas;return r.createElement(Et.Group,{name:"borderAreas"},r.createElement(Et.Shape,{sceneFunc:this.drawMapVisualBorders,stroke:"black",strokeWidth:2}),t)}}])&&be(n.prototype,o),i&&be(n,i),e}(),Te="#C2BEAF",Fe="red",Oe="orange",Pe="#F3F681",Ee="#DED9C3",je="#DDDDDD",Ie="#DDDDDD",ke="#DDDDDD",Le="#FEE471",Me="#83DDE9",Ne="#EDEADD",De="#CCCAC2",Ke=n(54),Ue=n.n(Ke);function Ae(){return(Ae=Ue.a||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}var ze=n(55),Re=n.n(ze);var We=n(56),Be=n.n(We);var Ge=n(12),Ve=n.n(Ge),Ye=n(6),$e=n.n(Ye),Qe=n(57),Xe=n.n(Qe),Ze=n(33),Je=n.n(Ze),He={large:"lg",medium:"md",small:"sm",xsmall:"xs",lg:"lg",md:"md",sm:"sm",xs:"xs"};function qe(t){return function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return"function"==typeof n[n.length-1]?t.apply(void 0,n):function(e){return t.apply(void 0,n.concat([e]))}}}function tn(t,e){var n=(t.bsClass||"").trim();return null==n&&_()(!1),n+(e?"-"+e:"")}var en=qe(function(t,e){var n=e.propTypes||(e.propTypes={}),r=e.defaultProps||(e.defaultProps={});return n.bsClass=$e.a.string,r.bsClass=t,e});qe(function(t,e,n){"string"!=typeof e&&(n=e,e=void 0);var r=n.STYLES||[],o=n.propTypes||{};t.forEach(function(t){-1===r.indexOf(t)&&r.push(t)});var i=$e.a.oneOf(r);(n.STYLES=r,i._values=r,n.propTypes=Ae({},o,{bsStyle:i}),void 0!==e)&&((n.defaultProps||(n.defaultProps={})).bsStyle=e);return n}),qe(function(t,e,n){"string"!=typeof e&&(n=e,e=void 0);var r=n.SIZES||[],o=n.propTypes||{};t.forEach(function(t){-1===r.indexOf(t)&&r.push(t)});var i=[];r.forEach(function(t){var e=He[t];e&&e!==t&&i.push(e),i.push(t)});var a=$e.a.oneOf(i);return a._values=i,n.SIZES=r,n.propTypes=Ae({},o,{bsSize:a}),void 0!==e&&(n.defaultProps||(n.defaultProps={}),n.defaultProps.bsSize=e),n});function nn(t){return{bsClass:t.bsClass,bsSize:t.bsSize,bsStyle:t.bsStyle,bsRole:t.bsRole}}function rn(t){return"bsClass"===t||"bsSize"===t||"bsStyle"===t||"bsRole"===t}var on={id:Xe()($e.a.oneOfType([$e.a.string,$e.a.number])),placement:$e.a.oneOf(["top","right","bottom","left"]),positionTop:$e.a.oneOfType([$e.a.number,$e.a.string]),positionLeft:$e.a.oneOfType([$e.a.number,$e.a.string]),arrowOffsetTop:$e.a.oneOfType([$e.a.number,$e.a.string]),arrowOffsetLeft:$e.a.oneOfType([$e.a.number,$e.a.string]),title:$e.a.node},an=function(t){var e,n;function r(){return t.apply(this,arguments)||this}return n=t,(e=r).prototype=Be()(n.prototype),e.prototype.constructor=e,e.__proto__=n,r.prototype.render=function(){var t,e=this.props,n=e.placement,r=e.positionTop,i=e.positionLeft,a=e.arrowOffsetTop,l=e.arrowOffsetLeft,s=e.title,c=e.className,u=e.style,d=e.children,f=function(t){var e={};return Je()(t).forEach(function(t){var n=t[0],r=t[1];rn(n)||(e[n]=r)}),[nn(t),e]}(function(t,e){if(null==t)return{};var n,r,o={},i=Re()(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}(e,["placement","positionTop","positionLeft","arrowOffsetTop","arrowOffsetLeft","title","className","style","children"])),h=f[0],p=f[1],v=Ae({},function(t){var e,n=((e={})[tn(t)]=!0,e);return t.bsSize&&(n[tn(t,He[t.bsSize]||t.bsSize)]=!0),t.bsStyle&&(n[tn(t,t.bsStyle)]=!0),n}(h),((t={})[n]=!0,t)),y=Ae({display:"block",top:r,left:i},u),g={top:a,left:l};return o.a.createElement("div",Ae({},p,{role:"tooltip",className:Ve()(c,v),style:y}),o.a.createElement("div",{className:"arrow",style:g}),s&&o.a.createElement("h3",{className:tn(h,"title")},s),o.a.createElement("div",{className:tn(h,"content")},d))},r}(o.a.Component);an.propTypes=on,an.defaultProps={placement:"right"};var ln=en("popover",an),sn=(n(72),o.a.memo(function(t){var e=t.width,n=t.fill,r=t.content,i=t.onClick;e=e||"100%",n=n||["#FFA500"];var a=(r=r||[]).path.map(function(t,e){return o.a.createElement("path",{key:e,d:t,fill:n[e]})});return o.a.createElement("div",{className:"svg_image",onClick:i},o.a.createElement("svg",{width:e,height:e,xmlns:"http://www.w3.org/2000/svg",viewBox:r.viewBox},o.a.createElement("g",{fill:n},a)))})),cn=(n(75),function(t){var e=t.x,n=t.y,r=t.readyHandler,i=t.copyHandler,a=t.turnHandler,l=t.editHandler,s=t.deleteHandler;return o.a.createElement(ln,{id:"popover-basic",placement:"right",positionLeft:e,positionTop:n,animation:"false"},o.a.createElement("div",{style:{display:"flex"}},o.a.createElement(sn,{width:"20px",content:Qt.ready,onClick:r}),o.a.createElement(sn,{width:"20px",content:Qt.copy,onClick:i}),o.a.createElement(sn,{width:"20px",content:Qt.turn,onClick:a}),o.a.createElement(sn,{width:"20px",content:Qt.edit,onClick:l}),o.a.createElement(sn,{width:"20px",content:Qt.delete,onClick:s})))}),un=n(15),dn=n.n(un);n(113);function fn(t){return(fn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function hn(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function pn(t){return(pn=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function vn(t,e){return(vn=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function yn(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function gn(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var mn=function(t){function e(){var t,n,r,o;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);for(var i=arguments.length,a=new Array(i),l=0;l<i;l++)a[l]=arguments[l];return r=this,o=(t=pn(e)).call.apply(t,[this].concat(a)),n=!o||"object"!==fn(o)&&"function"!=typeof o?yn(r):o,gn(yn(yn(n)),"handleYesClick",function(){(0,n.props.onYesClick)()}),gn(yn(yn(n)),"handleClose",function(){(0,n.props.onHide)()}),n}var n,r,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&vn(t,e)}(e,o.a.Component),n=e,(r=[{key:"countObjects",value:function(t){return t.split(" ").length}},{key:"constructModalMessage",value:function(t){var e=this.countObjects(t);return 1===e?"Вы уверены, что хотите удалить этот объект?":"Вы уверены, что хотите удалить эти ".concat(e,e>1&&e<=4?" объекта?":" объектов?")}},{key:"render",value:function(){var t=this.props,e=t.visible,n=t.objectIds,r=this.constructModalMessage(n);return o.a.createElement(dn.a,{visible:e,width:"450",height:"150",effect:"fadeInUp",onClickAway:this.handleClose},o.a.createElement("div",{className:"deleteObjectModalContainer"},o.a.createElement("h1",{className:"deleteObjectModalLabel"},"Подтверждение действия"),o.a.createElement("p",{className:"deleteObjectModalMessage"},r),o.a.createElement("div",{className:"modalButtonsSet"},o.a.createElement("button",{className:"modalButtonAccept",type:"submit",onClick:this.handleYesClick},"Да"),o.a.createElement("button",{className:"modalButtonClose",type:"submit",onClick:this.handleClose},"Нет"))))}}])&&hn(n.prototype,r),i&&hn(n,i),e}();function bn(t){return(bn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _n(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function xn(t){return(xn=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function wn(t,e){return(wn=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Sn(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Cn(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var Tn=n(8),Fn=n(47),On=function(t){function e(){var t,n,r,o;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);for(var i=arguments.length,a=new Array(i),l=0;l<i;l++)a[l]=arguments[l];return r=this,o=(t=xn(e)).call.apply(t,[this].concat(a)),n=!o||"object"!==bn(o)&&"function"!=typeof o?Sn(r):o,Cn(Sn(Sn(n)),"state",{showModal:!1}),Cn(Sn(Sn(n)),"openModal",function(){n.setState({showModal:!0})}),Cn(Sn(Sn(n)),"closeModal",function(){n.setState({showModal:!1})}),Cn(Sn(Sn(n)),"handleYesClickModal",function(){var t=n.props,e=t.actions,r=t.currentObject,o=t.readyHandler;r.objectId.split(" ").forEach(function(t){e.deleteObject(t)}),n.closeModal(),o()}),Cn(Sn(Sn(n)),"handleCloseModal",function(){n.closeModal()}),Cn(Sn(Sn(n)),"copy",function(t){var e=n.props.actions,r=Tn.cloneDeep(t);r.coordinates={x:t.coordinates.x+30,y:t.coordinates.y+30},void 0!==r.userId&&(r.userId=""),r.id=Fn(),e.createObject(r)}),Cn(Sn(Sn(n)),"deleteObject",function(){n.openModal()}),Cn(Sn(Sn(n)),"rotateObject",function(){var t=n.props,e=t.actions;t.currentObject.objectId.split(" ").forEach(function(t){e.turnObject(t)})}),Cn(Sn(Sn(n)),"editObject",function(){}),Cn(Sn(Sn(n)),"copyObject",function(){var t=n.props,e=t.objects,r=t.currentObject;e.levels[e.mapLevel].forEach(function(t){r.objectId.split(" ").includes(t.id)&&n.copy(t)})}),n}var n,r,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&wn(t,e)}(e,o.a.Component),n=e,(r=[{key:"render",value:function(){var t=this.props,e=t.x,n=t.y,r=t.readyHandler,i=t.currentObject,a=this.state.showModal;return o.a.createElement(o.a.Fragment,null,o.a.createElement(cn,{x:e,y:n,readyHandler:r,copyHandler:this.copyObject,turnHandler:this.rotateObject,editHandler:this.editObject,deleteHandler:this.deleteObject}),o.a.createElement(mn,{visible:a,objectIds:i.objectId,onYesClick:this.handleYesClickModal,onHide:this.handleCloseModal}))}}])&&_n(n.prototype,r),i&&_n(n,i),e}(),Pn=Z(function(t){return{objects:t.objects,boardState:t.boardState,currentObject:t.currentObject,workMode:t.workMode}},function(t){return{actions:Object(l.bindActionCreators)({createObject:jt,deleteObject:Lt,turnObject:kt,changeCurrentObjectState:Bt},t)}})(On);function En(t){return(En="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function jn(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function In(t){return(In=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function kn(t,e){return(kn=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Ln(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Mn(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var Nn=n(8),Dn=function(t){function e(t){var n,r,o;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),r=this,o=In(e).call(this,t),n=!o||"object"!==En(o)&&"function"!=typeof o?Ln(r):o,Mn(Ln(Ln(n)),"handleStageShiftChange",function(t){var e=n.props.boardState;if(e.shift[0]!==t[0]||e.shift[1]!==t[1]){var r=n.props.actions,o=function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),r.forEach(function(e){Mn(t,e,n[e])})}return t}({},e,{shift:t});r.changeBoardState(o)}}),Mn(Ln(Ln(n)),"handleStageScaleChange",function(t){var e=n.props,r=e.actions,o=e.boardState,i=Object.assign({},o);i.scale=t,r.changeBoardState(i)}),Mn(Ln(Ln(n)),"checkObjectLocation",function(t){var e={x:t.coordinates.x,y:t.coordinates.y,width:t.width,height:t.height},r=n.props,o=r.objects,i=r.mapState,a=o.levels[o.mapLevel].some(function(r){if(r.id===t.id)return!1;var o={x:r.coordinates.x,y:r.coordinates.y,width:r.width,height:r.height};return n.haveIntersection(o,e)}),l=i.mapCovering.some(function(t){var r=t.split(" ",4).map(function(t){return Number(t)}),o={x:r[0],y:r[1],width:r[2]-r[0],height:r[3]-r[1]};return n.haveIntersection(o,e)}),s=!(a||l),c=n.props.actions,u={id:t.id,corrLoc:s};c.changeCorrectLocation(u)}),Mn(Ln(Ln(n)),"checkCurrentObjectLocation",function(){var t=n.props,e=t.currentObject,r=t.objects,o=r.levels[r.mapLevel],i=e.objectId.split(" ");o.forEach(function(t){i.includes(t.id)&&n.checkObjectLocation(t)})}),Mn(Ln(Ln(n)),"handleStageDragStart",function(){n.hideContextMenu()}),Mn(Ln(Ln(n)),"handleStageDragEnd",function(t){var e=t.target,r=t.currentTarget;r.x()===e.x()&&r.y()===e.y()&&n.handleStageShiftChange([r.x(),r.y()])}),Mn(Ln(Ln(n)),"handleStageWheel",function(t){t.evt.preventDefault();var e=n.props.boardState,r=t.evt.deltaY>0?1.05*e.scale:e.scale/1.05;n.handleStageScaleChange(r)}),Mn(Ln(Ln(n)),"handleStageClick",function(t){void 0!==t.target.parent&&"object"===t.target.parent.attrs.name||n.flushAll()}),Mn(Ln(Ln(n)),"objectDataToRedux",function(){var t=n.props,e=t.actions,r=t.workMode,o=t.currentObject,i=t.objects,a=n.state.selectedObjectPos;if(r===Ft){var l=o.objectId.split(" ").slice(-1)[0],s=i.levels[i.mapLevel].find(function(t){return t.id===l}),c={x:a[0]-s.coordinates.x,y:a[1]-s.coordinates.y},u={ids:o.objectId,shift:c};e.shiftObjects(u)}else{var d={id:o.objectId,pos:{x:a[0],y:a[1]}};e.moveObject(d)}}),Mn(Ln(Ln(n)),"showCurrentObjectShadow",function(t,e,r){var o=n.props.mapState;n.setState({selectedObjectPos:[Math.round(t/o.blockSnapSize)*o.blockSnapSize,Math.round(e/o.blockSnapSize)*o.blockSnapSize],selectedObjectSizes:r,shadowOpacity:1})}),Mn(Ln(Ln(n)),"hideCurrentObjectShadow",function(){n.objectDataToRedux(),n.setState({shadowOpacity:0})}),Mn(Ln(Ln(n)),"showContextMenu",function(t,e){n.setState({contextMenuPos:[t+5,e+5],contextMenuShow:!0})}),Mn(Ln(Ln(n)),"hideContextMenu",function(){n.setState({contextMenuShow:!1})}),Mn(Ln(Ln(n)),"setCurrentObjectData",function(t,e){var r=n.props,o=r.actions,i=r.workMode,a=r.currentObject;if(i===Ft){var l="";if(""!==t&&(""===a.objectId&&(l=t),""!==a.objectId)){var s=a.objectId.split(" "),c=s.indexOf(t);-1===c?(s.push(t),l=s.join(" ")):(s.splice(c,1),s.push(t),l=s.join(" "))}o.changeCurrentObject(l)}i===Tt&&(o.changeCurrentObject(t),o.changeCurrentUser(e))}),Mn(Ln(Ln(n)),"setColor",function(t,e,r,o){var i=n.props.currentObject,a=r;return void 0!==o&&""===o&&(a=Te),!1===e&&(a=Fe),a=i.objectId.split(" ").includes(t)?Oe:a}),Mn(Ln(Ln(n)),"flushAll",function(){n.hideContextMenu();var t=n.props.actions;t.changeCurrentObject(""),t.changeCurrentUser(""),t.changeCurrentObjectState("none")}),Mn(Ln(Ln(n)),"openCurrentObjectTab",function(){var t=n.props,e=t.actions;t.workMode!==Ft&&e.changeCurrentObjectState("edit")}),n.state={selectedObjectPos:[10,10],selectedObjectSizes:[10,10],shadowOpacity:0,contextMenuPos:[10,10],contextMenuShow:!1},n}var n,o,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&kn(t,e)}(e,r["Component"]),n=e,(o=[{key:"haveIntersection",value:function(t,e){return!(e.x>=t.x+t.width||e.x+e.width<=t.x||e.y>=t.y+t.height||e.y+e.height<=t.y)}},{key:"render",value:function(){var t=this,e=this.props,n=e.boardWidth,o=e.boardHeight,i=e.objects,a=e.users,l=e.mapState,s=e.boardState,c=this.state,u=c.selectedObjectPos,d=c.selectedObjectSizes,f=c.shadowOpacity,h=this.state,p=h.contextMenuShow,v=h.contextMenuPos,y=l.mapWidth,g=l.mapHeight,m=l.blockSnapSize,b=l.mapBoundaries,_=l.mapCovering,x=i.levels[i.mapLevel].map(function(e){var n=Nn.cloneDeep(e);if(!0===n.movable){var o={};return void 0!==n.userId&&(o=a.find(function(t){return t.id===n.userId})),r.createElement(re,{key:n.id,object:n,user:o,setColor:t.setColor,mapWidth:y,mapHeight:g,blockSnapSize:m,showShadow:t.showCurrentObjectShadow,stopShadow:t.hideCurrentObjectShadow,showContextMenu:t.showContextMenu,hideContextMenu:t.hideContextMenu,shareObjectData:t.setCurrentObjectData,checkObjectLocation:t.checkObjectLocation,openCurrentObjectTab:t.openCurrentObjectTab})}return r.createElement(ue,{key:n.id,object:n,setColor:t.setColor,showContextMenu:t.showContextMenu,hideContextMenu:t.hideContextMenu,shareObjectData:t.setCurrentObjectData,openCurrentObjectTab:t.openCurrentObjectTab})});return r.createElement("div",{style:{border:"1px solid black"}},r.createElement(Et.Stage,{x:s.shift[0],y:s.shift[1],width:n,height:o,draggable:!0,onWheel:this.handleStageWheel,scale:{x:s.scale,y:s.scale},onDragStart:this.handleStageDragStart,onDragEnd:this.handleStageDragEnd,onDblClick:this.handleStageDblClick,onClick:this.handleStageClick},r.createElement(ge,{width:y,height:g,blockSnapSize:m,boundaries:b,flushAll:this.flushAll}),r.createElement(Et.Layer,null,r.createElement(Et.Rect,{x:u[0],y:u[1],width:d[0],height:d[1],fill:"#AE4C01",opacity:f,stroke:"#823B04",strokeWidth:1}),r.createElement(Ce,{boundaries:b,borderlands:_}),x),r.createElement(Et.Layer,null,r.createElement(Et.Label,{opacity:.75,visible:!1,listening:!1},r.createElement(Et.Tag,{fill:"black",pointerDirection:"down",pointerWidth:10,pointerHeight:10,lineJoin:"round",shadowColor:"black",shadowBlur:10,shadowOffset:10,shadowOpacity:.2}),r.createElement(Et.Text,{text:"",fontFamily:"Calibri",fontSize:Math.floor(14/s.scale),padding:5,fill:"white",name:"objectTooltip"})))),p&&r.createElement(Pn,{x:v[0],y:v[1],readyHandler:this.flushAll}))}}])&&jn(n.prototype,o),i&&jn(n,i),e}(),Kn=Z(function(t){return{objects:t.objects,users:t.users,boardState:t.boardState,mapState:t.mapState,currentObject:t.currentObject,workMode:t.workMode}},function(t){return{actions:Object(l.bindActionCreators)({changeBoardState:zt,changeMapLevel:At,changeObjectsLevel:Nt,moveObject:It,changeCurrentObject:Rt,changeCurrentUser:Wt,changeCurrentObjectState:Bt,changeCorrectLocation:Dt,shiftObjects:Ut},t)}})(Dn),Un=n(9),An=n(16);n(124);function zn(t){var e=t.user,n=t.onClick,o=t.isSelected;return r.createElement("div",{className:o?"selectedUserSimpleItem":"userSimpleItem",onClick:function(){n(o?"":e.id)}},r.createElement(sn,{width:"30px",fill:["#E7ECED","#F9BF05"],content:Qt.user}),r.createElement("div",{className:"userInfo"},r.createElement("div",null,e.title),r.createElement("div",null,e.capability)))}n(126);function Rn(t){return(Rn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Wn(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Bn(t){return(Bn=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Gn(t,e){return(Gn=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Vn(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Yn(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var $n=function(t){function e(t){var n,r,o;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),r=this,o=Bn(e).call(this,t),n=!o||"object"!==Rn(o)&&"function"!=typeof o?Vn(r):o,Yn(Vn(Vn(n)),"onChangeInput",function(t){n.setState({searchPhrase:t.target.value})}),Yn(Vn(Vn(n)),"onUserClick",function(t){var e=n.props,r=e.userId,o=e.onUserClick;""===r?(o(t),n.setState({searchPhrase:""})):o("")}),n.state={searchPhrase:""},n}var n,o,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Gn(t,e)}(e,r["Component"]),n=e,(o=[{key:"render",value:function(){var t=this,e=this.props,n=e.userId,o=e.users,i=this.state.searchPhrase,a=o.filter(function(t){var e=t.title.toLowerCase().split(" ",2),n=i.toLowerCase();return""===n||e.some(function(t){return t.startsWith(n)})}).map(function(e){return""===n?r.createElement("li",{key:e.id},r.createElement(zn,{user:e,isSelected:!1,onClick:t.onUserClick})):n===e.id?r.createElement("li",{key:e.id},r.createElement(zn,{user:e,isSelected:!0,onClick:t.onUserClick})):void 0});return r.createElement("div",{className:"chooseUserListWrapper"},""===n&&r.createElement(An.DebounceInput,{minLength:1,debounceTimeout:300,onChange:this.onChangeInput}),r.createElement("ul",{className:""===n?"chooseUserList":"chooseUserListChosen"},a))}}])&&Wn(n.prototype,o),i&&Wn(n,i),e}(),Qn=Z(function(t){return{users:t.users}},function(t){return{actions:Object(l.bindActionCreators)({addUser:Gt,editUser:Vt,deleteUser:Yt},t)}})($n);n(128);function Xn(t){return(Xn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Zn(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Jn(t){return(Jn=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Hn(t,e){return(Hn=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function qn(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}var tr=function(t){function e(){var t,n,r,o,i,a,l;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);for(var s=arguments.length,c=new Array(s),u=0;u<s;u++)c[u]=arguments[u];return r=this,o=(t=Jn(e)).call.apply(t,[this].concat(c)),n=!o||"object"!==Xn(o)&&"function"!=typeof o?qn(r):o,i=qn(qn(n)),l=function(){var t=n.props,e=t.object,r=t.onClick;r(t.isSelected?"":e.id)},(a="onObjectClick")in i?Object.defineProperty(i,a,{value:l,enumerable:!0,configurable:!0,writable:!0}):i[a]=l,n}var n,r,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Hn(t,e)}(e,o.a.Component),n=e,(r=[{key:"getSettingsForObject",value:function(t){return{text:t.title,fill:["black"],content:Qt[t.id]}}},{key:"render",value:function(){var t=this.props,e=t.object,n=t.isSelected,r=this.getSettingsForObject(e),i=r.content,a=r.text,l=r.fill;return o.a.createElement("div",{className:n?"objectItemSelected ":"objectItem",onClick:this.onObjectClick},o.a.createElement(sn,{width:"30px",fill:l,content:i}),o.a.createElement("div",null,a))}}])&&Zn(n.prototype,r),i&&Zn(n,i),e}();n(130);function er(t){return(er="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function nr(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function rr(t){return(rr=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function or(t,e){return(or=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function ir(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}var ar=function(t){function e(){var t,n,r,o,i,a,l;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);for(var s=arguments.length,c=new Array(s),u=0;u<s;u++)c[u]=arguments[u];return r=this,o=(t=rr(e)).call.apply(t,[this].concat(c)),n=!o||"object"!==er(o)&&"function"!=typeof o?ir(r):o,i=ir(ir(n)),l=function(t){var e=n.props,r=e.objectId,o=e.onObjectClick;o(""===r?t:"")},(a="onObjectClick")in i?Object.defineProperty(i,a,{value:l,enumerable:!0,configurable:!0,writable:!0}):i[a]=l,n}var n,r,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&or(t,e)}(e,o.a.Component),n=e,(r=[{key:"render",value:function(){var t=this,e=this.props.objectId,n=Xt.slice(1),r=n.map(function(e,n){return o.a.createElement("li",{key:n},o.a.createElement(tr,{object:e,isSelected:!1,onClick:t.onObjectClick}))}),i=!1,a=n.find(function(t){return t.id===e});return void 0!==a&&(i=!0,r=o.a.createElement("li",{key:0},o.a.createElement(tr,{object:a,isSelected:!0,onClick:this.onObjectClick}))),o.a.createElement("div",{className:"objectsListWrapper"},o.a.createElement("ul",{className:i?"objectsListChosen":"objectsList"},r))}}])&&nr(n.prototype,r),i&&nr(n,i),e}();n(132);function lr(t){return(lr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function sr(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function cr(t){return(cr=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function ur(t,e){return(ur=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function dr(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function fr(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var hr=n(47),pr=function(t){function e(t){var n,r,o;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),r=this,o=cr(e).call(this,t),n=!o||"object"!==lr(o)&&"function"!=typeof o?dr(r):o,fr(dr(dr(n)),"onSubmitClick",function(){var t=n.props.actions,e=n.state,r=e.selectedObjectId,o=e.selectedUserId;if(""!==r)if("table"===r&&n.checkUserAssignedToTable(o))alert("ОШИБКА: ПОЛЬЗОВАТЕЛЬ УЖЕ ПРИВЯЗАН К СТОЛУ! Выберите другого пользователя!");else{var i=function(t,e,n,r){var o={category:t,id:e,coordinates:n,movable:!0,correctLocation:!0,color:Pe};switch(t){case"table":o.width=40,o.height=70,o.userId=r,o.color=Pe;break;case"cupboard":o.width=30,o.height=50,o.color=Ee;break;case"printer":o.width=40,o.height=40,o.color=je;break;case"scaner":o.width=40,o.height=40,o.color=Ie;break;case"shredder":o.width=40,o.height=30,o.color=ke;break;case"public_place":o.width=100,o.height=100,o.color=Le;break;case"meeting_room":o.width=100,o.height=100,o.color=Me;break;case"service_room":o.width=50,o.height=50,o.color=Ne;break;case"construction":o.width=45,o.height=45,o.color=De}return o}(r,hr(),n.getConvertedCoordsFrom(750,20),o);t.createObject(i),n.fullResetIDs()}else alert("ОШИБКА: ОБЪЕКТ НЕ ВЫБРАН! Выберите объект!")}),fr(dr(dr(n)),"selectObjectId",function(t){n.setState({selectedObjectId:t})}),fr(dr(dr(n)),"selectUserId",function(t){n.setState({selectedUserId:t})}),fr(dr(dr(n)),"fullResetIDs",function(){n.setState({selectedObjectId:"",selectedUserId:""})}),n.state={selectedObjectId:"",selectedUserId:""},n}var n,o,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&ur(t,e)}(e,r["Component"]),n=e,(o=[{key:"getConvertedCoordsFrom",value:function(t,e){var n=this.props.boardState;return{x:(t-n.shift[0])/n.scale,y:(e-n.shift[1])/n.scale}}},{key:"checkUserAssignedToTable",value:function(t){if(""===t)return!1;var e=this.props.objects,n=!0,r=!1,o=void 0;try{for(var i,a=e.levels[Symbol.iterator]();!(n=(i=a.next()).done);n=!0){var l=i.value,s=!0,c=!1,u=void 0;try{for(var d,f=l[Symbol.iterator]();!(s=(d=f.next()).done);s=!0){if(d.value.userId===t)return!0}}catch(t){c=!0,u=t}finally{try{s||null==f.return||f.return()}finally{if(c)throw u}}}}catch(t){r=!0,o=t}finally{try{n||null==a.return||a.return()}finally{if(r)throw o}}return!1}},{key:"render",value:function(){var t=this.state,e=t.selectedObjectId,n=t.selectedUserId;return r.createElement(r.Fragment,null,r.createElement(Un.Accordion,{className:"create-tab-accordion",allowMultiple:"true"},r.createElement(Un.AccordionItem,{bodyClassName:"create-tab-accordion-item-body-wrapper",expandedClassName:"create-tab-accordion-item-expanded",titleClassName:"create-tab-accordion-item-title",title:"Выберите объект",expanded:"true",duration:400},r.createElement(ar,{objectId:e,onObjectClick:this.selectObjectId})),r.createElement(Un.AccordionItem,{bodyClassName:"create-tab-accordion-item-body-wrapper",expandedClassName:"create-tab-accordion-item-expanded",titleClassName:"create-tab-accordion-item-title",title:"Выберите пользователя",expanded:"table"===e,duration:400},"table"===e&&r.createElement(Qn,{userId:n,onUserClick:this.selectUserId}),"table"!==e&&""!==e&&r.createElement("div",null,r.createElement("p",{className:"chooseUserText"},"К этому объекту нельзя добавить пользователя!")),""===e&&r.createElement("div",null,r.createElement("p",{className:"chooseUserText"},"Чтобы выбрать пользователя - выберите объект!")))),r.createElement("button",{type:"submit",className:"buttonCreateObject",onClick:this.onSubmitClick},"Создать"))}}])&&sr(n.prototype,o),i&&sr(n,i),e}(),vr=Z(function(t){return{boardState:t.boardState,objects:t.objects}},function(t){return{actions:Object(l.bindActionCreators)({createObject:jt},t)}})(pr);n(134),n(136);function yr(t){return(yr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function gr(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function mr(t){return(mr=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function br(t,e){return(br=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function _r(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function xr(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var wr=function(t){function e(){var t,n,r,o;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);for(var i=arguments.length,a=new Array(i),l=0;l<i;l++)a[l]=arguments[l];return r=this,o=(t=mr(e)).call.apply(t,[this].concat(a)),n=!o||"object"!==yr(o)&&"function"!=typeof o?_r(r):o,xr(_r(_r(n)),"handleYesClick",function(){(0,n.props.onYesClick)()}),xr(_r(_r(n)),"handleClose",function(){(0,n.props.onHide)()}),n}var n,r,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&br(t,e)}(e,o.a.Component),n=e,(r=[{key:"render",value:function(){var t=this.props,e=t.visible,n=t.title;return o.a.createElement(dn.a,{visible:e,width:"450",height:"150",effect:"fadeInUp",onClickAway:this.handleClose},o.a.createElement("div",{className:"deleteUserModalContainer"},o.a.createElement("h1",{className:"deleteUserModalLabel"},"Подтверждение действия"),o.a.createElement("p",{className:"deleteUserModalMessage"},"Вы уверены, что хотите удалить пользователя: ",n,"?"),o.a.createElement("div",{className:"modalButtonsSet"},o.a.createElement("button",{className:"modalButtonAccept",type:"submit",onClick:this.handleYesClick},"Да"),o.a.createElement("button",{className:"modalButtonClose",type:"submit",onClick:this.handleClose},"Нет"))))}}])&&gr(n.prototype,r),i&&gr(n,i),e}();function Sr(t){return(Sr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Cr(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Tr(t){return(Tr=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Fr(t,e){return(Fr=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Or(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Pr(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var Er=function(t){function e(){var t,n,r,o;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);for(var i=arguments.length,a=new Array(i),l=0;l<i;l++)a[l]=arguments[l];return r=this,o=(t=Tr(e)).call.apply(t,[this].concat(a)),n=!o||"object"!==Sr(o)&&"function"!=typeof o?Or(r):o,Pr(Or(Or(n)),"state",{showModal:!1}),Pr(Or(Or(n)),"openModal",function(){n.setState({showModal:!0})}),Pr(Or(Or(n)),"closeModal",function(){n.setState({showModal:!1})}),Pr(Or(Or(n)),"handleYesClickModal",function(){var t=n.props,e=t.user;(0,t.onDeleteClick)(e.id),n.closeModal()}),Pr(Or(Or(n)),"handleCloseModal",function(){n.closeModal()}),Pr(Or(Or(n)),"handleUserSpecialItemClick",function(){var t=n.props,e=t.user,r=t.onEditClick;r(t.isSelected?"":e.id)}),Pr(Or(Or(n)),"handleUserDeleteClick",function(){var t=n.props,e=t.itemPlace,r=t.user,o=t.onDeleteClick;"CurrentObjectTab"===e&&o(r.id),"UsersEditList"===e&&n.openModal()}),Pr(Or(Or(n)),"handleIconClick",function(){var t=n.props,e=t.user;(0,t.onItemClick)(e.id)}),n}var n,o,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Fr(t,e)}(e,r["Component"]),n=e,(o=[{key:"render",value:function(){var t=this.props,e=t.user,n=t.isSelected,o=this.state.showModal;return r.createElement("div",{className:n?"selectedUserButtonedItem":"userButtonedItem"},r.createElement(sn,{width:"30px",fill:["#E7ECED","#F9BF05"],content:Qt.user,onClick:this.handleIconClick}),r.createElement("div",{className:"userInfo"},r.createElement("div",null,e.title),r.createElement("div",null,e.capability)),r.createElement(sn,{width:"20px",content:Qt.edit,onClick:this.handleUserSpecialItemClick}),r.createElement(sn,{width:"20px",content:Qt.delete,onClick:this.handleUserDeleteClick}),r.createElement(wr,{visible:o,title:e.title,onYesClick:this.handleYesClickModal,onHide:this.handleCloseModal}))}}])&&Cr(n.prototype,o),i&&Cr(n,i),e}();n(138);function jr(t){return(jr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Ir(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function kr(t){return(kr=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Lr(t,e){return(Lr=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Mr(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Nr(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var Dr=function(t){function e(t){var n,r,o;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),r=this,o=kr(e).call(this,t),n=!o||"object"!==jr(o)&&"function"!=typeof o?Mr(r):o,Nr(Mr(Mr(n)),"onChangeInput",function(t){n.setState({searchPhrase:t.target.value})}),Nr(Mr(Mr(n)),"selectUserId",function(t){var e=n.state,r=e.searchPhrase,o=e.selectedUserId;n.setState({selectedUserId:""===o?t:"",searchPhrase:""===o?r:""}),(0,n.props.onUserClick)(t)}),n.state={searchPhrase:"",selectedUserId:""},n}var n,o,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Lr(t,e)}(e,r["Component"]),n=e,(o=[{key:"render",value:function(){var t=this,e=this.props.users,n=this.state,o=n.searchPhrase,i=n.selectedUserId,a=e.filter(function(t){var e=t.title.toLowerCase().split(" ",2),n=o.toLowerCase();return""===n||e.some(function(t){return t.startsWith(n)})}).map(function(e){return""===i?r.createElement("li",{key:e.id},r.createElement(zn,{user:e,isSelected:!1,onClick:t.selectUserId})):i===e.id?r.createElement("li",{key:e.id},r.createElement(zn,{user:e,isSelected:!0,onClick:t.selectUserId})):void 0});return r.createElement("div",{className:"userSpecialListWrapper"},""===i&&r.createElement(An.DebounceInput,{minLength:1,debounceTimeout:300,onChange:this.onChangeInput}),r.createElement("ul",{className:"userSpecialList"},a))}}])&&Ir(n.prototype,o),i&&Ir(n,i),e}(),Kr=Z(function(t){return{users:t.users}},function(t){return{actions:Object(l.bindActionCreators)({addUser:Gt,editUser:Vt,deleteUser:Yt},t)}})(Dr);n(140);function Ur(t){return(Ur="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Ar(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function zr(t,e){return!e||"object"!==Ur(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function Rr(t){return(Rr=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Wr(t,e){return(Wr=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var Br=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),zr(this,Rr(e).apply(this,arguments))}var n,r,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Wr(t,e)}(e,o.a.Component),n=e,(r=[{key:"getSettingsForObject",value:function(t){return void 0===t?{text:"Unknown",fill:["black"],content:Qt.table}:{text:Xt.find(function(e){return e.id===t.category}).title,fill:["black"],content:Qt[t.category]}}},{key:"render",value:function(){var t=this.props.object,e=this.getSettingsForObject(t),n=e.content,r=e.text,i=e.fill;return o.a.createElement("div",{className:"currentObjectItemSelected"},o.a.createElement(sn,{width:"30px",fill:i,content:n}),o.a.createElement("div",null,r))}}])&&Ar(n.prototype,r),i&&Ar(n,i),e}();n(142);function Gr(t){return(Gr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Vr(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Yr(t){return(Yr=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function $r(t,e){return($r=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Qr(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}var Xr=function(t){function e(t){var n,r,o,i,a,l;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),r=this,o=Yr(e).call(this,t),n=!o||"object"!==Gr(o)&&"function"!=typeof o?Qr(r):o,i=Qr(Qr(n)),l=function(t){var e=n.props,r=e.label,o=e.onInputChange;n.setState({inputText:t.target.value});var i={};i[r]=t.target.value,o(i)},(a="onTextChange")in i?Object.defineProperty(i,a,{value:l,enumerable:!0,configurable:!0,writable:!0}):i[a]=l;var s=n.props.placeholder;return n.state={inputText:s},n}var n,o,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&$r(t,e)}(e,r["Component"]),n=e,(o=[{key:"componentDidUpdate",value:function(t){var e=this.props.placeholder;t.placeholder!==e&&this.setState({inputText:e})}},{key:"render",value:function(){var t=this.state.inputText,e=this.props,n=e.label,o=e.disabled;return r.createElement("div",{className:"editField"},r.createElement("div",{className:"editFieldLabel"},n),r.createElement("input",{className:"editFieldInput",type:"text",value:t,disabled:o,onChange:this.onTextChange}))}}])&&Vr(n.prototype,o),i&&Vr(n,i),e}();n(144);function Zr(t){return(Zr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Jr(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Hr(t){return(Hr=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function qr(t,e){return(qr=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function to(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}var eo=function(t){function e(t){var n,r,o,i,a,l;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),r=this,o=Hr(e).call(this,t),n=!o||"object"!==Zr(o)&&"function"!=typeof o?to(r):o,i=to(to(n)),l=function(t){var e=n.props,r=e.label,o=e.onInputChange,i=n.state.isChecked;n.setState({isChecked:!i});var a={};a[r]=t.target.checked,o(a)},(a="handleChange")in i?Object.defineProperty(i,a,{value:l,enumerable:!0,configurable:!0,writable:!0}):i[a]=l;var s=n.props.placeholder;return n.state={isChecked:s},n}var n,o,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&qr(t,e)}(e,r["Component"]),n=e,(o=[{key:"componentDidUpdate",value:function(t){var e=this.props.placeholder;t.placeholder!==e&&this.setState({isChecked:e})}},{key:"render",value:function(){var t=this.props.label,e=this.state.isChecked;return r.createElement("div",{className:"editField"},r.createElement("div",{className:"editFieldLabel"},t),r.createElement("input",{type:"checkbox",onChange:this.handleChange,checked:e}))}}])&&Jr(n.prototype,o),i&&Jr(n,i),e}(),no=(n(146),n(17)),ro=n.n(no);n(29);function oo(t){return(oo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function io(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function ao(t){return(ao=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function lo(t,e){return(lo=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function so(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}var co=function(t){function e(t){var n,r,o,i,a,l;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),r=this,o=ao(e).call(this,t),n=!o||"object"!==oo(o)&&"function"!=typeof o?so(r):o,i=so(so(n)),l=function(t){var e=n.props,r=e.label,o=e.onInputChange;n.setState({currCategory:t.value});var i={};i[r]=t.value,o(i)},(a="handleSelect")in i?Object.defineProperty(i,a,{value:l,enumerable:!0,configurable:!0,writable:!0}):i[a]=l;var s=n.props.placeholder;return n.state={currCategory:s},n}var n,o,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&lo(t,e)}(e,r["Component"]),n=e,(o=[{key:"componentDidUpdate",value:function(t){var e=this.props.placeholder;t.placeholder!==e&&this.setState({currCategory:e})}},{key:"render",value:function(){var t=this.state.currCategory,e=this.props.label,n=Xt.slice(1).map(function(t){return{value:t.id,label:t.id}}),o=Xt.slice(1).find(function(e){return e.id===t});return o={value:o.id,label:o.id},r.createElement("div",{className:"editField"},r.createElement("div",{className:"editFieldDropdownLabel"},e),r.createElement(ro.a,{className:"editFieldDropdown",options:n,onChange:this.handleSelect,value:o,placeholder:o}))}}])&&io(n.prototype,o),i&&io(n,i),e}();n(149);function uo(t){return(uo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function fo(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function ho(t){return(ho=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function po(t,e){return(po=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function vo(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function yo(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var go=function(t){function e(){var t,n,r,o;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);for(var i=arguments.length,a=new Array(i),l=0;l<i;l++)a[l]=arguments[l];return r=this,o=(t=ho(e)).call.apply(t,[this].concat(a)),n=!o||"object"!==uo(o)&&"function"!=typeof o?vo(r):o,yo(vo(vo(n)),"state",{objectSettings:{}}),yo(vo(vo(n)),"onInputChange",function(t){var e=n.state.objectSettings,r=Object.assign({},e);r=Object.assign(r,t),n.setState({objectSettings:r})}),yo(vo(vo(n)),"sendChangedDataToRedux",function(t){var e=n.props,r=e.currentObject,o=e.actions,i=Object.assign({},t);i.id=r.objectId,o.changeAnyObjectData(i)}),yo(vo(vo(n)),"onBtnCloseClick",function(){(0,n.props.closeSettings)()}),yo(vo(vo(n)),"onBtnAcceptClick",function(){var t=n.state.objectSettings,e={};try{Object.keys(t).forEach(function(n){if("width"===n||"height"===n){if(!/^\d*$/.test(t[n]))throw new Error("Исправьте ввод числовых значений");e[n]=Number(t[n])}else e[n]=t[n]}),n.sendChangedDataToRedux(e),n.setState({objectSettings:{}})}catch(t){alert("ОШИБКА: НЕПРАВИЛЬНЫЙ ВВОД ДАННЫХ: ".concat(t.message))}}),n}var n,o,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&po(t,e)}(e,r["Component"]),n=e,(o=[{key:"componentWillUnmount",value:function(){this.setState({objectSettings:{}})}},{key:"render",value:function(){var t=this,e=this.props.object,n=["id","coordinates","title","category","width","height","color","movable"].map(function(n){if(void 0!==e)return"movable"===n?r.createElement(eo,{key:n,label:n,placeholder:e[n],disabled:!1,onInputChange:t.onInputChange}):"category"===n?r.createElement(co,{key:n,label:n,placeholder:e[n],disabled:!1,onInputChange:t.onInputChange}):"coordinates"===n?r.createElement(Xr,{key:n,label:"coordinates (x,y)",placeholder:"".concat(e[n].x,",").concat(e[n].y),disabled:!0,onInputChange:t.onInputChange}):"title"===n&&"table"===e.category?void 0:r.createElement(Xr,{key:n,label:n,placeholder:String(e[n]),disabled:"id"===n||"title"===n&&"table"===e.category,onInputChange:t.onInputChange})});return r.createElement("div",{className:"currentObjectSettingsContainer"},n,void 0!==e&&r.createElement("div",{className:"buttonsSet"},r.createElement("button",{type:"submit",className:"buttonCurrentObjectSettingsAccept",onClick:this.onBtnAcceptClick},"Применить")))}}])&&fo(n.prototype,o),i&&fo(n,i),e}(),mo=Z(function(t){return{objects:t.objects,currentObject:t.currentObject}},function(t){return{actions:Object(l.bindActionCreators)({updateUser:Mt,changeCurrentUser:Wt,changeAnyObjectData:Kt},t)}})(go);n(151);function bo(t){return(bo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _o(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function xo(t){return(xo=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function wo(t,e){return(wo=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function So(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Co(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var To=n(8),Fo=function(t){function e(t){var n,r,o;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),r=this,o=xo(e).call(this,t),n=!o||"object"!==bo(o)&&"function"!=typeof o?So(r):o,Co(So(So(n)),"openCloseObjectSettings",function(){var t=n.state.showObjectSettings;n.setState({showObjectSettings:!t})}),Co(So(So(n)),"closeObjectSettings",function(){n.setState({showObjectSettings:!1})}),Co(So(So(n)),"openChangeUserPanel",function(){if(""===n.props.currentObject.objectId)alert("ОШИБКА: ОБЪЕКТ НЕ ВЫБРАН! Щелкните на одном из объектов!");else{var t=n.state.showChangeUserPanel;n.setState({showChangeUserPanel:!t})}}),Co(So(So(n)),"selectUser",function(t){var e=n.props,r=e.actions,o=e.currentObject;if(o.userId===t)alert("ПРЕДУПРЕЖДЕНИЕ: ВЫ ВЫБРАЛИ ТОГО ЖЕ ПОЛЬЗОВАТЕЛЯ. LOL=) А зачем?)");else if(n.checkUserAssignedToTable(t))alert("ОШИБКА: ПОЛЬЗОВАТЕЛЬ УЖЕ ПРИВЯЗАН К СТОЛУ! Выберите другого пользователя!");else{var i={id:o.objectId,userId:t};r.updateUser(i),r.changeCurrentUser(t)}var a=n.state.showChangeUserPanel;n.setState({showChangeUserPanel:!a})}),Co(So(So(n)),"onDeleteUser",function(){var t=n.props,e=t.actions,r={id:t.currentObject.objectId,userId:""};e.updateUser(r),e.changeCurrentUser(""),n.setState({showChangeUserPanel:!1})}),n.state={showObjectSettings:!1,showChangeUserPanel:!1},n}var n,o,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&wo(t,e)}(e,r["Component"]),n=e,(o=[{key:"checkUserAssignedToTable",value:function(t){if(""===t)return!1;var e=this.props.objects,n=!0,r=!1,o=void 0;try{for(var i,a=e.levels[Symbol.iterator]();!(n=(i=a.next()).done);n=!0){var l=i.value,s=!0,c=!1,u=void 0;try{for(var d,f=l[Symbol.iterator]();!(s=(d=f.next()).done);s=!0){if(d.value.userId===t)return!0}}catch(t){c=!0,u=t}finally{try{s||null==f.return||f.return()}finally{if(c)throw u}}}}catch(t){r=!0,o=t}finally{try{n||null==a.return||a.return()}finally{if(r)throw o}}return!1}},{key:"render",value:function(){var t,e=this.props,n=e.currentObject,o=e.workMode,i=e.objects,a=e.users,l=this.state.showChangeUserPanel,s={title:"Not assigned",capability:""};o===Tt&&(void 0!==(t=i.levels[i.mapLevel].find(function(t){return t.id===n.objectId}))&&void 0!==n.userId&&""!==n.userId&&(s=a.find(function(t){return t.id===n.userId})),t=To.cloneDeep(t),s=To.cloneDeep(s));return r.createElement("div",null,r.createElement("div",{className:"currentObjectContainer"},r.createElement("div",{className:"labelCurrObj"},"Изменить выбранный объект #ID: ",n.objectId),r.createElement(Br,{object:t}),r.createElement(mo,{object:t,closeSettings:this.closeObjectSettings})),void 0!==t&&"table"===t.category&&r.createElement("div",{className:"currentObjectContainer"},r.createElement("div",{className:"labelCurrObj"},"Изменить пользователя:"),r.createElement(Er,{itemPlace:"CurrentObjectTab",user:s,isSelected:!1,onItemClick:this.openChangeUserPanel,onEditClick:this.openChangeUserPanel,onDeleteClick:this.onDeleteUser})),l&&r.createElement(Kr,{onUserClick:this.selectUser}))}}])&&_o(n.prototype,o),i&&_o(n,i),e}(),Oo=Z(function(t){return{objects:t.objects,users:t.users,currentObject:t.currentObject,workMode:t.workMode}},function(t){return{actions:Object(l.bindActionCreators)({updateUser:Mt,changeCurrentUser:Wt},t)}})(Fo);function Po(t){return(Po="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Eo(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function jo(t){return(jo=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Io(t,e){return(Io=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function ko(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}var Lo=function(t){function e(){var t,n,r,o,i,a,l;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);for(var s=arguments.length,c=new Array(s),u=0;u<s;u++)c[u]=arguments[u];return r=this,o=(t=jo(e)).call.apply(t,[this].concat(c)),n=!o||"object"!==Po(o)&&"function"!=typeof o?ko(r):o,i=ko(ko(n)),l=function(t){(0,n.props.onSelectLevel)(t.value)},(a="handleSelect")in i?Object.defineProperty(i,a,{value:l,enumerable:!0,configurable:!0,writable:!0}):i[a]=l,n}var n,r,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Io(t,e)}(e,o.a.Component),n=e,(r=[{key:"render",value:function(){var t=vt.levels.map(function(t){return{value:t.sortId,label:t.title}}),e=this.props.currentLevel,n=vt.levels.find(function(t){return t.sortId===e});return n={value:n.sortId,label:n.title},o.a.createElement("div",null,o.a.createElement("div",{style:{textAlign:"center"}},"Текущая карта:"),o.a.createElement(ro.a,{options:t,onChange:this.handleSelect,value:n,placeholder:n}))}}])&&Eo(n.prototype,r),i&&Eo(n,i),e}(),Mo=Z(function(t){return{mapState:t.mapState}},function(t){return{actions:Object(l.bindActionCreators)({changeMapLevel:At,changeObjectsLevel:Nt},t)}})(Lo);n(153);function No(t){return(No="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Do(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Ko(t){return(Ko=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Uo(t,e){return(Uo=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Ao(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}var zo=n(8),Ro=function(t){function e(t){var n,r,o,i,a,l;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),r=this,o=Ko(e).call(this,t),n=!o||"object"!==No(o)&&"function"!=typeof o?Ao(r):o,i=Ao(Ao(n)),l=function(t){var e=n.props,r=e.label,o=e.onInputChange;n.setState({currCategory:t.value});var i={};i[r]=t.value,o(i)},(a="handleSelect")in i?Object.defineProperty(i,a,{value:l,enumerable:!0,configurable:!0,writable:!0}):i[a]=l;var s=n.props.placeholder;return n.state={currCategory:s},n}var n,o,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Uo(t,e)}(e,r["Component"]),n=e,(o=[{key:"componentDidUpdate",value:function(t){var e=this.props.placeholder;t.placeholder!==e&&this.setState({currCategory:e})}},{key:"render",value:function(){var t=this.state.currCategory,e=this.props.label,n=zo.range(1,14).map(function(t){return{value:t,label:t}}),o=n.find(function(e){return e.value===Number(t)});return r.createElement("div",{className:"editField"},r.createElement("div",{className:"editFieldDropdownLabel"},e),r.createElement(ro.a,{className:"editFieldDropdown",options:n,onChange:this.handleSelect,value:o,placeholder:o}))}}])&&Do(n.prototype,o),i&&Do(n,i),e}();n(155);function Wo(t){return(Wo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Bo(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Go(t){return(Go=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Vo(t,e){return(Vo=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Yo(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function $o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var Qo=function(t){function e(){var t,n,r,o;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);for(var i=arguments.length,a=new Array(i),l=0;l<i;l++)a[l]=arguments[l];return r=this,o=(t=Go(e)).call.apply(t,[this].concat(a)),n=!o||"object"!==Wo(o)&&"function"!=typeof o?Yo(r):o,$o(Yo(Yo(n)),"state",{userSettings:{}}),$o(Yo(Yo(n)),"onInputChange",function(t){var e=n.state.userSettings,r=Object.assign({},e);r=Object.assign(r,t),n.setState({userSettings:r})}),$o(Yo(Yo(n)),"sendChangedDataToRedux",function(t){var e=n.props,r=e.actions,o=e.user,i=Object.assign({},t);i.id=o.id,r.editUser(i)}),$o(Yo(Yo(n)),"onBtnCloseClick",function(){}),$o(Yo(Yo(n)),"onBtnAcceptClick",function(){var t=n.state.userSettings,e={};try{Object.keys(t).forEach(function(n){e[n]=t[n]})}catch(t){return void alert("ОШИБКА: НЕПРАВИЛЬНЫЙ ВВОД ДАННЫХ: ".concat(t.message))}n.sendChangedDataToRedux(e),n.setState({userSettings:{}})}),$o(Yo(Yo(n)),"onBtnCloseClick",function(){(0,n.props.onClose)("")}),n}var n,o,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Vo(t,e)}(e,r["Component"]),n=e,(o=[{key:"componentWillUnmount",value:function(){this.setState({userSettings:{}})}},{key:"render",value:function(){var t=this,e=this.props.user,n=["id","category","userId","title","about","capability","phone","level","startdate"].map(function(n){if(void 0!==e)return"level"===n?r.createElement(Ro,{key:n,label:n,placeholder:e[n],disabled:!1,onInputChange:t.onInputChange}):r.createElement(Xr,{key:n,label:n,placeholder:String(e[n]),disabled:"id"===n||"category"===n,onInputChange:t.onInputChange})});return r.createElement("div",{className:"userSettingsContainer"},n,void 0!==e&&r.createElement("div",{className:"buttonsSet"},r.createElement("button",{type:"submit",className:"buttonAccept",onClick:this.onBtnAcceptClick},"Применить"),r.createElement("button",{type:"submit",className:"buttonClose",onClick:this.onBtnCloseClick},"Закрыть")))}}])&&Bo(n.prototype,o),i&&Bo(n,i),e}(),Xo=Z(function(t){return{objects:t.objects}},function(t){return{actions:Object(l.bindActionCreators)({editUser:Vt},t)}})(Qo);n(157);function Zo(t){return(Zo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Jo(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Ho(t){return(Ho=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function qo(t,e){return(qo=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function ti(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function ei(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var ni=n(8),ri=function(t){function e(){var t,n,r,o;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);for(var i=arguments.length,a=new Array(i),l=0;l<i;l++)a[l]=arguments[l];return r=this,o=(t=Ho(e)).call.apply(t,[this].concat(a)),n=!o||"object"!==Zo(o)&&"function"!=typeof o?ti(r):o,ei(ti(ti(n)),"state",{userSettings:{}}),ei(ti(ti(n)),"onInputChange",function(t){var e=n.state.userSettings,r=Object.assign({},e);r=Object.assign(r,t),n.setState({userSettings:r})}),ei(ti(ti(n)),"onBtnCreateClick",function(){var t=n.props,e=t.actions,r=t.user,o=t.onClose,i=n.state.userSettings,a=ni.clone(r);try{Object.keys(i).forEach(function(t){a[t]=i[t]})}catch(t){return void alert("ОШИБКА: НЕПРАВИЛЬНЫЙ ВВОД ДАННЫХ: ".concat(t.message))}e.addUser(a),o()}),ei(ti(ti(n)),"onBtnCancelClick",function(){(0,n.props.onClose)()}),n}var n,o,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&qo(t,e)}(e,r["Component"]),n=e,(o=[{key:"componentWillUnmount",value:function(){this.setState({userSettings:{}})}},{key:"render",value:function(){var t=this,e=this.props.user,n=["id","category","userId","title","about","capability","phone","level","startdate"].map(function(n){if(void 0!==e)return"level"===n?r.createElement(Ro,{key:n,label:n,placeholder:e[n],disabled:!1,onInputChange:t.onInputChange}):r.createElement(Xr,{key:n,label:n,placeholder:String(e[n]),disabled:"id"===n||"category"===n,onInputChange:t.onInputChange})});return r.createElement("div",{className:"userCreateContainer"},n,void 0!==e&&r.createElement("div",{className:"buttonsSet"},r.createElement("button",{type:"submit",className:"buttonAccept",onClick:this.onBtnCreateClick},"Создать"),r.createElement("button",{type:"submit",className:"buttonCancel",onClick:this.onBtnCancelClick},"Отменить")))}}])&&Jo(n.prototype,o),i&&Jo(n,i),e}(),oi=Z(function(t){return{objects:t.objects}},function(t){return{actions:Object(l.bindActionCreators)({addUser:Gt},t)}})(ri);n(159);function ii(t){return(ii="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function ai(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function li(t){return(li=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function si(t,e){return(si=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function ci(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function ui(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var di=function(t){function e(t){var n,r,o;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),r=this,o=li(e).call(this,t),n=!o||"object"!==ii(o)&&"function"!=typeof o?ci(r):o,ui(ci(ci(n)),"getNewDefaultUser",function(){var t=(new Date).toLocaleDateString();t=(t=(t=t.split("/")).slice(2).concat(t.slice(0,2))).join("-");var e=n.props.users.reduce(function(t,e,n){var r,o;return 1===n?(r=Number(t.id.slice(1)),o=Number(e.id.slice(1))):(r=t,o=Number(e.id.slice(1))),o>r?o:r});return{id:"t".concat(String(e+1).padStart(4,"0")),category:"people",userId:"name.surname",title:"Имя Фамилия",about:"навыки",capability:"квалификация",phone:"88005553535",level:13,startdate:t}}),ui(ci(ci(n)),"onChangeInput",function(t){n.setState({searchPhrase:t.target.value})}),ui(ci(ci(n)),"onItemClick",function(t){for(var e=n.props,r=e.actions,o=e.objects,i=0;i<o.levels.length;i+=1){var a=!0,l=!1,s=void 0;try{for(var c,u=o.levels[i][Symbol.iterator]();!(a=(c=u.next()).done);a=!0){var d=c.value;if(d.userId===t)return void(i===o.mapLevel?(r.changeCurrentObject(d.id),r.changeCurrentUser(d.userId)):alert("ПРЕДУПРЕЖДЕНИЕ: ПОЛЬЗОВАТЕЛЬ НА ДРУГОЙ КАРТЕ: ".concat(vt.levels[i].title)))}}catch(t){l=!0,s=t}finally{try{a||null==u.return||u.return()}finally{if(l)throw s}}}alert("ПРЕДУПРЕЖДЕНИЕ: Пользователь не привязан к столу")}),ui(ci(ci(n)),"onUserClick",function(t){var e=n.state.userId;n.setState({userId:""===e?t:"",searchPhrase:""})}),ui(ci(ci(n)),"onBtnAddUser",function(){n.setState({showUserCreatePanel:!0})}),ui(ci(ci(n)),"onCloseUserCreatePanel",function(){n.setState({showUserCreatePanel:!1})}),ui(ci(ci(n)),"onDeleteUserClick",function(t){var e=n.props,r=e.actions,o=e.objects,i=o.levels[o.mapLevel].find(function(e){return e.userId===t});if(void 0!==i){var a={id:i.id,userId:""};r.updateUser(a)}r.deleteUser(t)}),n.state={searchPhrase:"",userId:"",showUserCreatePanel:!1},n}var n,o,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&si(t,e)}(e,r["Component"]),n=e,(o=[{key:"render",value:function(){var t=this,e=this.props.users,n=this.state,o=n.userId,i=n.searchPhrase,a=n.showUserCreatePanel,l=e.filter(function(t){var e=t.title.toLowerCase().split(" ",2),n=i.toLowerCase();return""===n||e.some(function(t){return t.startsWith(n)})}).map(function(e){return""===o?r.createElement("li",{key:e.id},r.createElement(Er,{itemPlace:"UsersEditList",user:e,isSelected:!1,onItemClick:t.onItemClick,onEditClick:t.onUserClick,onDeleteClick:t.onDeleteUserClick})):o===e.id?r.createElement("li",{key:e.id},r.createElement(Er,{itemPlace:"UsersEditList",user:e,isSelected:!0,onItemClick:t.onItemClick,onEditClick:t.onUserClick,onDeleteUserClick:t.onDeleteUserClick}),r.createElement(Xo,{user:e,onClose:t.onUserClick})):void 0});return r.createElement("div",{className:"usersEditListWrapper"},r.createElement(An.DebounceInput,{minLength:1,debounceTimeout:300,onChange:this.onChangeInput}),r.createElement("button",{type:"submit",className:"buttonAddUser",onClick:this.onBtnAddUser},"Добавить пользователя"),!0===a&&r.createElement(oi,{user:this.getNewDefaultUser(),onClose:this.onCloseUserCreatePanel}),!1===a&&r.createElement("ul",{className:""===o?"usersEditListList":"usersEditListChosen"},l))}}])&&ai(n.prototype,o),i&&ai(n,i),e}(),fi=Z(function(t){return{currentObject:t.currentObject,users:t.users,objects:t.objects}},function(t){return{actions:Object(l.bindActionCreators)({addUser:Gt,editUser:Vt,deleteUser:Yt,updateUser:Mt,changeCurrentObject:Rt,changeCurrentUser:Wt},t)}})(di);n(161),n(163);function hi(t){return(hi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function pi(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function vi(t){return(vi=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function yi(t,e){return(yi=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function gi(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function mi(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var bi=function(t){function e(){var t,n,r,o;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);for(var i=arguments.length,a=new Array(i),l=0;l<i;l++)a[l]=arguments[l];return r=this,o=(t=vi(e)).call.apply(t,[this].concat(a)),n=!o||"object"!==hi(o)&&"function"!=typeof o?gi(r):o,mi(gi(gi(n)),"handleYesClick",function(){(0,n.props.onYesClick)()}),mi(gi(gi(n)),"handleClose",function(){(0,n.props.onHide)()}),n}var n,r,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&yi(t,e)}(e,o.a.Component),n=e,(r=[{key:"render",value:function(){var t=this.props.visible;return o.a.createElement(dn.a,{visible:t,width:"450",height:"150",effect:"fadeInUp",onClickAway:this.handleClose},o.a.createElement("div",{className:"saveMapModalContainer"},o.a.createElement("h1",{className:"saveMapModalLabel"},"Подтверждение действия"),o.a.createElement("p",{className:"saveMapModalMessage"},"Текущая карта будет загружена файлом newMapData.json. Продолжить?"),o.a.createElement("div",{className:"modalButtonsSet"},o.a.createElement("button",{className:"modalButtonAccept",type:"submit",onClick:this.handleYesClick},"Да"),o.a.createElement("button",{className:"modalButtonClose",type:"submit",onClick:this.handleClose},"Нет"))))}}])&&pi(n.prototype,r),i&&pi(n,i),e}();function _i(t){return(_i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function xi(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function wi(t){return(wi=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Si(t,e){return(Si=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Ci(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Ti(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var Fi=n(165),Oi=n(8),Pi=function(t){function e(){var t,n,r,o;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);for(var i=arguments.length,a=new Array(i),l=0;l<i;l++)a[l]=arguments[l];return r=this,o=(t=wi(e)).call.apply(t,[this].concat(a)),n=!o||"object"!==_i(o)&&"function"!=typeof o?Ci(r):o,Ti(Ci(Ci(n)),"state",{showModal:!1}),Ti(Ci(Ci(n)),"openModal",function(){n.setState({showModal:!0})}),Ti(Ci(Ci(n)),"closeModal",function(){n.setState({showModal:!1})}),Ti(Ci(Ci(n)),"handleYesClickModal",function(){n.saveCurrentMap(),n.closeModal()}),Ti(Ci(Ci(n)),"handleCloseModal",function(){n.closeModal()}),Ti(Ci(Ci(n)),"saveCurrentMap",function(){var t=n.props,e=t.objects,r=t.users,o=["category","title","id","coordinates","width","height","color","movable","correctLocation","userId"],i=Oi.cloneDeep(vt);i.levels=e.levels.map(function(t,e){var n=Object.assign({},i.levels[e]);return n.objects=t.map(function(t){var e={};return o.forEach(function(n){void 0!==t[n]&&(e[n]=t[n])}),e}),n}),i.users=r;var a=new File([JSON.stringify(i)],"newMapData.json",{type:"text/plain;charset=utf-8"});Fi.saveAs(a)}),Ti(Ci(Ci(n)),"handleSaveMapButton",function(){n.openModal()}),n}var n,o,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Si(t,e)}(e,r["Component"]),n=e,(o=[{key:"render",value:function(){var t=this.state.showModal;return r.createElement(r.Fragment,null,r.createElement("div",{className:"saveMapContainer"},r.createElement("button",{type:"submit",className:"buttonSaveMap",onClick:this.handleSaveMapButton},"Сохранить карту")),r.createElement(bi,{visible:t,onYesClick:this.handleYesClickModal,onHide:this.handleCloseModal}))}}])&&xi(n.prototype,o),i&&xi(n,i),e}(),Ei=Z(function(t){return{users:t.users,objects:t.objects}},function(t){return{actions:Object(l.bindActionCreators)({},t)}})(Pi);n(166);function ji(t){return(ji="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Ii(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function ki(t){return(ki=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Li(t,e){return(Li=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Mi(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Ni(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var Di=function(t){function e(){var t,n,r,o;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);for(var i=arguments.length,a=new Array(i),l=0;l<i;l++)a[l]=arguments[l];return r=this,o=(t=ki(e)).call.apply(t,[this].concat(a)),n=!o||"object"!==ji(o)&&"function"!=typeof o?Mi(r):o,Ni(Mi(Mi(n)),"autoAdjustStage",function(t,e){var r,o=n.props,i=o.boardWidth/(t+40),a=o.boardHeight/(e+40),l={shift:[20*(r=i<1||a<1?i>a?a:i:i>a?i:a),20*r],scale:r};n.props.actions.changeBoardState(l)}),Ni(Mi(Mi(n)),"cleanCurrentObjectState",function(){var t=n.props.actions;t.changeCurrentObject(""),t.changeCurrentUser("")}),Ni(Mi(Mi(n)),"onSelectLevel",function(t){n.cleanCurrentObjectState();var e=n.props.actions;e.changeMapLevel(t),e.changeObjectsLevel(t)}),n}var n,o,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Li(t,e)}(e,r["Component"]),n=e,(o=[{key:"componentDidUpdate",value:function(t){var e=this.props.mapState;if(t.mapState!==e){var n=e.mapWidth,r=e.mapHeight;this.autoAdjustStage(n,r)}}},{key:"render",value:function(){var t=this.props,e=t.currentObject,n=t.panelWidth,o=t.panelHeight,i=t.mapState;return r.createElement("div",{className:"sidePanelContainer",style:{width:"".concat(n,"px"),height:"".concat(o,"px")}},r.createElement(Mo,{currentLevel:i.mapLevel,onSelectLevel:this.onSelectLevel}),r.createElement(Un.Accordion,{className:"mainAccordion"},r.createElement(Un.AccordionItem,{bodyClassName:"mainAccordion-item-body-wrapper",expandedClassName:"mainAccordion-item-expanded",titleClassName:"mainAccordion-item-title",title:"Редактировать",expanded:"none"!==e.state},r.createElement(Oo,null)),r.createElement(Un.AccordionItem,{bodyClassName:"mainAccordion-item-body-wrapper",expandedClassName:"mainAccordion-item-expanded",titleClassName:"mainAccordion-item-title",title:"Создать"},r.createElement(vr,null)),r.createElement(Un.AccordionItem,{bodyClassName:"mainAccordion-item-body-wrapper",expandedClassName:"mainAccordion-item-expanded",titleClassName:"mainAccordion-item-title",title:"Пользователи"},r.createElement(fi,null)),r.createElement(Un.AccordionItem,{bodyClassName:"mainAccordion-item-body-wrapper",expandedClassName:"mainAccordion-item-expanded",titleClassName:"mainAccordion-item-title",title:"Карта"},r.createElement(Ei,null))))}}])&&Ii(n.prototype,o),i&&Ii(n,i),e}(),Ki=Z(function(t){return{objects:t.objects,boardState:t.boardState,currentObject:t.currentObject,users:t.users,mapState:t.mapState}},function(t){return{actions:Object(l.bindActionCreators)({createObject:jt,changeCurrentObject:Rt,changeCurrentUser:Wt,changeMapLevel:At,changeObjectsLevel:Nt,changeBoardState:zt},t)}})(Di);n(168);function Ui(t){return(Ui="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Ai(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function zi(t){return(zi=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Ri(t,e){return(Ri=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Wi(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Bi(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var Gi=function(t){function e(){var t,n,r,o;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);for(var i=arguments.length,a=new Array(i),l=0;l<i;l++)a[l]=arguments[l];return r=this,o=(t=zi(e)).call.apply(t,[this].concat(a)),n=!o||"object"!==Ui(o)&&"function"!=typeof o?Wi(r):o,Bi(Wi(Wi(n)),"autoAdjustStage",function(){var t,e=n.props.mapState,r=n.props,o=r.boardWidth,i=r.boardHeight,a=o/(e.mapWidth+40),l=i/(e.mapHeight+40),s={shift:[20*(t=a<1||l<1?a>l?l:a:a>l?a:l),20*t],scale:t};n.props.actions.changeBoardState(s)}),Bi(Wi(Wi(n)),"handleChange",function(t){var e=n.props.actions,r=!0===t.target.checked?Ft:Tt;e.changeWorkMode(r)}),Bi(Wi(Wi(n)),"handleZoomIn",function(){var t=n.props,e=t.actions,r=t.boardState,o=1.5*r.scale,i={shift:r.shift,scale:o};e.changeBoardState(i)}),Bi(Wi(Wi(n)),"handleZoomOut",function(){var t=n.props,e=t.actions,r=t.boardState,o=r.scale/1.5,i={shift:r.shift,scale:o};e.changeBoardState(i)}),n}var n,r,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Ri(t,e)}(e,o.a.Component),n=e,(r=[{key:"render",value:function(){var t=this.props,e=t.panelWidth,n=t.panelHeight;return o.a.createElement("div",{className:"leftPanel",style:{width:"".concat(e,"px"),height:"".concat(n,"px")}},o.a.createElement("div",{className:"labelLeftPanel"},"Масштаб карты"),o.a.createElement("div",{className:"buttonsSet"},o.a.createElement("button",{type:"submit",className:"buttonZoomIn",onClick:this.handleZoomIn},"+"),o.a.createElement("button",{type:"submit",className:"buttonZoomOut",onClick:this.handleZoomOut},"-")),o.a.createElement("button",{type:"submit",className:"buttonLeftPanel",onClick:this.autoAdjustStage},"Авто-масштаб"),o.a.createElement("div",{className:"checkboxLeftPanel"},o.a.createElement("input",{className:"buttonLeftPanel",type:"checkbox",onChange:this.handleChange}),o.a.createElement("div",{className:"labelLeftPanel"},"Групповое выделение")))}}])&&Ai(n.prototype,r),i&&Ai(n,i),e}(),Vi=Z(function(t){return{mapState:t.mapState,currentObject:t.currentObject,boardState:t.boardState}},function(t){return{actions:Object(l.bindActionCreators)({changeBoardState:zt,changeWorkMode:$t},t)}})(Gi),Yi=(n(170),function(){var t=window.innerWidth/1.7,e=window.innerHeight-50;return r.createElement("div",{className:"globalArea"},r.createElement(Vi,{panelWidth:t/8,panelHeight:e/2,boardWidth:t,boardHeight:e}),r.createElement(Kn,{boardWidth:t,boardHeight:e}),r.createElement(Ki,{panelWidth:.3*t,panelHeight:e+2,boardWidth:t,boardHeight:e}))}),$i=(n(172),function(){return r.createElement("div",{className:"myContainer"},r.createElement("div",{className:"labelMainHeader"},"Office map"),r.createElement(Yi,null))}),Qi=Object(l.createStore)(Pt,Object(s.composeWithDevTools)());a.a.render(r.createElement(p,{store:Qi},r.createElement($i,null)),document.getElementById("root"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,